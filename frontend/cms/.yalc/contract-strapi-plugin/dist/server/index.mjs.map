{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.js","../../server/src/destroy.js","../../server/src/register.js","../../server/src/config/index.js","../../server/src/content-types/index.js","../../server/src/controllers/controller.js","../../server/src/controllers/index.js","../../server/src/middlewares/index.js","../../server/src/policies/index.js","../../server/src/routes/index.js","../../server/src/services/service.js","../../server/src/services/index.js","../../server/src/index.js"],"sourcesContent":["const bootstrap = ({ strapi }) => {\r\n  // bootstrap phase\r\n};\r\n\r\nexport default bootstrap;\r\n","const destroy = ({ strapi }) => {\r\n  // destroy phase\r\n};\r\n\r\nexport default destroy;\r\n","const register = ({ strapi }) => {\r\n  // register phase\r\n};\r\n\r\nexport default register;\r\n","export default {\r\n  default: {},\r\n  validator() {},\r\n};\r\n","\r\nexport default {};\r\n","const controller = ({ strapi }) => ({\r\n  index(ctx) {\r\n    ctx.body = strapi\r\n      .plugin('contract-strapi-plugin')\r\n      // the name of the service file & the method.\r\n      .service('service')\r\n      .getWelcomeMessage();\r\n  },\r\n  getPetApply(ctx) {\r\n    return strapi.plugin('contract-strapi-plugin').service('service').getPetApply(ctx.query.documentId);\r\n  },\r\n  createContract(ctx) {\r\n    // console.log('createContract ctx.request.body = ', ctx.request.body);\r\n    ctx.body = strapi.plugin('contract-strapi-plugin').service('service').createContract(ctx.request.body);\r\n  },\r\n  getRecord(ctx) {\r\n    return strapi.plugin('contract-strapi-plugin').service('service').getRecord(ctx.query.documentId);\r\n  },\r\n  updateRecord(ctx) {\r\n    ctx.body = strapi.plugin('contract-strapi-plugin').service('service').updateRecord(ctx.request.body);\r\n  },\r\n  updateContract(ctx) {\r\n    ctx.body = strapi.plugin('contract-strapi-plugin').service('service').updateContract(ctx.request.body);\r\n  },\r\n  getRecordsByContract(ctx) {\r\n    return strapi.plugin('contract-strapi-plugin').service('service').getRecordsByContract(ctx.query.contractId);\r\n  }\r\n});\r\n\r\nexport default controller;\r\n","import controller from './controller';\r\n\r\nexport default {\r\n  controller,\r\n};\r\n","export default {};\r\n","export default {};\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.index',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/getPetApply/:slug',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.getPetApply',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/getRecord/:slug',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.getRecord',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'POST',\r\n    path: '/contracts',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.createContract',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'PUT',\r\n    path: '/contracts',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.updateContract',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'PUT',\r\n    path: '/records',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.updateRecord',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/getRecordsByContract/:slug',\r\n    // name of the controller file & the method.\r\n    handler: 'controller.getRecordsByContract',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n];\r\n","const service = ({ strapi }) => ({\r\n  getWelcomeMessage() {\r\n    return 'Welcome to Strapi ðŸš€';\r\n  },\r\n  async getPetApply(documentId) {\r\n    // console.log('~~~~~~~~~~~~~~~~documentId', documentId);\r\n    const result = await strapi.db.query('api::pet-apply.pet-apply').findOne({\r\n      where: { document_id: documentId },\r\n      populate: true,\r\n    });\r\n    return result;\r\n  },\r\n  async getRecord(documentId) {\r\n    // console.log('~~~~~~~~~~~~~~~~documentId', documentId);\r\n    const result = await strapi.db.query('api::record.record').findOne({\r\n      where: { document_id: documentId },\r\n      populate: true,\r\n    });\r\n    console.log('getRecord result = ', result);\r\n    return result;\r\n  },\r\n  async createContract(data) {\r\n    const result = await strapi\r\n      .documents('api::pet-contract.pet-contract')\r\n      .create({ data, status: data.status });\r\n    console.log('createContract result = ', result);\r\n    return result;\r\n  },\r\n  async updateContract(data) {\r\n    const result = await strapi\r\n      .documents('api::pet-contract.pet-contract')\r\n      .update({ documentId: data.documentId, data: data.data, status: data.status });\r\n    console.log('updateContract result = ', result);\r\n    return result;\r\n  },\r\n  async updateRecord(data) {\r\n    const result = await strapi.documents('api::record.record').update({\r\n      documentId: data.documentId,\r\n      data: data.data,\r\n      status: data.status,\r\n    });\r\n    console.log('updateRecord result = ', result);\r\n    return result;\r\n  },\r\n  async getRecordsByContract(contractId) {\r\n    console.log('getRecordsByContract contractId = ', contractId);\r\n    const result = await strapi.db.query('api::record.record').findMany({\r\n      filters: {\r\n        contract: {\r\n          documentId: contractId,\r\n        },\r\n        result: 'Pass',\r\n        publishedAt: {\r\n          $notNull: true,\r\n        },\r\n      },\r\n      status: 'published',\r\n    });\r\n    return result;\r\n  },\r\n});\r\n\r\nexport default service;\r\n","import service from './service';\r\n\r\nexport default {\r\n  service,\r\n};\r\n","/**\r\n * Application methods\r\n */\r\nimport bootstrap from './bootstrap';\r\nimport destroy from './destroy';\r\nimport register from './register';\r\n\r\n/**\r\n * Plugin server methods\r\n */\r\nimport config from './config';\r\nimport contentTypes from './content-types';\r\nimport controllers from './controllers';\r\nimport middlewares from './middlewares';\r\nimport policies from './policies';\r\nimport routes from './routes';\r\nimport services from './services';\r\n\r\nexport default {\r\n  bootstrap,\r\n  destroy,\r\n  register,\r\n\r\n  config,\r\n  controllers,\r\n  contentTypes,\r\n  middlewares,\r\n  policies,\r\n  routes,\r\n  services,\r\n};\r\n"],"names":[],"mappings":"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"}