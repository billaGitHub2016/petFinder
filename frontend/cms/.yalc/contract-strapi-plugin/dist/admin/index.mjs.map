{"version":3,"file":"index.mjs","sources":["../../admin/src/pluginId.js","../../admin/src/components/Initializer.jsx","../../admin/src/hooks/usePetApply.js","../../admin/src/hooks/useRecord.js","../../node_modules/@mysten/sui/dist/esm/version.js","../../node_modules/@mysten/sui/dist/esm/client/errors.js","../../node_modules/@mysten/sui/dist/esm/client/rpc-websocket-client.js","../../node_modules/@mysten/sui/dist/esm/client/http-transport.js","../../node_modules/@mysten/sui/dist/esm/client/network.js","../../node_modules/base-x/src/esm/index.js","../../node_modules/bs58/src/esm/index.js","../../node_modules/@mysten/bcs/dist/esm/b58.js","../../node_modules/@mysten/bcs/dist/esm/b64.js","../../node_modules/@mysten/bcs/dist/esm/hex.js","../../node_modules/@mysten/bcs/dist/esm/uleb.js","../../node_modules/@mysten/bcs/dist/esm/reader.js","../../node_modules/@mysten/bcs/dist/esm/utils.js","../../node_modules/@mysten/bcs/dist/esm/writer.js","../../node_modules/@mysten/bcs/dist/esm/bcs-type.js","../../node_modules/@mysten/bcs/dist/esm/bcs.js","../../node_modules/@mysten/sui/dist/esm/utils/sui-types.js","../../node_modules/@mysten/sui/dist/esm/bcs/type-tag-serializer.js","../../node_modules/@mysten/sui/dist/esm/bcs/bcs.js","../../node_modules/@mysten/sui/dist/esm/bcs/effects.js","../../node_modules/@mysten/sui/dist/esm/bcs/pure.js","../../node_modules/@mysten/sui/dist/esm/bcs/index.js","../../node_modules/@mysten/sui/dist/esm/utils/suins.js","../../node_modules/@mysten/sui/dist/esm/utils/constants.js","../../node_modules/@noble/hashes/esm/_assert.js","../../node_modules/@noble/hashes/esm/utils.js","../../node_modules/@noble/hashes/esm/_blake.js","../../node_modules/@noble/hashes/esm/_u64.js","../../node_modules/@noble/hashes/esm/blake2b.js","../../node_modules/@mysten/sui/dist/esm/transactions/serializer.js","../../node_modules/@mysten/sui/dist/esm/transactions/Inputs.js","../../node_modules/valibot/dist/index.js","../../node_modules/@mysten/sui/dist/esm/transactions/data/internal.js","../../node_modules/@mysten/sui/dist/esm/transactions/Commands.js","../../node_modules/@mysten/sui/dist/esm/transactions/data/v1.js","../../node_modules/@mysten/sui/dist/esm/transactions/data/v2.js","../../node_modules/@mysten/sui/dist/esm/transactions/json-rpc-resolver.js","../../node_modules/@mysten/sui/dist/esm/transactions/object.js","../../node_modules/@mysten/sui/dist/esm/transactions/pure.js","../../node_modules/@mysten/sui/dist/esm/transactions/hash.js","../../node_modules/@mysten/sui/dist/esm/transactions/TransactionData.js","../../node_modules/@mysten/sui/dist/esm/transactions/utils.js","../../node_modules/@mysten/sui/dist/esm/transactions/Transaction.js","../../node_modules/@mysten/sui/dist/esm/client/client.js","../../admin/src/config/index.js","../../admin/src/components/providers/sui-provider.jsx","../../admin/src/config/constantsjs","../../admin/src/components/CreateContractForm.jsx","../../admin/src/components/ReviewRecordForm.jsx","../../admin/src/pages/HomePage.jsx","../../admin/src/index.js"],"sourcesContent":["export const PLUGIN_ID = 'contract-strapi-plugin';\r\n","import { useEffect, useRef } from 'react';\r\n\r\nimport { PLUGIN_ID } from '../pluginId';\r\n\r\n/**\r\n * @type {import('react').FC<{ setPlugin: (id: string) => void }>}\r\n */\r\nconst Initializer = ({ setPlugin }) => {\r\n  const ref = useRef(setPlugin);\r\n\r\n  useEffect(() => {\r\n    ref.current(PLUGIN_ID);\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport { Initializer };\r\n","import * as React from 'react';\r\nimport {\r\n  useFetchClient,\r\n  unstable_useContentManagerContext as useContentManagerContext,\r\n} from '@strapi/strapi/admin';\r\n\r\nfunction usePetApply() {\r\n  const fetchClient = useFetchClient();\r\n\r\n  const { model, id, isSingleType } = useContentManagerContext();\r\n\r\n  const [status, setStatus] = React.useState('loading');\r\n  const [petApplies, setPetApplies] = React.useState([]);\r\n\r\n  const refetchPetApplies = React.useCallback(async () => {\r\n    try {\r\n      const { data } = await fetchClient.get(\r\n        `/contract-strapi-plugin/getPetApply/${model}?documentId=${isSingleType ? '' : id}`\r\n      );\r\n\r\n      setPetApplies(data);\r\n      console.log('fetch data = ', data)\r\n      setStatus('success');\r\n    } catch (e) {\r\n      setStatus('error');\r\n    }\r\n  }, [fetchClient, id, isSingleType, model]);\r\n\r\n  React.useEffect(() => {\r\n    refetchPetApplies();\r\n  }, [id, isSingleType, setPetApplies, setStatus, refetchPetApplies]);\r\n\r\n  return { status, petApplies, refetchPetApplies, model };\r\n}\r\n\r\nexport default usePetApply;","import * as React from 'react';\r\nimport {\r\n  useFetchClient,\r\n  unstable_useContentManagerContext as useContentManagerContext,\r\n} from '@strapi/strapi/admin';\r\n\r\nfunction usePetApply() {\r\n  const fetchClient = useFetchClient();\r\n\r\n  const { model, id, isSingleType } = useContentManagerContext();\r\n\r\n  const [status, setStatus] = React.useState('loading');\r\n  const [record, setRecord] = React.useState([]);\r\n\r\n  const refetchRecord = React.useCallback(async () => {\r\n    try {\r\n      const { data } = await fetchClient.get(\r\n        `/contract-strapi-plugin/getRecord/${model}?documentId=${isSingleType ? '' : id}`\r\n      );\r\n\r\n      setRecord(data);\r\n      console.log('fetch data = ', data)\r\n      setStatus('success');\r\n    } catch (e) {\r\n      setStatus('error');\r\n    }\r\n  }, [fetchClient, id, isSingleType, model]);\r\n\r\n  React.useEffect(() => {\r\n    refetchRecord();\r\n  }, [id, isSingleType, setRecord, setStatus, refetchRecord]);\r\n\r\n  return { status, record, refetchRecord, model };\r\n}\r\n\r\nexport default usePetApply;","const PACKAGE_VERSION = \"1.21.2\";\nconst TARGETED_RPC_VERSION = \"1.43.0\";\nexport {\n  PACKAGE_VERSION,\n  TARGETED_RPC_VERSION\n};\n//# sourceMappingURL=version.js.map\n","const CODE_TO_ERROR_TYPE = {\n  \"-32700\": \"ParseError\",\n  \"-32701\": \"OversizedRequest\",\n  \"-32702\": \"OversizedResponse\",\n  \"-32600\": \"InvalidRequest\",\n  \"-32601\": \"MethodNotFound\",\n  \"-32602\": \"InvalidParams\",\n  \"-32603\": \"InternalError\",\n  \"-32604\": \"ServerBusy\",\n  \"-32000\": \"CallExecutionFailed\",\n  \"-32001\": \"UnknownError\",\n  \"-32003\": \"SubscriptionClosed\",\n  \"-32004\": \"SubscriptionClosedWithError\",\n  \"-32005\": \"BatchesNotSupported\",\n  \"-32006\": \"TooManySubscriptions\",\n  \"-32050\": \"TransientError\",\n  \"-32002\": \"TransactionExecutionClientError\"\n};\nclass SuiHTTPTransportError extends Error {\n}\nclass JsonRpcError extends SuiHTTPTransportError {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = CODE_TO_ERROR_TYPE[code] ?? \"ServerError\";\n  }\n}\nclass SuiHTTPStatusError extends SuiHTTPTransportError {\n  constructor(message, status, statusText) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n  }\n}\nexport {\n  JsonRpcError,\n  SuiHTTPStatusError,\n  SuiHTTPTransportError\n};\n//# sourceMappingURL=errors.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _WebsocketClient_instances, setupWebSocket_fn, reconnect_fn;\nimport { JsonRpcError } from \"./errors.js\";\nfunction getWebsocketUrl(httpUrl) {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  return url.toString();\n}\nconst DEFAULT_CLIENT_OPTIONS = {\n  // We fudge the typing because we also check for undefined in the constructor:\n  WebSocketConstructor: typeof WebSocket !== \"undefined\" ? WebSocket : void 0,\n  callTimeout: 3e4,\n  reconnectTimeout: 3e3,\n  maxReconnects: 5\n};\nclass WebsocketClient {\n  constructor(endpoint, options = {}) {\n    __privateAdd(this, _WebsocketClient_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _disconnects, 0);\n    __privateAdd(this, _webSocket, null);\n    __privateAdd(this, _connectionPromise, null);\n    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());\n    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());\n    this.endpoint = endpoint;\n    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n    if (!this.options.WebSocketConstructor) {\n      throw new Error(\"Missing WebSocket constructor\");\n    }\n    if (this.endpoint.startsWith(\"http\")) {\n      this.endpoint = getWebsocketUrl(this.endpoint);\n    }\n  }\n  async makeRequest(method, params) {\n    const webSocket = await __privateMethod(this, _WebsocketClient_instances, setupWebSocket_fn).call(this);\n    return new Promise((resolve, reject) => {\n      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n          reject(new Error(`Request timeout: ${method}`));\n        }, this.options.callTimeout)\n      });\n      webSocket.send(JSON.stringify({ jsonrpc: \"2.0\", id: __privateGet(this, _requestId), method, params }));\n    }).then(({ error, result }) => {\n      if (error) {\n        throw new JsonRpcError(error.message, error.code);\n      }\n      return result;\n    });\n  }\n  async subscribe(input) {\n    const subscription = new RpcSubscription(input);\n    __privateGet(this, _subscriptions).add(subscription);\n    await subscription.subscribe(this);\n    return () => subscription.unsubscribe(this);\n  }\n}\n_requestId = new WeakMap();\n_disconnects = new WeakMap();\n_webSocket = new WeakMap();\n_connectionPromise = new WeakMap();\n_subscriptions = new WeakMap();\n_pendingRequests = new WeakMap();\n_WebsocketClient_instances = new WeakSet();\nsetupWebSocket_fn = function() {\n  if (__privateGet(this, _connectionPromise)) {\n    return __privateGet(this, _connectionPromise);\n  }\n  __privateSet(this, _connectionPromise, new Promise((resolve) => {\n    __privateGet(this, _webSocket)?.close();\n    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));\n    __privateGet(this, _webSocket).addEventListener(\"open\", () => {\n      __privateSet(this, _disconnects, 0);\n      resolve(__privateGet(this, _webSocket));\n    });\n    __privateGet(this, _webSocket).addEventListener(\"close\", () => {\n      __privateWrapper(this, _disconnects)._++;\n      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {\n        setTimeout(() => {\n          __privateMethod(this, _WebsocketClient_instances, reconnect_fn).call(this);\n        }, this.options.reconnectTimeout);\n      }\n    });\n    __privateGet(this, _webSocket).addEventListener(\"message\", ({ data }) => {\n      let json;\n      try {\n        json = JSON.parse(data);\n      } catch (error) {\n        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n        return;\n      }\n      if (\"id\" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {\n        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);\n        clearTimeout(timeout);\n        resolve2(json);\n      } else if (\"params\" in json) {\n        const { params } = json;\n        __privateGet(this, _subscriptions).forEach((subscription) => {\n          if (subscription.subscriptionId === params.subscription) {\n            if (params.subscription === subscription.subscriptionId) {\n              subscription.onMessage(params.result);\n            }\n          }\n        });\n      }\n    });\n  }));\n  return __privateGet(this, _connectionPromise);\n};\nreconnect_fn = async function() {\n  __privateGet(this, _webSocket)?.close();\n  __privateSet(this, _connectionPromise, null);\n  return Promise.allSettled(\n    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))\n  );\n};\nclass RpcSubscription {\n  constructor(input) {\n    this.subscriptionId = null;\n    this.subscribed = false;\n    this.input = input;\n  }\n  onMessage(message) {\n    if (this.subscribed) {\n      this.input.onMessage(message);\n    }\n  }\n  async unsubscribe(client) {\n    const { subscriptionId } = this;\n    this.subscribed = false;\n    if (subscriptionId == null) return false;\n    this.subscriptionId = null;\n    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n  }\n  async subscribe(client) {\n    this.subscriptionId = null;\n    this.subscribed = true;\n    const newSubscriptionId = await client.makeRequest(\n      this.input.method,\n      this.input.params\n    );\n    if (this.subscribed) {\n      this.subscriptionId = newSubscriptionId;\n    }\n  }\n}\nexport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient\n};\n//# sourceMappingURL=rpc-websocket-client.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _requestId, _options, _websocketClient, _SuiHTTPTransport_instances, getWebsocketClient_fn;\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from \"../version.js\";\nimport { JsonRpcError, SuiHTTPStatusError } from \"./errors.js\";\nimport { WebsocketClient } from \"./rpc-websocket-client.js\";\nclass SuiHTTPTransport {\n  constructor(options) {\n    __privateAdd(this, _SuiHTTPTransport_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _options);\n    __privateAdd(this, _websocketClient);\n    __privateSet(this, _options, options);\n  }\n  fetch(input, init) {\n    const fetchFn = __privateGet(this, _options).fetch ?? fetch;\n    if (!fetchFn) {\n      throw new Error(\n        \"The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.\"\n      );\n    }\n    return fetchFn(input, init);\n  }\n  async request(input) {\n    __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n    const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": TARGETED_RPC_VERSION,\n        \"Client-Request-Method\": input.method,\n        ...__privateGet(this, _options).rpc?.headers\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: __privateGet(this, _requestId),\n        method: input.method,\n        params: input.params\n      })\n    });\n    if (!res.ok) {\n      throw new SuiHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText\n      );\n    }\n    const data = await res.json();\n    if (\"error\" in data && data.error != null) {\n      throw new JsonRpcError(data.error.message, data.error.code);\n    }\n    return data.result;\n  }\n  async subscribe(input) {\n    const unsubscribe = await __privateMethod(this, _SuiHTTPTransport_instances, getWebsocketClient_fn).call(this).subscribe(input);\n    return async () => !!await unsubscribe();\n  }\n}\n_requestId = new WeakMap();\n_options = new WeakMap();\n_websocketClient = new WeakMap();\n_SuiHTTPTransport_instances = new WeakSet();\ngetWebsocketClient_fn = function() {\n  if (!__privateGet(this, _websocketClient)) {\n    const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? WebSocket;\n    if (!WebSocketConstructor) {\n      throw new Error(\n        \"The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.\"\n      );\n    }\n    __privateSet(this, _websocketClient, new WebsocketClient(\n      __privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url,\n      {\n        WebSocketConstructor,\n        ...__privateGet(this, _options).websocket\n      }\n    ));\n  }\n  return __privateGet(this, _websocketClient);\n};\nexport {\n  SuiHTTPTransport\n};\n//# sourceMappingURL=http-transport.js.map\n","function getFullnodeUrl(network) {\n  switch (network) {\n    case \"mainnet\":\n      return \"https://fullnode.mainnet.sui.io:443\";\n    case \"testnet\":\n      return \"https://fullnode.testnet.sui.io:443\";\n    case \"devnet\":\n      return \"https://fullnode.devnet.sui.io:443\";\n    case \"localnet\":\n      return \"http://127.0.0.1:9000\";\n    default:\n      throw new Error(`Unknown network: ${network}`);\n  }\n}\nexport {\n  getFullnodeUrl\n};\n//# sourceMappingURL=network.js.map\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  const BASE_MAP = new Uint8Array(256)\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    let psz = 0\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n      // Invalid character\n      if (carry === 255) { return }\n      let i = 0\n      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    const vch = new Uint8Array(zeroes + (size - it4))\n    let j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  }\n}\nexport default base\n","import basex from 'base-x';\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nexport default basex(ALPHABET);\n","import bs58 from \"bs58\";\nconst toBase58 = (buffer) => bs58.encode(buffer);\nconst fromBase58 = (str) => bs58.decode(str);\nconst toB58 = toBase58;\nconst fromB58 = fromBase58;\nexport {\n  fromB58,\n  fromBase58,\n  toB58,\n  toBase58\n};\n//# sourceMappingURL=b58.js.map\n","function fromBase64(base64String) {\n  return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));\n}\nconst CHUNK_SIZE = 8192;\nfunction toBase64(bytes) {\n  if (bytes.length < CHUNK_SIZE) {\n    return btoa(String.fromCharCode(...bytes));\n  }\n  let output = \"\";\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    const chunk = bytes.slice(i, i + CHUNK_SIZE);\n    output += String.fromCharCode(...chunk);\n  }\n  return btoa(output);\n}\nconst toB64 = toBase64;\nconst fromB64 = fromBase64;\nexport {\n  fromB64,\n  fromBase64,\n  toB64,\n  toBase64\n};\n//# sourceMappingURL=b64.js.map\n","function fromHex(hexStr) {\n  const normalized = hexStr.startsWith(\"0x\") ? hexStr.slice(2) : hexStr;\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}`;\n  const intArr = padded.match(/[0-9a-fA-F]{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n  if (intArr.length !== padded.length / 2) {\n    throw new Error(`Invalid hex string ${hexStr}`);\n  }\n  return Uint8Array.from(intArr);\n}\nfunction toHex(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nconst toHEX = toHex;\nconst fromHEX = fromHex;\nexport {\n  fromHEX,\n  fromHex,\n  toHEX,\n  toHex\n};\n//# sourceMappingURL=hex.js.map\n","function ulebEncode(num) {\n  let arr = [];\n  let len = 0;\n  if (num === 0) {\n    return [0];\n  }\n  while (num > 0) {\n    arr[len] = num & 127;\n    if (num >>= 7) {\n      arr[len] |= 128;\n    }\n    len += 1;\n  }\n  return arr;\n}\nfunction ulebDecode(arr) {\n  let total = 0;\n  let shift = 0;\n  let len = 0;\n  while (true) {\n    let byte = arr[len];\n    len += 1;\n    total |= (byte & 127) << shift;\n    if ((byte & 128) === 0) {\n      break;\n    }\n    shift += 7;\n  }\n  return {\n    value: total,\n    length: len\n  };\n}\nexport {\n  ulebDecode,\n  ulebEncode\n};\n//# sourceMappingURL=uleb.js.map\n","import { ulebDecode } from \"./uleb.js\";\nclass BcsReader {\n  /**\n   * @param {Uint8Array} data Data to use as a buffer.\n   */\n  constructor(data) {\n    this.bytePosition = 0;\n    this.dataView = new DataView(data.buffer);\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Read U8 value from the buffer and shift cursor by 1.\n   * @returns\n   */\n  read8() {\n    let value = this.dataView.getUint8(this.bytePosition);\n    this.shift(1);\n    return value;\n  }\n  /**\n   * Read U16 value from the buffer and shift cursor by 2.\n   * @returns\n   */\n  read16() {\n    let value = this.dataView.getUint16(this.bytePosition, true);\n    this.shift(2);\n    return value;\n  }\n  /**\n   * Read U32 value from the buffer and shift cursor by 4.\n   * @returns\n   */\n  read32() {\n    let value = this.dataView.getUint32(this.bytePosition, true);\n    this.shift(4);\n    return value;\n  }\n  /**\n   * Read U64 value from the buffer and shift cursor by 8.\n   * @returns\n   */\n  read64() {\n    let value1 = this.read32();\n    let value2 = this.read32();\n    let result = value2.toString(16) + value1.toString(16).padStart(8, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 16.\n   */\n  read128() {\n    let value1 = BigInt(this.read64());\n    let value2 = BigInt(this.read64());\n    let result = value2.toString(16) + value1.toString(16).padStart(16, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 32.\n   * @returns\n   */\n  read256() {\n    let value1 = BigInt(this.read128());\n    let value2 = BigInt(this.read128());\n    let result = value2.toString(16) + value1.toString(16).padStart(32, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read `num` number of bytes from the buffer and shift cursor by `num`.\n   * @param num Number of bytes to read.\n   */\n  readBytes(num) {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let value = new Uint8Array(this.dataView.buffer, start, num);\n    this.shift(num);\n    return value;\n  }\n  /**\n   * Read ULEB value - an integer of varying size. Used for enum indexes and\n   * vector lengths.\n   * @returns {Number} The ULEB value.\n   */\n  readULEB() {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let buffer = new Uint8Array(this.dataView.buffer, start);\n    let { value, length } = ulebDecode(buffer);\n    this.shift(length);\n    return value;\n  }\n  /**\n   * Read a BCS vector: read a length and then apply function `cb` X times\n   * where X is the length of the vector, defined as ULEB in BCS bytes.\n   * @param cb Callback to process elements of vector.\n   * @returns {Array<Any>} Array of the resulting values, returned by callback.\n   */\n  readVec(cb) {\n    let length = this.readULEB();\n    let result = [];\n    for (let i = 0; i < length; i++) {\n      result.push(cb(this, i, length));\n    }\n    return result;\n  }\n}\nexport {\n  BcsReader\n};\n//# sourceMappingURL=reader.js.map\n","import { fromBase58, toBase58 } from \"./b58.js\";\nimport { fromBase64, toBase64 } from \"./b64.js\";\nimport { fromHex, toHex } from \"./hex.js\";\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return toBase58(data);\n    case \"base64\":\n      return toBase64(data);\n    case \"hex\":\n      return toHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return fromBase58(data);\n    case \"base64\":\n      return fromBase64(data);\n    case \"hex\":\n      return fromHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\nexport {\n  decodeStr,\n  encodeStr,\n  splitGenericParameters\n};\n//# sourceMappingURL=utils.js.map\n","import { ulebEncode } from \"./uleb.js\";\nimport { encodeStr } from \"./utils.js\";\nclass BcsWriter {\n  constructor({\n    initialSize = 1024,\n    maxSize = Infinity,\n    allocateSize = 1024\n  } = {}) {\n    this.bytePosition = 0;\n    this.size = initialSize;\n    this.maxSize = maxSize;\n    this.allocateSize = allocateSize;\n    this.dataView = new DataView(new ArrayBuffer(initialSize));\n  }\n  ensureSizeOrGrow(bytes) {\n    const requiredSize = this.bytePosition + bytes;\n    if (requiredSize > this.size) {\n      const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);\n      if (requiredSize > nextSize) {\n        throw new Error(\n          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`\n        );\n      }\n      this.size = nextSize;\n      const nextBuffer = new ArrayBuffer(this.size);\n      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n      this.dataView = new DataView(nextBuffer);\n    }\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write8(value) {\n    this.ensureSizeOrGrow(1);\n    this.dataView.setUint8(this.bytePosition, Number(value));\n    return this.shift(1);\n  }\n  /**\n   * Write a U16 value into a buffer and shift cursor position by 2.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write16(value) {\n    this.ensureSizeOrGrow(2);\n    this.dataView.setUint16(this.bytePosition, Number(value), true);\n    return this.shift(2);\n  }\n  /**\n   * Write a U32 value into a buffer and shift cursor position by 4.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write32(value) {\n    this.ensureSizeOrGrow(4);\n    this.dataView.setUint32(this.bytePosition, Number(value), true);\n    return this.shift(4);\n  }\n  /**\n   * Write a U64 value into a buffer and shift cursor position by 8.\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write64(value) {\n    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U128 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write128(value) {\n    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U256 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write256(value) {\n    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a ULEB value into a buffer and shift cursor position by number of bytes\n   * written.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeULEB(value) {\n    ulebEncode(value).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a vector into a buffer by first writing the vector length and then calling\n   * a callback on each passed value.\n   *\n   * @param {Array<Any>} vector Array of elements to write.\n   * @param {WriteVecCb} cb Callback to call on each element of the vector.\n   * @returns {this}\n   */\n  writeVec(vector, cb) {\n    this.writeULEB(vector.length);\n    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n    return this;\n  }\n  /**\n   * Adds support for iterations over the object.\n   * @returns {Uint8Array}\n   */\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.bytePosition; i++) {\n      yield this.dataView.getUint8(i);\n    }\n    return this.toBytes();\n  }\n  /**\n   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n   * @returns {Uint8Array} Resulting bcs.\n   */\n  toBytes() {\n    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n  }\n  /**\n   * Represent data as 'hex' or 'base64'\n   * @param encoding Encoding to use: 'base64' or 'hex'\n   */\n  toString(encoding) {\n    return encodeStr(this.toBytes(), encoding);\n  }\n}\nfunction toLittleEndian(bigint, size) {\n  let result = new Uint8Array(size);\n  let i = 0;\n  while (bigint > 0) {\n    result[i] = Number(bigint % BigInt(256));\n    bigint = bigint / BigInt(256);\n    i += 1;\n  }\n  return result;\n}\nexport {\n  BcsWriter\n};\n//# sourceMappingURL=writer.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _write, _serialize, _schema, _bytes;\nimport { fromBase58, toBase58 } from \"./b58.js\";\nimport { fromBase64, toBase64 } from \"./b64.js\";\nimport { fromHex, toHex } from \"./hex.js\";\nimport { BcsReader } from \"./reader.js\";\nimport { ulebEncode } from \"./uleb.js\";\nimport { BcsWriter } from \"./writer.js\";\nconst _BcsType = class _BcsType {\n  constructor(options) {\n    __privateAdd(this, _write);\n    __privateAdd(this, _serialize);\n    this.name = options.name;\n    this.read = options.read;\n    this.serializedSize = options.serializedSize ?? (() => null);\n    __privateSet(this, _write, options.write);\n    __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {\n      const writer = new BcsWriter({\n        initialSize: this.serializedSize(value) ?? void 0,\n        ...options2\n      });\n      __privateGet(this, _write).call(this, value, writer);\n      return writer.toBytes();\n    }));\n    this.validate = options.validate ?? (() => {\n    });\n  }\n  write(value, writer) {\n    this.validate(value);\n    __privateGet(this, _write).call(this, value, writer);\n  }\n  serialize(value, options) {\n    this.validate(value);\n    return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));\n  }\n  parse(bytes) {\n    const reader = new BcsReader(bytes);\n    return this.read(reader);\n  }\n  fromHex(hex) {\n    return this.parse(fromHex(hex));\n  }\n  fromBase58(b64) {\n    return this.parse(fromBase58(b64));\n  }\n  fromBase64(b64) {\n    return this.parse(fromBase64(b64));\n  }\n  transform({\n    name,\n    input,\n    output,\n    validate\n  }) {\n    return new _BcsType({\n      name: name ?? this.name,\n      read: (reader) => output ? output(this.read(reader)) : this.read(reader),\n      write: (value, writer) => __privateGet(this, _write).call(this, input ? input(value) : value, writer),\n      serializedSize: (value) => this.serializedSize(input ? input(value) : value),\n      serialize: (value, options) => __privateGet(this, _serialize).call(this, input ? input(value) : value, options),\n      validate: (value) => {\n        validate?.(value);\n        this.validate(input ? input(value) : value);\n      }\n    });\n  }\n};\n_write = new WeakMap();\n_serialize = new WeakMap();\nlet BcsType = _BcsType;\nconst SERIALIZED_BCS_BRAND = Symbol.for(\"@mysten/serialized-bcs\");\nfunction isSerializedBcs(obj) {\n  return !!obj && typeof obj === \"object\" && obj[SERIALIZED_BCS_BRAND] === true;\n}\nclass SerializedBcs {\n  constructor(type, schema) {\n    __privateAdd(this, _schema);\n    __privateAdd(this, _bytes);\n    __privateSet(this, _schema, type);\n    __privateSet(this, _bytes, schema);\n  }\n  // Used to brand SerializedBcs so that they can be identified, even between multiple copies\n  // of the @mysten/bcs package are installed\n  get [SERIALIZED_BCS_BRAND]() {\n    return true;\n  }\n  toBytes() {\n    return __privateGet(this, _bytes);\n  }\n  toHex() {\n    return toHex(__privateGet(this, _bytes));\n  }\n  toBase64() {\n    return toBase64(__privateGet(this, _bytes));\n  }\n  toBase58() {\n    return toBase58(__privateGet(this, _bytes));\n  }\n  parse() {\n    return __privateGet(this, _schema).parse(__privateGet(this, _bytes));\n  }\n}\n_schema = new WeakMap();\n_bytes = new WeakMap();\nfunction fixedSizeBcsType({\n  size,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    serializedSize: () => size\n  });\n}\nfunction uIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](value),\n    validate: (value) => {\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction bigUIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](BigInt(value)),\n    validate: (val) => {\n      const value = BigInt(val);\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction dynamicSizeBcsType({\n  serialize,\n  ...options\n}) {\n  const type = new BcsType({\n    ...options,\n    serialize,\n    write: (value, writer) => {\n      for (const byte of type.serialize(value).toBytes()) {\n        writer.write8(byte);\n      }\n    }\n  });\n  return type;\n}\nfunction stringLikeBcsType({\n  toBytes,\n  fromBytes,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    read: (reader) => {\n      const length = reader.readULEB();\n      const bytes = reader.readBytes(length);\n      return fromBytes(bytes);\n    },\n    write: (hex, writer) => {\n      const bytes = toBytes(hex);\n      writer.writeULEB(bytes.length);\n      for (let i = 0; i < bytes.length; i++) {\n        writer.write8(bytes[i]);\n      }\n    },\n    serialize: (value) => {\n      const bytes = toBytes(value);\n      const size = ulebEncode(bytes.length);\n      const result = new Uint8Array(size.length + bytes.length);\n      result.set(size, 0);\n      result.set(bytes, size.length);\n      return result;\n    },\n    validate: (value) => {\n      if (typeof value !== \"string\") {\n        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction lazyBcsType(cb) {\n  let lazyType = null;\n  function getType() {\n    if (!lazyType) {\n      lazyType = cb();\n    }\n    return lazyType;\n  }\n  return new BcsType({\n    name: \"lazy\",\n    read: (data) => getType().read(data),\n    serializedSize: (value) => getType().serializedSize(value),\n    write: (value, writer) => getType().write(value, writer),\n    serialize: (value, options) => getType().serialize(value, options).toBytes()\n  });\n}\nexport {\n  BcsType,\n  SerializedBcs,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  isSerializedBcs,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n};\n//# sourceMappingURL=bcs-type.js.map\n","import {\n  BcsType,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n} from \"./bcs-type.js\";\nimport { ulebEncode } from \"./uleb.js\";\nconst bcs = {\n  /**\n   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.\n   * @example\n   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]\n   */\n  u8(options) {\n    return uIntBcsType({\n      name: \"u8\",\n      readMethod: \"read8\",\n      writeMethod: \"write8\",\n      size: 1,\n      maxValue: 2 ** 8 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.\n   * @example\n   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]\n   */\n  u16(options) {\n    return uIntBcsType({\n      name: \"u16\",\n      readMethod: \"read16\",\n      writeMethod: \"write16\",\n      size: 2,\n      maxValue: 2 ** 16 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.\n   * @example\n   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]\n   */\n  u32(options) {\n    return uIntBcsType({\n      name: \"u32\",\n      readMethod: \"read32\",\n      writeMethod: \"write32\",\n      size: 4,\n      maxValue: 2 ** 32 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.\n   * @example\n   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]\n   */\n  u64(options) {\n    return bigUIntBcsType({\n      name: \"u64\",\n      readMethod: \"read64\",\n      writeMethod: \"write64\",\n      size: 8,\n      maxValue: 2n ** 64n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.\n   * @example\n   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u128(options) {\n    return bigUIntBcsType({\n      name: \"u128\",\n      readMethod: \"read128\",\n      writeMethod: \"write128\",\n      size: 16,\n      maxValue: 2n ** 128n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.\n   * @example\n   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u256(options) {\n    return bigUIntBcsType({\n      name: \"u256\",\n      readMethod: \"read256\",\n      writeMethod: \"write256\",\n      size: 32,\n      maxValue: 2n ** 256n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write boolean values.\n   * @example\n   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]\n   */\n  bool(options) {\n    return fixedSizeBcsType({\n      name: \"bool\",\n      size: 1,\n      read: (reader) => reader.read8() === 1,\n      write: (value, writer) => writer.write8(value ? 1 : 0),\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"boolean\") {\n          throw new TypeError(`Expected boolean, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers\n   * @example\n   *\n   */\n  uleb128(options) {\n    return dynamicSizeBcsType({\n      name: \"uleb128\",\n      read: (reader) => reader.readULEB(),\n      serialize: (value) => {\n        return Uint8Array.from(ulebEncode(value));\n      },\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a fixed length byte array\n   * @param size The number of bytes this types represents\n   * @example\n   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]\n   */\n  bytes(size, options) {\n    return fixedSizeBcsType({\n      name: `bytes[${size}]`,\n      size,\n      read: (reader) => reader.readBytes(size),\n      write: (value, writer) => {\n        const array = new Uint8Array(value);\n        for (let i = 0; i < size; i++) {\n          writer.write8(array[i] ?? 0);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length byte array\n   *\n   * @example\n   * bcs.byteVector().serialize([1, 2, 3]).toBytes() // Uint8Array [3, 1, 2, 3]\n   */\n  byteVector(options) {\n    return new BcsType({\n      name: `bytesVector`,\n      read: (reader) => {\n        const length = reader.readULEB();\n        return reader.readBytes(length);\n      },\n      write: (value, writer) => {\n        const array = new Uint8Array(value);\n        writer.writeULEB(array.length);\n        for (let i = 0; i < array.length; i++) {\n          writer.write8(array[i] ?? 0);\n        }\n      },\n      ...options,\n      serializedSize: (value) => {\n        const length = \"length\" in value ? value.length : null;\n        return length == null ? null : ulebEncode(length).length + length;\n      },\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded\n   * @example\n   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]\n   */\n  string(options) {\n    return stringLikeBcsType({\n      name: \"string\",\n      toBytes: (value) => new TextEncoder().encode(value),\n      fromBytes: (bytes) => new TextDecoder().decode(bytes),\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that represents a fixed length array of a given type\n   * @param size The number of elements in the array\n   * @param type The BcsType of each element in the array\n   * @example\n   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]\n   */\n  fixedArray(size, type, options) {\n    return new BcsType({\n      name: `${type.name}[${size}]`,\n      read: (reader) => {\n        const result = new Array(size);\n        for (let i = 0; i < size; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an optional value\n   * @param type The BcsType of the optional value\n   * @example\n   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]\n   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]\n   */\n  option(type) {\n    return bcs.enum(`Option<${type.name}>`, {\n      None: null,\n      Some: type\n    }).transform({\n      input: (value) => {\n        if (value == null) {\n          return { None: true };\n        }\n        return { Some: value };\n      },\n      output: (value) => {\n        if (value.$kind === \"Some\") {\n          return value.Some;\n        }\n        return null;\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length vector of a given type\n   * @param type The BcsType of each element in the vector\n   *\n   * @example\n   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]\n   */\n  vector(type, options) {\n    return new BcsType({\n      name: `vector<${type.name}>`,\n      read: (reader) => {\n        const length = reader.readULEB();\n        const result = new Array(length);\n        for (let i = 0; i < length; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        writer.writeULEB(value.length);\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a tuple of a given set of types\n   * @param types The BcsTypes for each element in the tuple\n   *\n   * @example\n   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])\n   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]\n   */\n  tuple(types, options) {\n    return new BcsType({\n      name: `(${types.map((t) => t.name).join(\", \")})`,\n      serializedSize: (values) => {\n        let total = 0;\n        for (let i = 0; i < types.length; i++) {\n          const size = types[i].serializedSize(values[i]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = [];\n        for (const type of types) {\n          result.push(type.read(reader));\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (let i = 0; i < types.length; i++) {\n          types[i].write(value[i], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!Array.isArray(value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== types.length) {\n          throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a struct of a given set of fields\n   * @param name The name of the struct\n   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized\n   *\n   * @example\n   * const struct = bcs.struct('MyStruct', {\n   *  a: bcs.u8(),\n   *  b: bcs.string(),\n   * })\n   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   */\n  struct(name, fields, options) {\n    const canonicalOrder = Object.entries(fields);\n    return new BcsType({\n      name,\n      serializedSize: (values) => {\n        let total = 0;\n        for (const [field, type] of canonicalOrder) {\n          const size = type.serializedSize(values[field]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = {};\n        for (const [field, type] of canonicalOrder) {\n          result[field] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const [field, type] of canonicalOrder) {\n          type.write(value[field], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an enum of a given set of options\n   * @param name The name of the enum\n   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.\n   * null can be used to represent a variant with no data.\n   *\n   * @example\n   * const enum = bcs.enum('MyEnum', {\n   *   A: bcs.u8(),\n   *   B: bcs.string(),\n   *   C: null,\n   * })\n   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]\n   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]\n   */\n  enum(name, values, options) {\n    const canonicalOrder = Object.entries(values);\n    return new BcsType({\n      name,\n      read: (reader) => {\n        const index = reader.readULEB();\n        const enumEntry = canonicalOrder[index];\n        if (!enumEntry) {\n          throw new TypeError(`Unknown value ${index} for enum ${name}`);\n        }\n        const [kind, type] = enumEntry;\n        return {\n          [kind]: type?.read(reader) ?? true,\n          $kind: kind\n        };\n      },\n      write: (value, writer) => {\n        const [name2, val] = Object.entries(value).filter(\n          ([name3]) => Object.hasOwn(values, name3)\n        )[0];\n        for (let i = 0; i < canonicalOrder.length; i++) {\n          const [optionName, optionType] = canonicalOrder[i];\n          if (optionName === name2) {\n            writer.writeULEB(i);\n            optionType?.write(val, writer);\n            return;\n          }\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n        const keys = Object.keys(value).filter(\n          (k) => value[k] !== void 0 && Object.hasOwn(values, k)\n        );\n        if (keys.length !== 1) {\n          throw new TypeError(\n            `Expected object with one key, but found ${keys.length} for type ${name}}`\n          );\n        }\n        const [variant] = keys;\n        if (!Object.hasOwn(values, variant)) {\n          throw new TypeError(`Invalid enum variant ${variant}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a map of a given key and value type\n   * @param keyType The BcsType of the key\n   * @param valueType The BcsType of the value\n   * @example\n   * const map = bcs.map(bcs.u8(), bcs.string())\n   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]\n   */\n  map(keyType, valueType) {\n    return bcs.vector(bcs.tuple([keyType, valueType])).transform({\n      name: `Map<${keyType.name}, ${valueType.name}>`,\n      input: (value) => {\n        return [...value.entries()];\n      },\n      output: (value) => {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, val] of value) {\n          result.set(key, val);\n        }\n        return result;\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.\n   * @param cb A callback that returns the BcsType\n   */\n  lazy(cb) {\n    return lazyBcsType(cb);\n  }\n};\nexport {\n  bcs\n};\n//# sourceMappingURL=bcs.js.map\n","import { fromBase58, splitGenericParameters } from \"@mysten/bcs\";\nconst TX_DIGEST_LENGTH = 32;\nfunction isValidTransactionDigest(value) {\n  try {\n    const buffer = fromBase58(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch (e) {\n    return false;\n  }\n}\nconst SUI_ADDRESS_LENGTH = 32;\nfunction isValidSuiAddress(value) {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\nfunction isValidSuiObjectId(value) {\n  return isValidSuiAddress(value);\n}\nfunction parseTypeTag(type) {\n  if (!type.includes(\"::\")) return type;\n  return parseStructTag(type);\n}\nfunction parseStructTag(type) {\n  const [address, module] = type.split(\"::\");\n  const rest = type.slice(address.length + module.length + 4);\n  const name = rest.includes(\"<\") ? rest.slice(0, rest.indexOf(\"<\")) : rest;\n  const typeParams = rest.includes(\"<\") ? splitGenericParameters(rest.slice(rest.indexOf(\"<\") + 1, rest.lastIndexOf(\">\"))).map(\n    (typeParam) => parseTypeTag(typeParam.trim())\n  ) : [];\n  return {\n    address: normalizeSuiAddress(address),\n    module,\n    name,\n    typeParams\n  };\n}\nfunction normalizeStructTag(type) {\n  const { address, module, name, typeParams } = typeof type === \"string\" ? parseStructTag(type) : type;\n  const formattedTypeParams = typeParams?.length > 0 ? `<${typeParams.map(\n    (typeParam) => typeof typeParam === \"string\" ? typeParam : normalizeStructTag(typeParam)\n  ).join(\",\")}>` : \"\";\n  return `${address}::${module}::${name}${formattedTypeParams}`;\n}\nfunction normalizeSuiAddress(value, forceAdd0x = false) {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith(\"0x\")) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, \"0\")}`;\n}\nfunction normalizeSuiObjectId(value, forceAdd0x = false) {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\nfunction isHex(value) {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\nfunction getHexByteLength(value) {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\nexport {\n  SUI_ADDRESS_LENGTH,\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeStructTag,\n  normalizeSuiAddress,\n  normalizeSuiObjectId,\n  parseStructTag\n};\n//# sourceMappingURL=sui-types.js.map\n","import { splitGenericParameters } from \"@mysten/bcs\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\nclass TypeTagSerializer {\n  static parseFromStr(str, normalizeAddress = false) {\n    if (str === \"address\") {\n      return { address: null };\n    } else if (str === \"bool\") {\n      return { bool: null };\n    } else if (str === \"u8\") {\n      return { u8: null };\n    } else if (str === \"u16\") {\n      return { u16: null };\n    } else if (str === \"u32\") {\n      return { u32: null };\n    } else if (str === \"u64\") {\n      return { u64: null };\n    } else if (str === \"u128\") {\n      return { u128: null };\n    } else if (str === \"u256\") {\n      return { u256: null };\n    } else if (str === \"signer\") {\n      return { signer: null };\n    }\n    const vectorMatch = str.match(VECTOR_REGEX);\n    if (vectorMatch) {\n      return {\n        vector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)\n      };\n    }\n    const structMatch = str.match(STRUCT_REGEX);\n    if (structMatch) {\n      const address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams: structMatch[5] === void 0 ? [] : TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)\n        }\n      };\n    }\n    throw new Error(`Encountered unexpected token when parsing type args for ${str}`);\n  }\n  static parseStructTypeArgs(str, normalizeAddress = false) {\n    return splitGenericParameters(str).map(\n      (tok) => TypeTagSerializer.parseFromStr(tok, normalizeAddress)\n    );\n  }\n  static tagToString(tag) {\n    if (\"bool\" in tag) {\n      return \"bool\";\n    }\n    if (\"u8\" in tag) {\n      return \"u8\";\n    }\n    if (\"u16\" in tag) {\n      return \"u16\";\n    }\n    if (\"u32\" in tag) {\n      return \"u32\";\n    }\n    if (\"u64\" in tag) {\n      return \"u64\";\n    }\n    if (\"u128\" in tag) {\n      return \"u128\";\n    }\n    if (\"u256\" in tag) {\n      return \"u256\";\n    }\n    if (\"address\" in tag) {\n      return \"address\";\n    }\n    if (\"signer\" in tag) {\n      return \"signer\";\n    }\n    if (\"vector\" in tag) {\n      return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n    }\n    if (\"struct\" in tag) {\n      const struct = tag.struct;\n      const typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(\", \");\n      return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : \"\"}`;\n    }\n    throw new Error(\"Invalid TypeTag\");\n  }\n}\nexport {\n  TypeTagSerializer\n};\n//# sourceMappingURL=type-tag-serializer.js.map\n","import { bcs, fromBase58, fromBase64, fromHex, toBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { isValidSuiAddress, normalizeSuiAddress, SUI_ADDRESS_LENGTH } from \"../utils/sui-types.js\";\nimport { TypeTagSerializer } from \"./type-tag-serializer.js\";\nfunction unsafe_u64(options) {\n  return bcs.u64({\n    name: \"unsafe_u64\",\n    ...options\n  }).transform({\n    input: (val) => val,\n    output: (val) => Number(val)\n  });\n}\nfunction optionEnum(type) {\n  return bcs.enum(\"Option\", {\n    None: null,\n    Some: type\n  });\n}\nconst Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({\n  validate: (val) => {\n    const address = typeof val === \"string\" ? val : toHex(val);\n    if (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n      throw new Error(`Invalid Sui address ${address}`);\n    }\n  },\n  input: (val) => typeof val === \"string\" ? fromHex(normalizeSuiAddress(val)) : val,\n  output: (val) => normalizeSuiAddress(toHex(val))\n});\nconst ObjectDigest = bcs.vector(bcs.u8()).transform({\n  name: \"ObjectDigest\",\n  input: (value) => fromBase58(value),\n  output: (value) => toBase58(new Uint8Array(value)),\n  validate: (value) => {\n    if (fromBase58(value).length !== 32) {\n      throw new Error(\"ObjectDigest must be 32 bytes\");\n    }\n  }\n});\nconst SuiObjectRef = bcs.struct(\"SuiObjectRef\", {\n  objectId: Address,\n  version: bcs.u64(),\n  digest: ObjectDigest\n});\nconst SharedObjectRef = bcs.struct(\"SharedObjectRef\", {\n  objectId: Address,\n  initialSharedVersion: bcs.u64(),\n  mutable: bcs.bool()\n});\nconst ObjectArg = bcs.enum(\"ObjectArg\", {\n  ImmOrOwnedObject: SuiObjectRef,\n  SharedObject: SharedObjectRef,\n  Receiving: SuiObjectRef\n});\nconst CallArg = bcs.enum(\"CallArg\", {\n  Pure: bcs.struct(\"Pure\", {\n    bytes: bcs.vector(bcs.u8()).transform({\n      input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n      output: (val) => toBase64(new Uint8Array(val))\n    })\n  }),\n  Object: ObjectArg\n});\nconst InnerTypeTag = bcs.enum(\"TypeTag\", {\n  bool: null,\n  u8: null,\n  u64: null,\n  u128: null,\n  address: null,\n  signer: null,\n  vector: bcs.lazy(() => InnerTypeTag),\n  struct: bcs.lazy(() => StructTag),\n  u16: null,\n  u32: null,\n  u256: null\n});\nconst TypeTag = InnerTypeTag.transform({\n  input: (typeTag) => typeof typeTag === \"string\" ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,\n  output: (typeTag) => TypeTagSerializer.tagToString(typeTag)\n});\nconst Argument = bcs.enum(\"Argument\", {\n  GasCoin: null,\n  Input: bcs.u16(),\n  Result: bcs.u16(),\n  NestedResult: bcs.tuple([bcs.u16(), bcs.u16()])\n});\nconst ProgrammableMoveCall = bcs.struct(\"ProgrammableMoveCall\", {\n  package: Address,\n  module: bcs.string(),\n  function: bcs.string(),\n  typeArguments: bcs.vector(TypeTag),\n  arguments: bcs.vector(Argument)\n});\nconst Command = bcs.enum(\"Command\", {\n  /**\n   * A Move Call - any public Move function can be called via\n   * this transaction. The results can be used that instant to pass\n   * into the next transaction.\n   */\n  MoveCall: ProgrammableMoveCall,\n  /**\n   * Transfer vector of objects to a receiver.\n   */\n  TransferObjects: bcs.struct(\"TransferObjects\", {\n    objects: bcs.vector(Argument),\n    address: Argument\n  }),\n  // /**\n  //  * Split `amount` from a `coin`.\n  //  */\n  SplitCoins: bcs.struct(\"SplitCoins\", {\n    coin: Argument,\n    amounts: bcs.vector(Argument)\n  }),\n  // /**\n  //  * Merge Vector of Coins (`sources`) into a `destination`.\n  //  */\n  MergeCoins: bcs.struct(\"MergeCoins\", {\n    destination: Argument,\n    sources: bcs.vector(Argument)\n  }),\n  // /**\n  //  * Publish a Move module.\n  //  */\n  Publish: bcs.struct(\"Publish\", {\n    modules: bcs.vector(\n      bcs.vector(bcs.u8()).transform({\n        input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n        output: (val) => toBase64(new Uint8Array(val))\n      })\n    ),\n    dependencies: bcs.vector(Address)\n  }),\n  // /**\n  //  * Build a vector of objects using the input arguments.\n  //  * It is impossible to export construct a `vector<T: key>` otherwise,\n  //  * so this call serves a utility function.\n  //  */\n  MakeMoveVec: bcs.struct(\"MakeMoveVec\", {\n    type: optionEnum(TypeTag).transform({\n      input: (val) => val === null ? {\n        None: true\n      } : {\n        Some: val\n      },\n      output: (val) => val.Some ?? null\n    }),\n    elements: bcs.vector(Argument)\n  }),\n  Upgrade: bcs.struct(\"Upgrade\", {\n    modules: bcs.vector(\n      bcs.vector(bcs.u8()).transform({\n        input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n        output: (val) => toBase64(new Uint8Array(val))\n      })\n    ),\n    dependencies: bcs.vector(Address),\n    package: Address,\n    ticket: Argument\n  })\n});\nconst ProgrammableTransaction = bcs.struct(\"ProgrammableTransaction\", {\n  inputs: bcs.vector(CallArg),\n  commands: bcs.vector(Command)\n});\nconst TransactionKind = bcs.enum(\"TransactionKind\", {\n  ProgrammableTransaction,\n  ChangeEpoch: null,\n  Genesis: null,\n  ConsensusCommitPrologue: null\n});\nconst TransactionExpiration = bcs.enum(\"TransactionExpiration\", {\n  None: null,\n  Epoch: unsafe_u64()\n});\nconst StructTag = bcs.struct(\"StructTag\", {\n  address: Address,\n  module: bcs.string(),\n  name: bcs.string(),\n  typeParams: bcs.vector(InnerTypeTag)\n});\nconst GasData = bcs.struct(\"GasData\", {\n  payment: bcs.vector(SuiObjectRef),\n  owner: Address,\n  price: bcs.u64(),\n  budget: bcs.u64()\n});\nconst TransactionDataV1 = bcs.struct(\"TransactionDataV1\", {\n  kind: TransactionKind,\n  sender: Address,\n  gasData: GasData,\n  expiration: TransactionExpiration\n});\nconst TransactionData = bcs.enum(\"TransactionData\", {\n  V1: TransactionDataV1\n});\nconst IntentScope = bcs.enum(\"IntentScope\", {\n  TransactionData: null,\n  TransactionEffects: null,\n  CheckpointSummary: null,\n  PersonalMessage: null\n});\nconst IntentVersion = bcs.enum(\"IntentVersion\", {\n  V0: null\n});\nconst AppId = bcs.enum(\"AppId\", {\n  Sui: null\n});\nconst Intent = bcs.struct(\"Intent\", {\n  scope: IntentScope,\n  version: IntentVersion,\n  appId: AppId\n});\nfunction IntentMessage(T) {\n  return bcs.struct(`IntentMessage<${T.name}>`, {\n    intent: Intent,\n    value: T\n  });\n}\nconst CompressedSignature = bcs.enum(\"CompressedSignature\", {\n  ED25519: bcs.fixedArray(64, bcs.u8()),\n  Secp256k1: bcs.fixedArray(64, bcs.u8()),\n  Secp256r1: bcs.fixedArray(64, bcs.u8()),\n  ZkLogin: bcs.vector(bcs.u8())\n});\nconst PublicKey = bcs.enum(\"PublicKey\", {\n  ED25519: bcs.fixedArray(32, bcs.u8()),\n  Secp256k1: bcs.fixedArray(33, bcs.u8()),\n  Secp256r1: bcs.fixedArray(33, bcs.u8()),\n  ZkLogin: bcs.vector(bcs.u8())\n});\nconst MultiSigPkMap = bcs.struct(\"MultiSigPkMap\", {\n  pubKey: PublicKey,\n  weight: bcs.u8()\n});\nconst MultiSigPublicKey = bcs.struct(\"MultiSigPublicKey\", {\n  pk_map: bcs.vector(MultiSigPkMap),\n  threshold: bcs.u16()\n});\nconst MultiSig = bcs.struct(\"MultiSig\", {\n  sigs: bcs.vector(CompressedSignature),\n  bitmap: bcs.u16(),\n  multisig_pk: MultiSigPublicKey\n});\nconst base64String = bcs.vector(bcs.u8()).transform({\n  input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n  output: (val) => toBase64(new Uint8Array(val))\n});\nconst SenderSignedTransaction = bcs.struct(\"SenderSignedTransaction\", {\n  intentMessage: IntentMessage(TransactionData),\n  txSignatures: bcs.vector(base64String)\n});\nconst SenderSignedData = bcs.vector(SenderSignedTransaction, {\n  name: \"SenderSignedData\"\n});\nconst PasskeyAuthenticator = bcs.struct(\"PasskeyAuthenticator\", {\n  authenticatorData: bcs.vector(bcs.u8()),\n  clientDataJson: bcs.string(),\n  userSignature: bcs.vector(bcs.u8())\n});\nexport {\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  Command,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  PasskeyAuthenticator,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag,\n  base64String\n};\n//# sourceMappingURL=bcs.js.map\n","import { bcs } from \"@mysten/bcs\";\nimport { Address, ObjectDigest, SuiObjectRef } from \"./bcs.js\";\nconst PackageUpgradeError = bcs.enum(\"PackageUpgradeError\", {\n  UnableToFetchPackage: bcs.struct(\"UnableToFetchPackage\", { packageId: Address }),\n  NotAPackage: bcs.struct(\"NotAPackage\", { objectId: Address }),\n  IncompatibleUpgrade: null,\n  DigestDoesNotMatch: bcs.struct(\"DigestDoesNotMatch\", { digest: bcs.vector(bcs.u8()) }),\n  UnknownUpgradePolicy: bcs.struct(\"UnknownUpgradePolicy\", { policy: bcs.u8() }),\n  PackageIDDoesNotMatch: bcs.struct(\"PackageIDDoesNotMatch\", {\n    packageId: Address,\n    ticketId: Address\n  })\n});\nconst ModuleId = bcs.struct(\"ModuleId\", {\n  address: Address,\n  name: bcs.string()\n});\nconst MoveLocation = bcs.struct(\"MoveLocation\", {\n  module: ModuleId,\n  function: bcs.u16(),\n  instruction: bcs.u16(),\n  functionName: bcs.option(bcs.string())\n});\nconst CommandArgumentError = bcs.enum(\"CommandArgumentError\", {\n  TypeMismatch: null,\n  InvalidBCSBytes: null,\n  InvalidUsageOfPureArg: null,\n  InvalidArgumentToPrivateEntryFunction: null,\n  IndexOutOfBounds: bcs.struct(\"IndexOutOfBounds\", { idx: bcs.u16() }),\n  SecondaryIndexOutOfBounds: bcs.struct(\"SecondaryIndexOutOfBounds\", {\n    resultIdx: bcs.u16(),\n    secondaryIdx: bcs.u16()\n  }),\n  InvalidResultArity: bcs.struct(\"InvalidResultArity\", { resultIdx: bcs.u16() }),\n  InvalidGasCoinUsage: null,\n  InvalidValueUsage: null,\n  InvalidObjectByValue: null,\n  InvalidObjectByMutRef: null,\n  SharedObjectOperationNotAllowed: null\n});\nconst TypeArgumentError = bcs.enum(\"TypeArgumentError\", {\n  TypeNotFound: null,\n  ConstraintNotSatisfied: null\n});\nconst ExecutionFailureStatus = bcs.enum(\"ExecutionFailureStatus\", {\n  InsufficientGas: null,\n  InvalidGasObject: null,\n  InvariantViolation: null,\n  FeatureNotYetSupported: null,\n  MoveObjectTooBig: bcs.struct(\"MoveObjectTooBig\", {\n    objectSize: bcs.u64(),\n    maxObjectSize: bcs.u64()\n  }),\n  MovePackageTooBig: bcs.struct(\"MovePackageTooBig\", {\n    objectSize: bcs.u64(),\n    maxObjectSize: bcs.u64()\n  }),\n  CircularObjectOwnership: bcs.struct(\"CircularObjectOwnership\", { object: Address }),\n  InsufficientCoinBalance: null,\n  CoinBalanceOverflow: null,\n  PublishErrorNonZeroAddress: null,\n  SuiMoveVerificationError: null,\n  MovePrimitiveRuntimeError: bcs.option(MoveLocation),\n  MoveAbort: bcs.tuple([MoveLocation, bcs.u64()]),\n  VMVerificationOrDeserializationError: null,\n  VMInvariantViolation: null,\n  FunctionNotFound: null,\n  ArityMismatch: null,\n  TypeArityMismatch: null,\n  NonEntryFunctionInvoked: null,\n  CommandArgumentError: bcs.struct(\"CommandArgumentError\", {\n    argIdx: bcs.u16(),\n    kind: CommandArgumentError\n  }),\n  TypeArgumentError: bcs.struct(\"TypeArgumentError\", {\n    argumentIdx: bcs.u16(),\n    kind: TypeArgumentError\n  }),\n  UnusedValueWithoutDrop: bcs.struct(\"UnusedValueWithoutDrop\", {\n    resultIdx: bcs.u16(),\n    secondaryIdx: bcs.u16()\n  }),\n  InvalidPublicFunctionReturnType: bcs.struct(\"InvalidPublicFunctionReturnType\", {\n    idx: bcs.u16()\n  }),\n  InvalidTransferObject: null,\n  EffectsTooLarge: bcs.struct(\"EffectsTooLarge\", { currentSize: bcs.u64(), maxSize: bcs.u64() }),\n  PublishUpgradeMissingDependency: null,\n  PublishUpgradeDependencyDowngrade: null,\n  PackageUpgradeError: bcs.struct(\"PackageUpgradeError\", { upgradeError: PackageUpgradeError }),\n  WrittenObjectsTooLarge: bcs.struct(\"WrittenObjectsTooLarge\", {\n    currentSize: bcs.u64(),\n    maxSize: bcs.u64()\n  }),\n  CertificateDenied: null,\n  SuiMoveVerificationTimedout: null,\n  SharedObjectOperationNotAllowed: null,\n  InputObjectDeleted: null,\n  ExecutionCancelledDueToSharedObjectCongestion: bcs.struct(\n    \"ExecutionCancelledDueToSharedObjectCongestion\",\n    {\n      congestedObjects: bcs.vector(Address)\n    }\n  ),\n  AddressDeniedForCoin: bcs.struct(\"AddressDeniedForCoin\", {\n    address: Address,\n    coinType: bcs.string()\n  }),\n  CoinTypeGlobalPause: bcs.struct(\"CoinTypeGlobalPause\", { coinType: bcs.string() }),\n  ExecutionCancelledDueToRandomnessUnavailable: null\n});\nconst ExecutionStatus = bcs.enum(\"ExecutionStatus\", {\n  Success: null,\n  Failed: bcs.struct(\"ExecutionFailed\", {\n    error: ExecutionFailureStatus,\n    command: bcs.option(bcs.u64())\n  })\n});\nconst GasCostSummary = bcs.struct(\"GasCostSummary\", {\n  computationCost: bcs.u64(),\n  storageCost: bcs.u64(),\n  storageRebate: bcs.u64(),\n  nonRefundableStorageFee: bcs.u64()\n});\nconst Owner = bcs.enum(\"Owner\", {\n  AddressOwner: Address,\n  ObjectOwner: Address,\n  Shared: bcs.struct(\"Shared\", {\n    initialSharedVersion: bcs.u64()\n  }),\n  Immutable: null\n});\nconst TransactionEffectsV1 = bcs.struct(\"TransactionEffectsV1\", {\n  status: ExecutionStatus,\n  executedEpoch: bcs.u64(),\n  gasUsed: GasCostSummary,\n  modifiedAtVersions: bcs.vector(bcs.tuple([Address, bcs.u64()])),\n  sharedObjects: bcs.vector(SuiObjectRef),\n  transactionDigest: ObjectDigest,\n  created: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  mutated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  unwrapped: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  deleted: bcs.vector(SuiObjectRef),\n  unwrappedThenDeleted: bcs.vector(SuiObjectRef),\n  wrapped: bcs.vector(SuiObjectRef),\n  gasObject: bcs.tuple([SuiObjectRef, Owner]),\n  eventsDigest: bcs.option(ObjectDigest),\n  dependencies: bcs.vector(ObjectDigest)\n});\nconst VersionDigest = bcs.tuple([bcs.u64(), ObjectDigest]);\nconst ObjectIn = bcs.enum(\"ObjectIn\", {\n  NotExist: null,\n  Exist: bcs.tuple([VersionDigest, Owner])\n});\nconst ObjectOut = bcs.enum(\"ObjectOut\", {\n  NotExist: null,\n  ObjectWrite: bcs.tuple([ObjectDigest, Owner]),\n  PackageWrite: VersionDigest\n});\nconst IDOperation = bcs.enum(\"IDOperation\", {\n  None: null,\n  Created: null,\n  Deleted: null\n});\nconst EffectsObjectChange = bcs.struct(\"EffectsObjectChange\", {\n  inputState: ObjectIn,\n  outputState: ObjectOut,\n  idOperation: IDOperation\n});\nconst UnchangedSharedKind = bcs.enum(\"UnchangedSharedKind\", {\n  ReadOnlyRoot: VersionDigest,\n  MutateDeleted: bcs.u64(),\n  ReadDeleted: bcs.u64(),\n  Cancelled: bcs.u64(),\n  PerEpochConfig: null\n});\nconst TransactionEffectsV2 = bcs.struct(\"TransactionEffectsV2\", {\n  status: ExecutionStatus,\n  executedEpoch: bcs.u64(),\n  gasUsed: GasCostSummary,\n  transactionDigest: ObjectDigest,\n  gasObjectIndex: bcs.option(bcs.u32()),\n  eventsDigest: bcs.option(ObjectDigest),\n  dependencies: bcs.vector(ObjectDigest),\n  lamportVersion: bcs.u64(),\n  changedObjects: bcs.vector(bcs.tuple([Address, EffectsObjectChange])),\n  unchangedSharedObjects: bcs.vector(bcs.tuple([Address, UnchangedSharedKind])),\n  auxDataDigest: bcs.option(ObjectDigest)\n});\nconst TransactionEffects = bcs.enum(\"TransactionEffects\", {\n  V1: TransactionEffectsV1,\n  V2: TransactionEffectsV2\n});\nexport {\n  TransactionEffects\n};\n//# sourceMappingURL=effects.js.map\n","import { bcs } from \"@mysten/bcs\";\nimport { Address } from \"./bcs.js\";\nfunction pureBcsSchemaFromTypeName(name) {\n  switch (name) {\n    case \"u8\":\n      return bcs.u8();\n    case \"u16\":\n      return bcs.u16();\n    case \"u32\":\n      return bcs.u32();\n    case \"u64\":\n      return bcs.u64();\n    case \"u128\":\n      return bcs.u128();\n    case \"u256\":\n      return bcs.u256();\n    case \"bool\":\n      return bcs.bool();\n    case \"string\":\n      return bcs.string();\n    case \"id\":\n    case \"address\":\n      return Address;\n  }\n  const generic = name.match(/^(vector|option)<(.+)>$/);\n  if (generic) {\n    const [kind, inner] = generic.slice(1);\n    if (kind === \"vector\") {\n      return bcs.vector(pureBcsSchemaFromTypeName(inner));\n    } else {\n      return bcs.option(pureBcsSchemaFromTypeName(inner));\n    }\n  }\n  throw new Error(`Invalid Pure type name: ${name}`);\n}\nexport {\n  pureBcsSchemaFromTypeName\n};\n//# sourceMappingURL=pure.js.map\n","import { bcs } from \"@mysten/bcs\";\nimport {\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  Command,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  PasskeyAuthenticator,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag\n} from \"./bcs.js\";\nimport { TransactionEffects } from \"./effects.js\";\nimport { TypeTagSerializer } from \"./type-tag-serializer.js\";\nimport { BcsType } from \"@mysten/bcs\";\nconst suiBcs = {\n  ...bcs,\n  U8: bcs.u8(),\n  U16: bcs.u16(),\n  U32: bcs.u32(),\n  U64: bcs.u64(),\n  U128: bcs.u128(),\n  U256: bcs.u256(),\n  ULEB128: bcs.uleb128(),\n  Bool: bcs.bool(),\n  String: bcs.string(),\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  Command,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag,\n  TransactionEffects,\n  PasskeyAuthenticator\n};\nimport {\n  pureBcsSchemaFromTypeName\n} from \"./pure.js\";\nexport {\n  BcsType,\n  TypeTagSerializer,\n  suiBcs as bcs,\n  pureBcsSchemaFromTypeName\n};\n//# sourceMappingURL=index.js.map\n","const SUI_NS_NAME_REGEX = /^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;\nconst SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\\.)+sui$/i;\nconst MAX_SUI_NS_NAME_LENGTH = 235;\nfunction isValidSuiNSName(name) {\n  if (name.length > MAX_SUI_NS_NAME_LENGTH) {\n    return false;\n  }\n  if (name.includes(\"@\")) {\n    return SUI_NS_NAME_REGEX.test(name);\n  }\n  return SUI_NS_DOMAIN_REGEX.test(name);\n}\nfunction normalizeSuiNSName(name, format = \"at\") {\n  const lowerCase = name.toLowerCase();\n  let parts;\n  if (lowerCase.includes(\"@\")) {\n    if (!SUI_NS_NAME_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    const [labels, domain] = lowerCase.split(\"@\");\n    parts = [...labels ? labels.split(\".\") : [], domain];\n  } else {\n    if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    parts = lowerCase.split(\".\").slice(0, -1);\n  }\n  if (format === \"dot\") {\n    return `${parts.join(\".\")}.sui`;\n  }\n  return `${parts.slice(0, -1).join(\".\")}@${parts[parts.length - 1]}`;\n}\nexport {\n  isValidSuiNSName,\n  normalizeSuiNSName\n};\n//# sourceMappingURL=suins.js.map\n","import { normalizeSuiObjectId } from \"./sui-types.js\";\nconst SUI_DECIMALS = 9;\nconst MIST_PER_SUI = BigInt(1e9);\nconst MOVE_STDLIB_ADDRESS = \"0x1\";\nconst SUI_FRAMEWORK_ADDRESS = \"0x2\";\nconst SUI_SYSTEM_ADDRESS = \"0x3\";\nconst SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId(\"0x6\");\nconst SUI_SYSTEM_MODULE_NAME = \"sui_system\";\nconst SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nconst SUI_SYSTEM_STATE_OBJECT_ID = normalizeSuiObjectId(\"0x5\");\nexport {\n  MIST_PER_SUI,\n  MOVE_STDLIB_ADDRESS,\n  SUI_CLOCK_OBJECT_ID,\n  SUI_DECIMALS,\n  SUI_FRAMEWORK_ADDRESS,\n  SUI_SYSTEM_ADDRESS,\n  SUI_SYSTEM_MODULE_NAME,\n  SUI_SYSTEM_STATE_OBJECT_ID,\n  SUI_TYPE_ARG\n};\n//# sourceMappingURL=constants.js.map\n","/**\n * Internal assertion helpers.\n * @module\n */\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n//# sourceMappingURL=_assert.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal helpers for blake hash.\n * @module\n */\nimport { aexists, anumber, aoutput } from './_assert.js';\nimport { byteSwap32, byteSwapIfBE, Hash, isLE, toBytes, u32 } from './utils.js';\n/**\n * Internal blake variable.\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n */\n// prettier-ignore\nexport const SIGMA = /* @__PURE__ */ new Uint8Array([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    // Blake1, unused in others\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n]);\n/** Class, from which others are subclassed. */\nexport class BLAKE extends Hash {\n    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.length = 0;\n        this.pos = 0;\n        this.finished = false;\n        this.destroyed = false;\n        anumber(blockLen);\n        anumber(outputLen);\n        anumber(keyLen);\n        if (outputLen < 0 || outputLen > keyLen)\n            throw new Error('outputLen bigger than keyLen');\n        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))\n            throw new Error('key length must be undefined or 1..' + keyLen);\n        if (opts.salt !== undefined && opts.salt.length !== saltLen)\n            throw new Error('salt must be undefined or ' + saltLen);\n        if (opts.personalization !== undefined && opts.personalization.length !== persLen)\n            throw new Error('personalization must be undefined or ' + persLen);\n        this.buffer = new Uint8Array(blockLen);\n        this.buffer32 = u32(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        // Main difference with other hashes: there is flag for last block,\n        // so we cannot process current block before we know that there\n        // is the next one. This significantly complicates logic and reduces ability\n        // to do zero-copy processing\n        const { blockLen, buffer, buffer32 } = this;\n        data = toBytes(data);\n        const len = data.length;\n        const offset = data.byteOffset;\n        const buf = data.buffer;\n        for (let pos = 0; pos < len;) {\n            // If buffer is full and we still have input (don't process last block, same as blake2s)\n            if (this.pos === blockLen) {\n                if (!isLE)\n                    byteSwap32(buffer32);\n                this.compress(buffer32, 0, false);\n                if (!isLE)\n                    byteSwap32(buffer32);\n                this.pos = 0;\n            }\n            const take = Math.min(blockLen - this.pos, len - pos);\n            const dataOffset = offset + pos;\n            // full block && aligned to 4 bytes && not last in input\n            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n                if (!isLE)\n                    byteSwap32(data32);\n                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n                    this.length += blockLen;\n                    this.compress(data32, pos32, false);\n                }\n                if (!isLE)\n                    byteSwap32(data32);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            this.length += take;\n            pos += take;\n        }\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        const { pos, buffer32 } = this;\n        this.finished = true;\n        // Padding\n        this.buffer.subarray(pos).fill(0);\n        if (!isLE)\n            byteSwap32(buffer32);\n        this.compress(buffer32, 0, true);\n        if (!isLE)\n            byteSwap32(buffer32);\n        const out32 = u32(out);\n        this.get().forEach((v, i) => (out32[i] = byteSwapIfBE(v)));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        const { buffer, length, finished, destroyed, outputLen, pos } = this;\n        to || (to = new this.constructor({ dkLen: outputLen }));\n        to.set(...this.get());\n        to.length = length;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.outputLen = outputLen;\n        to.buffer.set(buffer);\n        to.pos = pos;\n        return to;\n    }\n}\n//# sourceMappingURL=_blake.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @module\n */\nimport { BLAKE, SIGMA } from './_blake.js';\nimport u64 from './_u64.js';\nimport { byteSwapIfBE, toBytes, u32, wrapConstructorWithOpts } from './utils.js';\n// Same as SHA-512 but LE\n// prettier-ignore\nconst B2B_IV = /* @__PURE__ */ new Uint32Array([\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n// Mixing function G splitted in two halfs\nfunction G1b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 32)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 24)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction G2b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 16)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 63)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nexport class BLAKE2b extends BLAKE {\n    constructor(opts = {}) {\n        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);\n        // Same as SHA-512, but LE\n        this.v0l = B2B_IV[0] | 0;\n        this.v0h = B2B_IV[1] | 0;\n        this.v1l = B2B_IV[2] | 0;\n        this.v1h = B2B_IV[3] | 0;\n        this.v2l = B2B_IV[4] | 0;\n        this.v2h = B2B_IV[5] | 0;\n        this.v3l = B2B_IV[6] | 0;\n        this.v3h = B2B_IV[7] | 0;\n        this.v4l = B2B_IV[8] | 0;\n        this.v4h = B2B_IV[9] | 0;\n        this.v5l = B2B_IV[10] | 0;\n        this.v5h = B2B_IV[11] | 0;\n        this.v6l = B2B_IV[12] | 0;\n        this.v6h = B2B_IV[13] | 0;\n        this.v7l = B2B_IV[14] | 0;\n        this.v7h = B2B_IV[15] | 0;\n        const keyLength = opts.key ? opts.key.length : 0;\n        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (opts.salt) {\n            const salt = u32(toBytes(opts.salt));\n            this.v4l ^= byteSwapIfBE(salt[0]);\n            this.v4h ^= byteSwapIfBE(salt[1]);\n            this.v5l ^= byteSwapIfBE(salt[2]);\n            this.v5h ^= byteSwapIfBE(salt[3]);\n        }\n        if (opts.personalization) {\n            const pers = u32(toBytes(opts.personalization));\n            this.v6l ^= byteSwapIfBE(pers[0]);\n            this.v6h ^= byteSwapIfBE(pers[1]);\n            this.v7l ^= byteSwapIfBE(pers[2]);\n            this.v7h ^= byteSwapIfBE(pers[3]);\n        }\n        if (opts.key) {\n            // Pad to blockLen and update\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(toBytes(opts.key));\n            this.update(tmp);\n        }\n    }\n    // prettier-ignore\n    get() {\n        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n    }\n    // prettier-ignore\n    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {\n        this.v0l = v0l | 0;\n        this.v0h = v0h | 0;\n        this.v1l = v1l | 0;\n        this.v1h = v1h | 0;\n        this.v2l = v2l | 0;\n        this.v2h = v2h | 0;\n        this.v3l = v3l | 0;\n        this.v3h = v3h | 0;\n        this.v4l = v4l | 0;\n        this.v4h = v4h | 0;\n        this.v5l = v5l | 0;\n        this.v5h = v5h | 0;\n        this.v6l = v6l | 0;\n        this.v6h = v6h | 0;\n        this.v7l = v7l | 0;\n        this.v7h = v7h | 0;\n    }\n    compress(msg, offset, isLast) {\n        this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n        BBUF.set(B2B_IV, 16); // Second half from IV.\n        let { h, l } = u64.fromBig(BigInt(this.length));\n        BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n        BBUF[25] = B2B_IV[9] ^ h; // High word.\n        // Invert all bits for last block\n        if (isLast) {\n            BBUF[28] = ~BBUF[28];\n            BBUF[29] = ~BBUF[29];\n        }\n        let j = 0;\n        const s = SIGMA;\n        for (let i = 0; i < 12; i++) {\n            G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n            G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n        }\n        this.v0l ^= BBUF[0] ^ BBUF[16];\n        this.v0h ^= BBUF[1] ^ BBUF[17];\n        this.v1l ^= BBUF[2] ^ BBUF[18];\n        this.v1h ^= BBUF[3] ^ BBUF[19];\n        this.v2l ^= BBUF[4] ^ BBUF[20];\n        this.v2h ^= BBUF[5] ^ BBUF[21];\n        this.v3l ^= BBUF[6] ^ BBUF[22];\n        this.v3h ^= BBUF[7] ^ BBUF[23];\n        this.v4l ^= BBUF[8] ^ BBUF[24];\n        this.v4h ^= BBUF[9] ^ BBUF[25];\n        this.v5l ^= BBUF[10] ^ BBUF[26];\n        this.v5h ^= BBUF[11] ^ BBUF[27];\n        this.v6l ^= BBUF[12] ^ BBUF[28];\n        this.v6h ^= BBUF[13] ^ BBUF[29];\n        this.v7l ^= BBUF[14] ^ BBUF[30];\n        this.v7h ^= BBUF[15] ^ BBUF[31];\n        BBUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer32.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b = /* @__PURE__ */ wrapConstructorWithOpts((opts) => new BLAKE2b(opts));\n//# sourceMappingURL=blake2b.js.map","import { bcs } from \"../bcs/index.js\";\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from \"../utils/index.js\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nconst OBJECT_MODULE_NAME = \"object\";\nconst ID_STRUCT_NAME = \"ID\";\nconst STD_ASCII_MODULE_NAME = \"ascii\";\nconst STD_ASCII_STRUCT_NAME = \"String\";\nconst STD_UTF8_MODULE_NAME = \"string\";\nconst STD_UTF8_STRUCT_NAME = \"String\";\nconst STD_OPTION_MODULE_NAME = \"option\";\nconst STD_OPTION_STRUCT_NAME = \"Option\";\nfunction isTxContext(param) {\n  const struct = typeof param.body === \"object\" && \"datatype\" in param.body ? param.body.datatype : null;\n  return !!struct && normalizeSuiAddress(struct.package) === normalizeSuiAddress(\"0x2\") && struct.module === \"tx_context\" && struct.type === \"TxContext\";\n}\nfunction getPureBcsSchema(typeSignature) {\n  if (typeof typeSignature === \"string\") {\n    switch (typeSignature) {\n      case \"address\":\n        return bcs.Address;\n      case \"bool\":\n        return bcs.Bool;\n      case \"u8\":\n        return bcs.U8;\n      case \"u16\":\n        return bcs.U16;\n      case \"u32\":\n        return bcs.U32;\n      case \"u64\":\n        return bcs.U64;\n      case \"u128\":\n        return bcs.U128;\n      case \"u256\":\n        return bcs.U256;\n      default:\n        throw new Error(`Unknown type signature ${typeSignature}`);\n    }\n  }\n  if (\"vector\" in typeSignature) {\n    if (typeSignature.vector === \"u8\") {\n      return bcs.vector(bcs.U8).transform({\n        input: (val) => typeof val === \"string\" ? new TextEncoder().encode(val) : val,\n        output: (val) => val\n      });\n    }\n    const type = getPureBcsSchema(typeSignature.vector);\n    return type ? bcs.vector(type) : null;\n  }\n  if (\"datatype\" in typeSignature) {\n    const pkg = normalizeSuiAddress(typeSignature.datatype.package);\n    if (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {\n      if (typeSignature.datatype.module === STD_ASCII_MODULE_NAME && typeSignature.datatype.type === STD_ASCII_STRUCT_NAME) {\n        return bcs.String;\n      }\n      if (typeSignature.datatype.module === STD_UTF8_MODULE_NAME && typeSignature.datatype.type === STD_UTF8_STRUCT_NAME) {\n        return bcs.String;\n      }\n      if (typeSignature.datatype.module === STD_OPTION_MODULE_NAME && typeSignature.datatype.type === STD_OPTION_STRUCT_NAME) {\n        const type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);\n        return type ? bcs.vector(type) : null;\n      }\n    }\n    if (pkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) && typeSignature.datatype.module === OBJECT_MODULE_NAME && typeSignature.datatype.type === ID_STRUCT_NAME) {\n      return bcs.Address;\n    }\n  }\n  return null;\n}\nfunction normalizedTypeToMoveTypeSignature(type) {\n  if (typeof type === \"object\" && \"Reference\" in type) {\n    return {\n      ref: \"&\",\n      body: normalizedTypeToMoveTypeSignatureBody(type.Reference)\n    };\n  }\n  if (typeof type === \"object\" && \"MutableReference\" in type) {\n    return {\n      ref: \"&mut\",\n      body: normalizedTypeToMoveTypeSignatureBody(type.MutableReference)\n    };\n  }\n  return {\n    ref: null,\n    body: normalizedTypeToMoveTypeSignatureBody(type)\n  };\n}\nfunction normalizedTypeToMoveTypeSignatureBody(type) {\n  if (typeof type === \"string\") {\n    switch (type) {\n      case \"Address\":\n        return \"address\";\n      case \"Bool\":\n        return \"bool\";\n      case \"U8\":\n        return \"u8\";\n      case \"U16\":\n        return \"u16\";\n      case \"U32\":\n        return \"u32\";\n      case \"U64\":\n        return \"u64\";\n      case \"U128\":\n        return \"u128\";\n      case \"U256\":\n        return \"u256\";\n      default:\n        throw new Error(`Unexpected type ${type}`);\n    }\n  }\n  if (\"Vector\" in type) {\n    return { vector: normalizedTypeToMoveTypeSignatureBody(type.Vector) };\n  }\n  if (\"Struct\" in type) {\n    return {\n      datatype: {\n        package: type.Struct.address,\n        module: type.Struct.module,\n        type: type.Struct.name,\n        typeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody)\n      }\n    };\n  }\n  if (\"TypeParameter\" in type) {\n    return { typeParameter: type.TypeParameter };\n  }\n  throw new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\nfunction pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature) {\n  if (typeof typeSignature === \"string\") {\n    switch (typeSignature) {\n      case \"address\":\n        return bcs.Address;\n      case \"bool\":\n        return bcs.Bool;\n      case \"u8\":\n        return bcs.U8;\n      case \"u16\":\n        return bcs.U16;\n      case \"u32\":\n        return bcs.U32;\n      case \"u64\":\n        return bcs.U64;\n      case \"u128\":\n        return bcs.U128;\n      case \"u256\":\n        return bcs.U256;\n      default:\n        throw new Error(`Unknown type signature ${typeSignature}`);\n    }\n  }\n  if (\"vector\" in typeSignature) {\n    return bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));\n  }\n  throw new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);\n}\nexport {\n  getPureBcsSchema,\n  isTxContext,\n  normalizedTypeToMoveTypeSignature,\n  pureBcsSchemaFromOpenMoveTypeSignatureBody\n};\n//# sourceMappingURL=serializer.js.map\n","import { toBase64 } from \"@mysten/bcs\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nfunction Pure(data) {\n  return {\n    $kind: \"Pure\",\n    Pure: {\n      bytes: data instanceof Uint8Array ? toBase64(data) : data.toBase64()\n    }\n  };\n}\nconst Inputs = {\n  Pure,\n  ObjectRef({ objectId, digest, version }) {\n    return {\n      $kind: \"Object\",\n      Object: {\n        $kind: \"ImmOrOwnedObject\",\n        ImmOrOwnedObject: {\n          digest,\n          version,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  },\n  SharedObjectRef({\n    objectId,\n    mutable,\n    initialSharedVersion\n  }) {\n    return {\n      $kind: \"Object\",\n      Object: {\n        $kind: \"SharedObject\",\n        SharedObject: {\n          mutable,\n          initialSharedVersion,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  },\n  ReceivingRef({ objectId, digest, version }) {\n    return {\n      $kind: \"Object\",\n      Object: {\n        $kind: \"Receiving\",\n        Receiving: {\n          digest,\n          version,\n          objectId: normalizeSuiAddress(objectId)\n        }\n      }\n    };\n  }\n};\nexport {\n  Inputs\n};\n//# sourceMappingURL=Inputs.js.map\n","// src/actions/await/awaitAsync.ts\nfunction awaitAsync() {\n  return {\n    kind: \"transformation\",\n    type: \"await\",\n    reference: awaitAsync,\n    async: true,\n    async _run(dataset) {\n      dataset.value = await dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(?:0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#(?:[\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{15}$|^\\d{2}-\\d{6}-\\d{6}-\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar IP_REGEX = /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$|^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?(?:Z|[+-](?:0\\d|1\\d|2[0-3])(?::?[0-5]\\d)?)$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar MAC_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$|^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(?:0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config2) {\n  store = { ...store, ...config2 };\n}\nfunction getGlobalConfig(config2) {\n  return {\n    lang: config2?.lang ?? store?.lang,\n    message: config2?.message,\n    abortEarly: config2?.abortEarly ?? store?.abortEarly,\n    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly\n  };\n}\nfunction deleteGlobalConfig() {\n  store = void 0;\n}\n\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n  if (!store2) store2 = /* @__PURE__ */ new Map();\n  store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n  return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n  store2?.delete(lang);\n}\n\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n  if (!store3) store3 = /* @__PURE__ */ new Map();\n  store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n  return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n  store3?.delete(lang);\n}\n\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n  if (!store4) store4 = /* @__PURE__ */ new Map();\n  if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());\n  store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n  return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n  store4?.get(reference)?.delete(lang);\n}\n\n// src/utils/_stringify/_stringify.ts\nfunction _stringify(input) {\n  const type = typeof input;\n  if (type === \"string\") {\n    return `\"${input}\"`;\n  }\n  if (type === \"number\" || type === \"bigint\" || type === \"boolean\") {\n    return `${input}`;\n  }\n  if (type === \"object\" || type === \"function\") {\n    return (input && Object.getPrototypeOf(input)?.constructor?.name) ?? \"null\";\n  }\n  return type;\n}\n\n// src/utils/_addIssue/_addIssue.ts\nfunction _addIssue(context, label, dataset, config2, other) {\n  const input = other && \"input\" in other ? other.input : dataset.value;\n  const expected = other?.expected ?? context.expects ?? null;\n  const received = other?.received ?? _stringify(input);\n  const issue = {\n    kind: context.kind,\n    type: context.type,\n    input,\n    expected,\n    received,\n    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : \"R\"}eceived ${received}`,\n    // @ts-expect-error\n    requirement: context.requirement,\n    path: other?.path,\n    issues: other?.issues,\n    lang: config2.lang,\n    abortEarly: config2.abortEarly,\n    abortPipeEarly: config2.abortPipeEarly\n  };\n  const isSchema = context.kind === \"schema\";\n  const message = other?.message ?? // @ts-expect-error\n  context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);\n  if (message) {\n    issue.message = typeof message === \"function\" ? message(issue) : message;\n  }\n  if (isSchema) {\n    dataset.typed = false;\n  }\n  if (dataset.issues) {\n    dataset.issues.push(issue);\n  } else {\n    dataset.issues = [issue];\n  }\n}\n\n// src/utils/_isLuhnAlgo/_isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction _isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/_isValidObjectKey/_isValidObjectKey.ts\nfunction _isValidObjectKey(object2, key) {\n  return Object.hasOwn(object2, key) && key !== \"__proto__\" && key !== \"prototype\" && key !== \"constructor\";\n}\n\n// src/utils/entriesFromList/entriesFromList.ts\nfunction entriesFromList(list, schema) {\n  const entries = {};\n  for (const key of list) {\n    entries[key] = schema;\n  }\n  return entries;\n}\n\n// src/utils/getDotPath/getDotPath.ts\nfunction getDotPath(issue) {\n  if (issue.path) {\n    let key = \"\";\n    for (const item of issue.path) {\n      if (typeof item.key === \"string\" || typeof item.key === \"number\") {\n        if (key) {\n          key += `.${item.key}`;\n        } else {\n          key += item.key;\n        }\n      } else {\n        return null;\n      }\n    }\n    return key;\n  }\n  return null;\n}\n\n// src/utils/isOfKind/isOfKind.ts\nfunction isOfKind(kind, object2) {\n  return object2.kind === kind;\n}\n\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n  return object2.type === type;\n}\n\n// src/utils/isValiError/isValiError.ts\nfunction isValiError(error) {\n  return error instanceof ValiError;\n}\n\n// src/utils/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  /**\n   * The error issues.\n   */\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/actions/bic/bic.ts\nfunction bic(message) {\n  return {\n    kind: \"validation\",\n    type: \"bic\",\n    reference: bic,\n    async: false,\n    expects: null,\n    requirement: BIC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"BIC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/brand/brand.ts\nfunction brand(name) {\n  return {\n    kind: \"transformation\",\n    type: \"brand\",\n    reference: brand,\n    async: false,\n    name,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/bytes/bytes.ts\nfunction bytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"bytes\",\n    reference: bytes,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 !== this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/check.ts\nfunction check(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: check,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/check/checkAsync.ts\nfunction checkAsync(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check\",\n    reference: checkAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.typed && !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/checkItems/checkItems.ts\nfunction checkItems(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"check_items\",\n    reference: checkItems,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        for (let index = 0; index < dataset.value.length; index++) {\n          const item = dataset.value[index];\n          if (!this.requirement(item, index, dataset.value)) {\n            _addIssue(this, \"item\", dataset, config2, {\n              input: item,\n              path: [\n                {\n                  type: \"array\",\n                  origin: \"value\",\n                  input: dataset.value,\n                  key: index,\n                  value: item\n                }\n              ]\n            });\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/creditCard/creditCard.ts\nvar CREDIT_CARD_REGEX = /^(?:\\d{14,19}|\\d{4}(?: \\d{3,6}){2,4}|\\d{4}(?:-\\d{3,6}){2,4})$/u;\nvar SANITIZE_REGEX = /[- ]/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11,13}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(?:222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(?:6[27]\\d{14,17}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n  return {\n    kind: \"validation\",\n    type: \"credit_card\",\n    reference: creditCard,\n    async: false,\n    expects: null,\n    requirement(input) {\n      let sanitized;\n      return CREDIT_CARD_REGEX.test(input) && // Remove any hyphens and blanks\n      (sanitized = input.replace(SANITIZE_REGEX, \"\")) && // Check if it matches a provider\n      PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && // Check if passes luhn algorithm\n      _isLuhnAlgo(sanitized);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"credit card\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/cuid2/cuid2.ts\nfunction cuid2(message) {\n  return {\n    kind: \"validation\",\n    type: \"cuid2\",\n    reference: cuid2,\n    async: false,\n    expects: null,\n    requirement: CUID2_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"Cuid2\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/decimal/decimal.ts\nfunction decimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"decimal\",\n    reference: decimal,\n    async: false,\n    expects: null,\n    requirement: DECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"decimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/email/email.ts\nfunction email(message) {\n  return {\n    kind: \"validation\",\n    type: \"email\",\n    reference: email,\n    expects: null,\n    async: false,\n    requirement: EMAIL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"email\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/emoji/emoji.ts\nfunction emoji(message) {\n  return {\n    kind: \"validation\",\n    type: \"emoji\",\n    reference: emoji,\n    async: false,\n    expects: null,\n    requirement: EMOJI_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"emoji\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/empty/empty.ts\nfunction empty(message) {\n  return {\n    kind: \"validation\",\n    type: \"empty\",\n    reference: empty,\n    async: false,\n    expects: \"0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"ends_with\",\n    reference: endsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.endsWith(this.requirement)) {\n        _addIssue(this, \"end\", dataset, config2, {\n          received: `\"${dataset.value.slice(-this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/everyItem/everyItem.ts\nfunction everyItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"every_item\",\n    reference: everyItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.every(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/excludes/excludes.ts\nfunction excludes(requirement, message) {\n  const received = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"excludes\",\n    reference: excludes,\n    async: false,\n    expects: `!${received}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, { received });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/filterItems/filterItems.ts\nfunction filterItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"filter_items\",\n    reference: filterItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.filter(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/findItem/findItem.ts\nfunction findItem(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"find_item\",\n    reference: findItem,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.find(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/finite/finite.ts\nfunction finite(message) {\n  return {\n    kind: \"validation\",\n    type: \"finite\",\n    reference: finite,\n    async: false,\n    expects: null,\n    requirement: Number.isFinite,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"finite\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hash/hash.ts\nvar HASH_LENGTHS = {\n  md4: 32,\n  md5: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n  adler32: 8\n};\nfunction hash(types, message) {\n  return {\n    kind: \"validation\",\n    type: \"hash\",\n    reference: hash,\n    expects: null,\n    async: false,\n    requirement: RegExp(\n      types.map((type) => `^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"),\n      \"iu\"\n    ),\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hash\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n  return {\n    kind: \"validation\",\n    type: \"hexadecimal\",\n    reference: hexadecimal,\n    async: false,\n    expects: null,\n    requirement: HEXADECIMAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hexadecimal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/hexColor/hexColor.ts\nfunction hexColor(message) {\n  return {\n    kind: \"validation\",\n    type: \"hex_color\",\n    reference: hexColor,\n    async: false,\n    expects: null,\n    requirement: HEX_COLOR_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"hex color\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/imei/imei.ts\nfunction imei(message) {\n  return {\n    kind: \"validation\",\n    type: \"imei\",\n    reference: imei,\n    async: false,\n    expects: null,\n    requirement(input) {\n      return IMEI_REGEX.test(input) && _isLuhnAlgo(input);\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"IMEI\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/includes/includes.ts\nfunction includes(requirement, message) {\n  const expects = _stringify(requirement);\n  return {\n    kind: \"validation\",\n    type: \"includes\",\n    reference: includes,\n    async: false,\n    expects,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.includes(this.requirement)) {\n        _addIssue(this, \"content\", dataset, config2, {\n          received: `!${expects}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/integer/integer.ts\nfunction integer(message) {\n  return {\n    kind: \"validation\",\n    type: \"integer\",\n    reference: integer,\n    async: false,\n    expects: null,\n    requirement: Number.isInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ip/ip.ts\nfunction ip(message) {\n  return {\n    kind: \"validation\",\n    type: \"ip\",\n    reference: ip,\n    async: false,\n    expects: null,\n    requirement: IP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IP\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv4/ipv4.ts\nfunction ipv4(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv4\",\n    reference: ipv4,\n    async: false,\n    expects: null,\n    requirement: IPV4_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv4\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ipv6/ipv6.ts\nfunction ipv6(message) {\n  return {\n    kind: \"validation\",\n    type: \"ipv6\",\n    reference: ipv6,\n    async: false,\n    expects: null,\n    requirement: IPV6_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"IPv6\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDate/isoDate.ts\nfunction isoDate(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date\",\n    reference: isoDate,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_date_time\",\n    reference: isoDateTime,\n    async: false,\n    expects: null,\n    requirement: ISO_DATE_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"date-time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTime/isoTime.ts\nfunction isoTime(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time\",\n    reference: isoTime,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_time_second\",\n    reference: isoTimeSecond,\n    async: false,\n    expects: null,\n    requirement: ISO_TIME_SECOND_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"time-second\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_timestamp\",\n    reference: isoTimestamp,\n    async: false,\n    expects: null,\n    requirement: ISO_TIMESTAMP_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"timestamp\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n  return {\n    kind: \"validation\",\n    type: \"iso_week\",\n    reference: isoWeek,\n    async: false,\n    expects: null,\n    requirement: ISO_WEEK_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"week\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/length/length.ts\nfunction length(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"length\",\n    reference: length,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length !== this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac/mac.ts\nfunction mac(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac\",\n    reference: mac,\n    async: false,\n    expects: null,\n    requirement: MAC_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac48/mac48.ts\nfunction mac48(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac48\",\n    reference: mac48,\n    async: false,\n    expects: null,\n    requirement: MAC48_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"48-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mac64/mac64.ts\nfunction mac64(message) {\n  return {\n    kind: \"validation\",\n    type: \"mac64\",\n    reference: mac64,\n    async: false,\n    expects: null,\n    requirement: MAC64_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"64-bit MAC\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mapItems/mapItems.ts\nfunction mapItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"map_items\",\n    reference: mapItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.map(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_bytes\",\n    reference: maxBytes,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 > this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_length\",\n    reference: maxLength,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length > this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_size\",\n    reference: maxSize,\n    async: false,\n    expects: `<=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size > this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"max_value\",\n    reference: maxValue,\n    async: false,\n    expects: `<=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value > this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"mime_type\",\n    reference: mimeType,\n    async: false,\n    expects: requirement.map((option) => `\"${option}\"`).join(\" | \") || \"never\",\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.includes(dataset.value.type)) {\n        _addIssue(this, \"MIME type\", dataset, config2, {\n          received: `\"${dataset.value.type}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_bytes\",\n    reference: minBytes,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 < this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minLength/minLength.ts\nfunction minLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_length\",\n    reference: minLength,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length < this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minSize/minSize.ts\nfunction minSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_size\",\n    reference: minSize,\n    async: false,\n    expects: `>=${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size < this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/minValue/minValue.ts\nfunction minValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"min_value\",\n    reference: minValue,\n    async: false,\n    expects: `>=${requirement instanceof Date ? requirement.toJSON() : _stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value < this.requirement) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"multiple_of\",\n    reference: multipleOf,\n    async: false,\n    expects: `%${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value % this.requirement !== 0) {\n        _addIssue(this, \"multiple\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/nonEmpty/nonEmpty.ts\nfunction nonEmpty(message) {\n  return {\n    kind: \"validation\",\n    type: \"non_empty\",\n    reference: nonEmpty,\n    async: false,\n    expects: \"!0\",\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === 0) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: \"0\"\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/normalize/normalize.ts\nfunction normalize(form) {\n  return {\n    kind: \"transformation\",\n    type: \"normalize\",\n    reference: normalize,\n    async: false,\n    form,\n    _run(dataset) {\n      dataset.value = dataset.value.normalize(this.form);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_bytes\",\n    reference: notBytes,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed) {\n        const length2 = new TextEncoder().encode(dataset.value).length;\n        if (length2 === this.requirement) {\n          _addIssue(this, \"bytes\", dataset, config2, {\n            received: `${length2}`\n          });\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notLength/notLength.ts\nfunction notLength(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_length\",\n    reference: notLength,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.length === this.requirement) {\n        _addIssue(this, \"length\", dataset, config2, {\n          received: `${dataset.value.length}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notSize/notSize.ts\nfunction notSize(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_size\",\n    reference: notSize,\n    async: false,\n    expects: `!${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size === this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/notValue/notValue.ts\nfunction notValue(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"not_value\",\n    reference: notValue,\n    async: false,\n    expects: requirement instanceof Date ? `!${requirement.toJSON()}` : `!${_stringify(requirement)}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && this.requirement <= dataset.value && this.requirement >= dataset.value) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/octal/octal.ts\nfunction octal(message) {\n  return {\n    kind: \"validation\",\n    type: \"octal\",\n    reference: octal,\n    async: false,\n    expects: null,\n    requirement: OCTAL_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"octal\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/utils/_isPartiallyTyped/_isPartiallyTyped.ts\nfunction _isPartiallyTyped(dataset, pathList) {\n  if (dataset.issues) {\n    for (const path of pathList) {\n      for (const issue of dataset.issues) {\n        let typed = false;\n        const bound = Math.min(path.length, issue.path?.length ?? 0);\n        for (let index = 0; index < bound; index++) {\n          if (path[index] !== issue.path[index].key) {\n            typed = true;\n            break;\n          }\n        }\n        if (!typed) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n// src/actions/partialCheck/partialCheck.ts\nfunction partialCheck(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheck,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/partialCheck/partialCheckAsync.ts\nfunction partialCheckAsync(pathList, requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"partial_check\",\n    reference: partialCheckAsync,\n    async: true,\n    expects: null,\n    requirement,\n    message,\n    async _run(dataset, config2) {\n      if (_isPartiallyTyped(dataset, pathList) && // @ts-expect-error\n      !await this.requirement(dataset.value)) {\n        _addIssue(this, \"input\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheck.ts\nfunction rawCheck(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheck,\n    async: false,\n    expects: null,\n    _run(dataset, config2) {\n      action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawCheck/rawCheckAsync.ts\nfunction rawCheckAsync(action) {\n  return {\n    kind: \"validation\",\n    type: \"raw_check\",\n    reference: rawCheckAsync,\n    async: true,\n    expects: null,\n    async _run(dataset, config2) {\n      await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info)\n      });\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransform.ts\nfunction rawTransform(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransform,\n    async: false,\n    _run(dataset, config2) {\n      const output = action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/rawTransform/rawTransformAsync.ts\nfunction rawTransformAsync(action) {\n  return {\n    kind: \"transformation\",\n    type: \"raw_transform\",\n    reference: rawTransformAsync,\n    async: true,\n    async _run(dataset, config2) {\n      const output = await action({\n        dataset,\n        config: config2,\n        addIssue: (info) => _addIssue(this, info?.label ?? \"input\", dataset, config2, info),\n        NEVER: null\n      });\n      if (dataset.issues) {\n        dataset.typed = false;\n      } else {\n        dataset.value = output;\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/readonly/readonly.ts\nfunction readonly() {\n  return {\n    kind: \"transformation\",\n    type: \"readonly\",\n    reference: readonly,\n    async: false,\n    _run(dataset) {\n      return dataset;\n    }\n  };\n}\n\n// src/actions/reduceItems/reduceItems.ts\nfunction reduceItems(operation, initial) {\n  return {\n    kind: \"transformation\",\n    type: \"reduce_items\",\n    reference: reduceItems,\n    async: false,\n    operation,\n    initial,\n    _run(dataset) {\n      dataset.value = dataset.value.reduce(this.operation, this.initial);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/regex/regex.ts\nfunction regex(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"regex\",\n    reference: regex,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"format\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n  return {\n    kind: \"validation\",\n    type: \"safe_integer\",\n    reference: safeInteger,\n    async: false,\n    expects: null,\n    requirement: Number.isSafeInteger,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"safe integer\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/size/size.ts\nfunction size(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"size\",\n    reference: size,\n    async: false,\n    expects: `${requirement}`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && dataset.value.size !== this.requirement) {\n        _addIssue(this, \"size\", dataset, config2, {\n          received: `${dataset.value.size}`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/someItem/someItem.ts\nfunction someItem(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"some_item\",\n    reference: someItem,\n    async: false,\n    expects: null,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.some(this.requirement)) {\n        _addIssue(this, \"item\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/sortItems/sortItems.ts\nfunction sortItems(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"sort_items\",\n    reference: sortItems,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = dataset.value.sort(this.operation);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"starts_with\",\n    reference: startsWith,\n    async: false,\n    expects: `\"${requirement}\"`,\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !dataset.value.startsWith(this.requirement)) {\n        _addIssue(this, \"start\", dataset, config2, {\n          received: `\"${dataset.value.slice(0, this.requirement.length)}\"`\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_lower_case\",\n    reference: toLowerCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toLowerCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_max_value\",\n    reference: toMaxValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value > this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    kind: \"transformation\",\n    type: \"to_min_value\",\n    reference: toMinValue,\n    async: false,\n    requirement,\n    _run(dataset) {\n      dataset.value = dataset.value < this.requirement ? this.requirement : dataset.value;\n      return dataset;\n    }\n  };\n}\n\n// src/actions/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    kind: \"transformation\",\n    type: \"to_upper_case\",\n    reference: toUpperCase,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.toUpperCase();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transform.ts\nfunction transform(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transform,\n    async: false,\n    operation,\n    _run(dataset) {\n      dataset.value = this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/transform/transformAsync.ts\nfunction transformAsync(operation) {\n  return {\n    kind: \"transformation\",\n    type: \"transform\",\n    reference: transformAsync,\n    async: true,\n    operation,\n    async _run(dataset) {\n      dataset.value = await this.operation(dataset.value);\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trim/trim.ts\nfunction trim() {\n  return {\n    kind: \"transformation\",\n    type: \"trim\",\n    reference: trim,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trim();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimEnd/trimEnd.ts\nfunction trimEnd() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_end\",\n    reference: trimEnd,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimEnd();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/trimStart/trimStart.ts\nfunction trimStart() {\n  return {\n    kind: \"transformation\",\n    type: \"trim_start\",\n    reference: trimStart,\n    async: false,\n    _run(dataset) {\n      dataset.value = dataset.value.trimStart();\n      return dataset;\n    }\n  };\n}\n\n// src/actions/ulid/ulid.ts\nfunction ulid(message) {\n  return {\n    kind: \"validation\",\n    type: \"ulid\",\n    reference: ulid,\n    async: false,\n    expects: null,\n    requirement: ULID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"ULID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/url/url.ts\nfunction url(message) {\n  return {\n    kind: \"validation\",\n    type: \"url\",\n    reference: url,\n    async: false,\n    expects: null,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement(dataset.value)) {\n        _addIssue(this, \"URL\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/uuid/uuid.ts\nfunction uuid(message) {\n  return {\n    kind: \"validation\",\n    type: \"uuid\",\n    reference: uuid,\n    async: false,\n    expects: null,\n    requirement: UUID_REGEX,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !this.requirement.test(dataset.value)) {\n        _addIssue(this, \"UUID\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/actions/value/value.ts\nfunction value(requirement, message) {\n  return {\n    kind: \"validation\",\n    type: \"value\",\n    reference: value,\n    async: false,\n    expects: requirement instanceof Date ? requirement.toJSON() : _stringify(requirement),\n    requirement,\n    message,\n    _run(dataset, config2) {\n      if (dataset.typed && !(this.requirement <= dataset.value && this.requirement >= dataset.value)) {\n        _addIssue(this, \"value\", dataset, config2, {\n          received: dataset.value instanceof Date ? dataset.value.toJSON() : _stringify(dataset.value)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/config/config.ts\nfunction config(schema, config2) {\n  return {\n    ...schema,\n    _run(dataset, config_) {\n      return schema._run(dataset, { ...config_, ...config2 });\n    }\n  };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, dataset, config2) {\n  return typeof schema.fallback === \"function\" ? (\n    // @ts-expect-error\n    schema.fallback(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.fallback\n  );\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _run(dataset, config2) {\n      schema._run(dataset, config2);\n      return dataset.issues ? { typed: true, value: getFallback(this, dataset, config2) } : dataset;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async: true,\n    async _run(dataset, config2) {\n      schema._run(dataset, config2);\n      return dataset.issues ? (\n        // @ts-expect-error\n        { typed: true, value: await getFallback(this, dataset, config2) }\n      ) : dataset;\n    }\n  };\n}\n\n// src/methods/flatten/flatten.ts\nfunction flatten(issues) {\n  const flatErrors = {};\n  for (const issue of issues) {\n    if (issue.path) {\n      const dotPath = getDotPath(issue);\n      if (dotPath) {\n        if (!flatErrors.nested) {\n          flatErrors.nested = {};\n        }\n        if (flatErrors.nested[dotPath]) {\n          flatErrors.nested[dotPath].push(issue.message);\n        } else {\n          flatErrors.nested[dotPath] = [issue.message];\n        }\n      } else {\n        if (flatErrors.other) {\n          flatErrors.other.push(issue.message);\n        } else {\n          flatErrors.other = [issue.message];\n        }\n      }\n    } else {\n      if (flatErrors.root) {\n        flatErrors.root.push(issue.message);\n      } else {\n        flatErrors.root = [issue.message];\n      }\n    }\n  }\n  return flatErrors;\n}\n\n// src/methods/forward/forward.ts\nfunction forward(action, pathKeys) {\n  return {\n    ...action,\n    _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(action, pathKeys) {\n  return {\n    ...action,\n    async: true,\n    async _run(dataset, config2) {\n      const prevIssues = dataset.issues && [...dataset.issues];\n      await action._run(dataset, config2);\n      if (dataset.issues) {\n        for (const issue of dataset.issues) {\n          if (!prevIssues?.includes(issue)) {\n            let pathInput = dataset.value;\n            for (const key of pathKeys) {\n              const pathValue = pathInput[key];\n              const pathItem = {\n                type: \"unknown\",\n                origin: \"value\",\n                input: pathInput,\n                key,\n                value: pathValue\n              };\n              if (issue.path) {\n                issue.path.push(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              if (!pathValue) {\n                break;\n              }\n              pathInput = pathValue;\n            }\n          }\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema, dataset, config2) {\n  return typeof schema.default === \"function\" ? (\n    // @ts-expect-error\n    schema.default(dataset, config2)\n  ) : (\n    // @ts-expect-error\n    schema.default\n  );\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getDefaults(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getDefaults);\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getDefaultsAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getDefaultsAsync));\n  }\n  return getDefault(schema);\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  if (\"entries\" in schema) {\n    const object2 = {};\n    for (const key in schema.entries) {\n      object2[key] = getFallbacks(schema.entries[key]);\n    }\n    return object2;\n  }\n  if (\"items\" in schema) {\n    return schema.items.map(getFallbacks);\n  }\n  return getFallback(schema);\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  if (\"entries\" in schema) {\n    return Object.fromEntries(\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, value2]) => [\n          key,\n          await getFallbacksAsync(value2)\n        ])\n      )\n    );\n  }\n  if (\"items\" in schema) {\n    return Promise.all(schema.items.map(getFallbacksAsync));\n  }\n  return getFallback(schema);\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input) {\n  return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any() {\n  return {\n    kind: \"schema\",\n    type: \"any\",\n    reference: any,\n    expects: \"any\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: array,\n    expects: \"Array\",\n    async: false,\n    item,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < input.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.item._run({ typed: false, value: value2 }, config2);\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, message) {\n  return {\n    kind: \"schema\",\n    type: \"array\",\n    reference: arrayAsync,\n    expects: \"Array\",\n    async: true,\n    item,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          input.map((value2) => this.item._run({ typed: false, value: value2 }, config2))\n        );\n        for (let key = 0; key < itemDatasets.length; key++) {\n          const itemDataset = itemDatasets[key];\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: input[key]\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(message) {\n  return {\n    kind: \"schema\",\n    type: \"bigint\",\n    reference: bigint,\n    expects: \"bigint\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"bigint\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(message) {\n  return {\n    kind: \"schema\",\n    type: \"blob\",\n    reference: blob,\n    expects: \"Blob\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Blob) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(message) {\n  return {\n    kind: \"schema\",\n    type: \"boolean\",\n    reference: boolean,\n    expects: \"boolean\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"boolean\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/custom.ts\nfunction custom(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: custom,\n    expects: \"unknown\",\n    async: false,\n    check: check2,\n    message,\n    _run(dataset, config2) {\n      if (this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/custom/customAsync.ts\nfunction customAsync(check2, message) {\n  return {\n    kind: \"schema\",\n    type: \"custom\",\n    reference: customAsync,\n    expects: \"unknown\",\n    async: true,\n    check: check2,\n    message,\n    async _run(dataset, config2) {\n      if (await this.check(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(message) {\n  return {\n    kind: \"schema\",\n    type: \"date\",\n    reference: date,\n    expects: \"Date\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Date) {\n        if (!isNaN(dataset.value)) {\n          dataset.typed = true;\n        } else {\n          _addIssue(this, \"type\", dataset, config2, {\n            received: '\"Invalid Date\"'\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n  const options = Object.entries(enum__).filter(([key]) => isNaN(+key)).map(([, value2]) => value2);\n  return {\n    kind: \"schema\",\n    type: \"enum\",\n    reference: enum_,\n    expects: options.map(_stringify).join(\" | \") || \"never\",\n    async: false,\n    enum: enum__,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/file/file.ts\nfunction file(message) {\n  return {\n    kind: \"schema\",\n    type: \"file\",\n    reference: file,\n    expects: \"File\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof File) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/function/function.ts\nfunction function_(message) {\n  return {\n    kind: \"schema\",\n    type: \"function\",\n    reference: function_,\n    expects: \"Function\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"function\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, message) {\n  return {\n    kind: \"schema\",\n    type: \"instance\",\n    reference: instance,\n    expects: class_.name,\n    async: false,\n    class: class_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof this.class) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/utils/_merge/_merge.ts\nfunction _merge(value1, value2) {\n  if (typeof value1 === typeof value2) {\n    if (value1 === value2 || value1 instanceof Date && value2 instanceof Date && +value1 === +value2) {\n      return { value: value1 };\n    }\n    if (value1 && value2 && value1.constructor === Object && value2.constructor === Object) {\n      for (const key in value2) {\n        if (key in value1) {\n          const dataset = _merge(value1[key], value2[key]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[key] = dataset.value;\n        } else {\n          value1[key] = value2[key];\n        }\n      }\n      return { value: value1 };\n    }\n    if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (value1.length === value2.length) {\n        for (let index = 0; index < value1.length; index++) {\n          const dataset = _merge(value1[index], value2[index]);\n          if (dataset.issue) {\n            return dataset;\n          }\n          value1[index] = dataset.value;\n        }\n        return { value: value1 };\n      }\n    }\n  }\n  return { issue: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersect,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        for (const schema of this.options) {\n          const optionDataset = schema._run(\n            { typed: false, value: input },\n            config2\n          );\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"intersect\",\n    reference: intersectAsync,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" & \") || \"never\",\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      if (this.options.length) {\n        const input = dataset.value;\n        let outputs;\n        dataset.typed = true;\n        const optionDatasets = await Promise.all(\n          this.options.map(\n            (schema) => schema._run({ typed: false, value: input }, config2)\n          )\n        );\n        for (const optionDataset of optionDatasets) {\n          if (optionDataset.issues) {\n            if (dataset.issues) {\n              dataset.issues.push(...optionDataset.issues);\n            } else {\n              dataset.issues = optionDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!optionDataset.typed) {\n            dataset.typed = false;\n          }\n          if (dataset.typed) {\n            if (outputs) {\n              outputs.push(optionDataset.value);\n            } else {\n              outputs = [optionDataset.value];\n            }\n          }\n        }\n        if (dataset.typed) {\n          dataset.value = outputs[0];\n          for (let index = 1; index < outputs.length; index++) {\n            const mergeDataset = _merge(dataset.value, outputs[index]);\n            if (mergeDataset.issue) {\n              _addIssue(this, \"type\", dataset, config2, {\n                received: \"unknown\"\n              });\n              break;\n            }\n            dataset.value = mergeDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazy,\n    expects: \"unknown\",\n    async: false,\n    getter,\n    _run(dataset, config2) {\n      return this.getter(dataset.value)._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n  return {\n    kind: \"schema\",\n    type: \"lazy\",\n    reference: lazyAsync,\n    expects: \"unknown\",\n    async: true,\n    getter,\n    async _run(dataset, config2) {\n      return (await this.getter(dataset.value))._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n  return {\n    kind: \"schema\",\n    type: \"literal\",\n    reference: literal,\n    expects: _stringify(literal_),\n    async: false,\n    literal: literal_,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === this.literal) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObject.ts\nfunction looseObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseObject/looseObjectAsync.ts\nfunction looseObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_object\",\n    reference: looseObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              dataset.value[key] = input[key];\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTuple.ts\nfunction looseTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/looseTuple/looseTupleAsync.ts\nfunction looseTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"loose_tuple\",\n    reference: looseTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            dataset.value.push(input[key]);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: map,\n    expects: \"Map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        for (const [inputKey, inputValue] of input) {\n          const keyDataset = this.key._run(\n            { typed: false, value: inputKey },\n            config2\n          );\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"map\",\n    reference: mapAsync,\n    expects: \"Map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Map) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Map();\n        const datasets = await Promise.all(\n          [...input].map(\n            ([inputKey, inputValue]) => Promise.all([\n              inputKey,\n              inputValue,\n              this.key._run({ typed: false, value: inputKey }, config2),\n              this.value._run({ typed: false, value: inputValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          inputKey,\n          inputValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"key\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"map\",\n              origin: \"value\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.set(keyDataset.value, valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n  return {\n    kind: \"schema\",\n    type: \"nan\",\n    reference: nan,\n    expects: \"NaN\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (Number.isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message) {\n  return {\n    kind: \"schema\",\n    type: \"never\",\n    reference: never,\n    expects: \"never\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      _addIssue(this, \"type\", dataset, config2);\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullable,\n    expects: \"!null\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullable\",\n    reference: nonNullableAsync,\n    expects: \"!null\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullish,\n    expects: \"!null & !undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_nullish\",\n    reference: nonNullishAsync,\n    expects: \"!null & !undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptional,\n    expects: \"!undefined\",\n    async: false,\n    wrapped,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n  return {\n    kind: \"schema\",\n    type: \"non_optional\",\n    reference: nonOptionalAsync,\n    expects: \"!undefined\",\n    async: true,\n    wrapped,\n    message,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        _addIssue(this, \"type\", dataset, config2);\n        return dataset;\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message) {\n  return {\n    kind: \"schema\",\n    type: \"null\",\n    reference: null_,\n    expects: \"null\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullable,\n    expects: `${wrapped.expects} | null`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullable\",\n    reference: nullableAsync,\n    expects: `${wrapped.expects} | null`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullish,\n    expects: `${wrapped.expects} | null | undefined`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"nullish\",\n    reference: nullishAsync,\n    expects: `${wrapped.expects} | null | undefined`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === null || dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === null || dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/number/number.ts\nfunction number(message) {\n  return {\n    kind: \"schema\",\n    type: \"number\",\n    reference: number,\n    expects: \"number\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"number\" && !isNaN(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: object,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"object\",\n    reference: objectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRest.ts\nfunction objectWithRest(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRest,\n    expects: \"Object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (_isValidObjectKey(input, key) && !(key in this.entries)) {\n              const value2 = input[key];\n              const valueDataset = this.rest._run(\n                { typed: false, value: value2 },\n                config2\n              );\n              if (valueDataset.issues) {\n                const pathItem = {\n                  type: \"object\",\n                  origin: \"value\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of valueDataset.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  dataset.issues?.push(issue);\n                }\n                if (!dataset.issues) {\n                  dataset.issues = valueDataset.issues;\n                }\n                if (config2.abortEarly) {\n                  dataset.typed = false;\n                  break;\n                }\n              }\n              if (!valueDataset.typed) {\n                dataset.typed = false;\n              }\n              dataset.value[key] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/objectWithRest/objectWithRestAsync.ts\nfunction objectWithRestAsync(entries, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"object_with_rest\",\n    reference: objectWithRestAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal entry\n          Promise.all(\n            Object.entries(this.entries).map(async ([key, schema]) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await schema._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other entries with rest schema\n          Promise.all(\n            Object.entries(input).filter(\n              ([key]) => _isValidObjectKey(input, key) && !(key in this.entries)\n            ).map(\n              async ([key, value2]) => [\n                key,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ]\n            )\n          )\n        ]);\n        for (const [key, value2, valueDataset] of normalDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, valueDataset] of restDatasets) {\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!valueDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optional,\n    expects: `${wrapped.expects} | undefined`,\n    async: false,\n    wrapped,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, ...args) {\n  const schema = {\n    kind: \"schema\",\n    type: \"optional\",\n    reference: optionalAsync,\n    expects: `${wrapped.expects} | undefined`,\n    async: true,\n    wrapped,\n    async _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        if (\"default\" in this) {\n          dataset.value = await getDefault(\n            this,\n            dataset,\n            config2\n          );\n        }\n        if (dataset.value === void 0) {\n          dataset.typed = true;\n          return dataset;\n        }\n      }\n      return this.wrapped._run(dataset, config2);\n    }\n  };\n  if (0 in args) {\n    schema.default = args[0];\n  }\n  return schema;\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"picklist\",\n    reference: picklist,\n    expects: options.map(_stringify).join(\" | \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      if (this.options.includes(dataset.value)) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/promise/promise.ts\nfunction promise(message) {\n  return {\n    kind: \"schema\",\n    type: \"promise\",\n    reference: promise,\n    expects: \"Promise\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value instanceof Promise) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/record.ts\nfunction record(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: record,\n    expects: \"Object\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const entryKey in input) {\n          if (_isValidObjectKey(input, entryKey)) {\n            const entryValue = input[entryKey];\n            const keyDataset = this.key._run(\n              { typed: false, value: entryKey },\n              config2\n            );\n            if (keyDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"key\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of keyDataset.issues) {\n                issue.path = [pathItem];\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = keyDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            const valueDataset = this.value._run(\n              { typed: false, value: entryValue },\n              config2\n            );\n            if (valueDataset.issues) {\n              const pathItem = {\n                type: \"object\",\n                origin: \"value\",\n                input,\n                key: entryKey,\n                value: entryValue\n              };\n              for (const issue of valueDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = valueDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!keyDataset.typed || !valueDataset.typed) {\n              dataset.typed = false;\n            }\n            if (keyDataset.typed) {\n              dataset.value[keyDataset.value] = valueDataset.value;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(key, value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"record\",\n    reference: recordAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const datasets = await Promise.all(\n          Object.entries(input).filter(([key2]) => _isValidObjectKey(input, key2)).map(\n            ([entryKey, entryValue]) => Promise.all([\n              entryKey,\n              entryValue,\n              this.key._run({ typed: false, value: entryKey }, config2),\n              this.value._run({ typed: false, value: entryValue }, config2)\n            ])\n          )\n        );\n        for (const [\n          entryKey,\n          entryValue,\n          keyDataset,\n          valueDataset\n        ] of datasets) {\n          if (keyDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"key\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of keyDataset.issues) {\n              issue.path = [pathItem];\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = keyDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: entryKey,\n              value: entryValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!keyDataset.typed || !valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (keyDataset.typed) {\n            dataset.value[keyDataset.value] = valueDataset.value;\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: set,\n    expects: \"Set\",\n    async: false,\n    value: value2,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        for (const inputValue of input) {\n          const valueDataset = this.value._run(\n            { typed: false, value: inputValue },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, message) {\n  return {\n    kind: \"schema\",\n    type: \"set\",\n    reference: setAsync,\n    expects: \"Set\",\n    async: true,\n    value: value2,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input instanceof Set) {\n        dataset.typed = true;\n        dataset.value = /* @__PURE__ */ new Set();\n        const valueDatasets = await Promise.all(\n          [...input].map(\n            async (inputValue) => [\n              inputValue,\n              await this.value._run(\n                { typed: false, value: inputValue },\n                config2\n              )\n            ]\n          )\n        );\n        for (const [inputValue, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"set\",\n              origin: \"value\",\n              input,\n              key: null,\n              value: inputValue\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.add(valueDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObject.ts\nfunction strictObject(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObject,\n    expects: \"Object\",\n    async: false,\n    entries,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        for (const key in this.entries) {\n          const value2 = input[key];\n          const valueDataset = this.entries[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictObject/strictObjectAsync.ts\nfunction strictObjectAsync(entries, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_object\",\n    reference: strictObjectAsync,\n    expects: \"Object\",\n    async: true,\n    entries,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        dataset.typed = true;\n        dataset.value = {};\n        const valueDatasets = await Promise.all(\n          Object.entries(this.entries).map(async ([key, schema]) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await schema._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, valueDataset] of valueDatasets) {\n          if (valueDataset.issues) {\n            const pathItem = {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of valueDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = valueDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!valueDataset.typed) {\n            dataset.typed = false;\n          }\n          if (valueDataset.value !== void 0 || key in input) {\n            dataset.value[key] = valueDataset.value;\n          }\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const key in input) {\n            if (!(key in this.entries)) {\n              const value2 = input[key];\n              _addIssue(this, \"type\", dataset, config2, {\n                input: value2,\n                expected: \"never\",\n                path: [\n                  {\n                    type: \"object\",\n                    origin: \"value\",\n                    input,\n                    key,\n                    value: value2\n                  }\n                ]\n              });\n              break;\n            }\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTuple.ts\nfunction strictTuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/strictTuple/strictTupleAsync.ts\nfunction strictTupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"strict_tuple\",\n    reference: strictTupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!(dataset.issues && config2.abortEarly) && this.items.length < input.length) {\n          const value2 = input[items.length];\n          _addIssue(this, \"type\", dataset, config2, {\n            input: value2,\n            expected: \"never\",\n            path: [\n              {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key: this.items.length,\n                value: value2\n              }\n            ]\n          });\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/string/string.ts\nfunction string(message) {\n  return {\n    kind: \"schema\",\n    type: \"string\",\n    reference: string,\n    expects: \"string\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"string\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n  return {\n    kind: \"schema\",\n    type: \"symbol\",\n    reference: symbol,\n    expects: \"symbol\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (typeof dataset.value === \"symbol\") {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tuple,\n    expects: \"Array\",\n    async: false,\n    items,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple\",\n    reference: tupleAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const itemDatasets = await Promise.all(\n          this.items.map(async (item, key) => {\n            const value2 = input[key];\n            return [\n              key,\n              value2,\n              await item._run({ typed: false, value: value2 }, config2)\n            ];\n          })\n        );\n        for (const [key, value2, itemDataset] of itemDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRest.ts\nfunction tupleWithRest(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRest,\n    expects: \"Array\",\n    async: false,\n    items,\n    rest,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        for (let key = 0; key < this.items.length; key++) {\n          const value2 = input[key];\n          const itemDataset = this.items[key]._run(\n            { typed: false, value: value2 },\n            config2\n          );\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (let key = this.items.length; key < input.length; key++) {\n            const value2 = input[key];\n            const itemDataset = this.rest._run({ typed: false, value: value2 }, config2);\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/tupleWithRest/tupleWithRestAsync.ts\nfunction tupleWithRestAsync(items, rest, message) {\n  return {\n    kind: \"schema\",\n    type: \"tuple_with_rest\",\n    reference: tupleWithRestAsync,\n    expects: \"Array\",\n    async: true,\n    items,\n    rest,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (Array.isArray(input)) {\n        dataset.typed = true;\n        dataset.value = [];\n        const [normalDatasets, restDatasets] = await Promise.all([\n          // Parse schema of each normal item\n          Promise.all(\n            this.items.map(async (item, key) => {\n              const value2 = input[key];\n              return [\n                key,\n                value2,\n                await item._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          ),\n          // Parse other items with rest schema\n          Promise.all(\n            input.slice(this.items.length).map(async (value2, key) => {\n              return [\n                key + this.items.length,\n                value2,\n                await this.rest._run({ typed: false, value: value2 }, config2)\n              ];\n            })\n          )\n        ]);\n        for (const [key, value2, itemDataset] of normalDatasets) {\n          if (itemDataset.issues) {\n            const pathItem = {\n              type: \"array\",\n              origin: \"value\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of itemDataset.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              dataset.issues?.push(issue);\n            }\n            if (!dataset.issues) {\n              dataset.issues = itemDataset.issues;\n            }\n            if (config2.abortEarly) {\n              dataset.typed = false;\n              break;\n            }\n          }\n          if (!itemDataset.typed) {\n            dataset.typed = false;\n          }\n          dataset.value.push(itemDataset.value);\n        }\n        if (!dataset.issues || !config2.abortEarly) {\n          for (const [key, value2, itemDataset] of restDatasets) {\n            if (itemDataset.issues) {\n              const pathItem = {\n                type: \"array\",\n                origin: \"value\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of itemDataset.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                dataset.issues?.push(issue);\n              }\n              if (!dataset.issues) {\n                dataset.issues = itemDataset.issues;\n              }\n              if (config2.abortEarly) {\n                dataset.typed = false;\n                break;\n              }\n            }\n            if (!itemDataset.typed) {\n              dataset.typed = false;\n            }\n            dataset.value.push(itemDataset.value);\n          }\n        }\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n  return {\n    kind: \"schema\",\n    type: \"undefined\",\n    reference: undefined_,\n    expects: \"undefined\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/utils/_subIssues/_subIssues.ts\nfunction _subIssues(datasets) {\n  let issues;\n  if (datasets) {\n    for (const dataset of datasets) {\n      if (issues) {\n        issues.push(...dataset.issues);\n      } else {\n        issues = dataset.issues;\n      }\n    }\n  }\n  return issues;\n}\n\n// src/schemas/union/union.ts\nfunction union(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: union,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \") || \"never\",\n    async: false,\n    options,\n    message,\n    _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, message) {\n  return {\n    kind: \"schema\",\n    type: \"union\",\n    reference: unionAsync,\n    expects: [...new Set(options.map((option) => option.expects))].join(\" | \") || \"never\",\n    async: true,\n    options,\n    message,\n    async _run(dataset, config2) {\n      let validDataset;\n      let typedDatasets;\n      let untypedDatasets;\n      for (const schema of this.options) {\n        const optionDataset = await schema._run(\n          { typed: false, value: dataset.value },\n          config2\n        );\n        if (optionDataset.typed) {\n          if (optionDataset.issues) {\n            if (typedDatasets) {\n              typedDatasets.push(optionDataset);\n            } else {\n              typedDatasets = [optionDataset];\n            }\n          } else {\n            validDataset = optionDataset;\n            break;\n          }\n        } else {\n          if (untypedDatasets) {\n            untypedDatasets.push(optionDataset);\n          } else {\n            untypedDatasets = [optionDataset];\n          }\n        }\n      }\n      if (validDataset) {\n        return validDataset;\n      }\n      if (typedDatasets) {\n        if (typedDatasets.length === 1) {\n          return typedDatasets[0];\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(typedDatasets)\n        });\n        dataset.typed = true;\n      } else if (untypedDatasets?.length === 1) {\n        return untypedDatasets[0];\n      } else {\n        _addIssue(this, \"type\", dataset, config2, {\n          issues: _subIssues(untypedDatasets)\n        });\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown() {\n  return {\n    kind: \"schema\",\n    type: \"unknown\",\n    reference: unknown,\n    expects: \"unknown\",\n    async: false,\n    _run(dataset) {\n      dataset.typed = true;\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/utils/_discriminators/_discriminators.ts\nfunction _discriminators(key, options, set2 = /* @__PURE__ */ new Set()) {\n  for (const schema of options) {\n    if (schema.type === \"variant\") {\n      _discriminators(key, schema.options, set2);\n    } else {\n      set2.add(schema.entries[key].expects);\n    }\n  }\n  return set2;\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, message) {\n  let expectedDiscriminators;\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variant,\n    expects: \"Object\",\n    async: false,\n    key,\n    options,\n    message,\n    _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        const discriminator = input[this.key];\n        if (this.key in input) {\n          let outputDataset;\n          for (const schema of this.options) {\n            if (schema.type === \"variant\" || !schema.entries[this.key]._run(\n              { typed: false, value: discriminator },\n              config2\n            ).issues) {\n              const optionDataset = schema._run(\n                { typed: false, value: input },\n                config2\n              );\n              if (!optionDataset.issues) {\n                return optionDataset;\n              }\n              if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                outputDataset = optionDataset;\n              }\n            }\n          }\n          if (outputDataset) {\n            return outputDataset;\n          }\n        }\n        if (!expectedDiscriminators) {\n          expectedDiscriminators = [..._discriminators(this.key, this.options)].join(\" | \") || \"never\";\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          input: discriminator,\n          expected: expectedDiscriminators,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: discriminator\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, message) {\n  let expectedDiscriminators;\n  return {\n    kind: \"schema\",\n    type: \"variant\",\n    reference: variantAsync,\n    expects: \"Object\",\n    async: true,\n    key,\n    options,\n    message,\n    async _run(dataset, config2) {\n      const input = dataset.value;\n      if (input && typeof input === \"object\") {\n        const discriminator = input[this.key];\n        if (this.key in input) {\n          let outputDataset;\n          for (const schema of this.options) {\n            if (schema.type === \"variant\" || !(await schema.entries[this.key]._run(\n              { typed: false, value: discriminator },\n              config2\n            )).issues) {\n              const optionDataset = await schema._run(\n                { typed: false, value: input },\n                config2\n              );\n              if (!optionDataset.issues) {\n                return optionDataset;\n              }\n              if (!outputDataset || !outputDataset.typed && optionDataset.typed) {\n                outputDataset = optionDataset;\n              }\n            }\n          }\n          if (outputDataset) {\n            return outputDataset;\n          }\n        }\n        if (!expectedDiscriminators) {\n          expectedDiscriminators = [..._discriminators(this.key, this.options)].join(\" | \") || \"never\";\n        }\n        _addIssue(this, \"type\", dataset, config2, {\n          input: discriminator,\n          expected: expectedDiscriminators,\n          path: [\n            {\n              type: \"object\",\n              origin: \"value\",\n              input,\n              key: this.key,\n              value: discriminator\n            }\n          ]\n        });\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/schemas/void/void.ts\nfunction void_(message) {\n  return {\n    kind: \"schema\",\n    type: \"void\",\n    reference: void_,\n    expects: \"void\",\n    async: false,\n    message,\n    _run(dataset, config2) {\n      if (dataset.value === void 0) {\n        dataset.typed = true;\n      } else {\n        _addIssue(this, \"type\", dataset, config2);\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema, message) {\n  return picklist(Object.keys(schema.entries), message);\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys) {\n  const entries = {\n    ...schema.entries\n  };\n  for (const key of keys) {\n    delete entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  if (dataset.issues) {\n    throw new ValiError(dataset.issues);\n  }\n  return dataset.value;\n}\n\n// src/methods/parser/parser.ts\nfunction parser(schema, config2) {\n  const func = (input) => parse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/parser/parserAsync.ts\nfunction parserAsync(schema, config2) {\n  const func = (input) => parseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optional(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, keys) {\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? optionalAsync(schema.entries[key]) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys) {\n  const entries = {};\n  for (const key of keys) {\n    entries[key] = schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/pipe/pipe.ts\nfunction pipe(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    _run(dataset, config2) {\n      for (let index = 0; index < pipe2.length; index++) {\n        if (dataset.issues && (pipe2[index].kind === \"schema\" || pipe2[index].kind === \"transformation\")) {\n          dataset.typed = false;\n          break;\n        }\n        if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n          dataset = pipe2[index]._run(dataset, config2);\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/pipe/pipeAsync.ts\nfunction pipeAsync(...pipe2) {\n  return {\n    ...pipe2[0],\n    pipe: pipe2,\n    async: true,\n    async _run(dataset, config2) {\n      for (let index = 0; index < pipe2.length; index++) {\n        if (dataset.issues && (pipe2[index].kind === \"schema\" || pipe2[index].kind === \"transformation\")) {\n          dataset.typed = false;\n          break;\n        }\n        if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {\n          dataset = await pipe2[index]._run(dataset, config2);\n        }\n      }\n      return dataset;\n    }\n  };\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptional(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3) {\n  const keys = Array.isArray(arg2) ? arg2 : void 0;\n  const message = Array.isArray(arg2) ? arg3 : arg2;\n  const entries = {};\n  for (const key in schema.entries) {\n    entries[key] = !keys || keys.includes(key) ? nonOptionalAsync(schema.entries[key], message) : schema.entries[key];\n  }\n  return { ...schema, entries };\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config2) {\n  const dataset = schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config2) {\n  const dataset = await schema._run(\n    { typed: false, value: input },\n    getGlobalConfig(config2)\n  );\n  return {\n    typed: dataset.typed,\n    success: !dataset.issues,\n    output: dataset.value,\n    issues: dataset.issues\n  };\n}\n\n// src/methods/safeParser/safeParser.ts\nfunction safeParser(schema, config2) {\n  const func = (input) => safeParse(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/safeParser/safeParserAsync.ts\nfunction safeParserAsync(schema, config2) {\n  const func = (input) => safeParseAsync(schema, input, config2);\n  func.schema = schema;\n  func.config = config2;\n  return func;\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\nexport {\n  BIC_REGEX,\n  CUID2_REGEX,\n  DECIMAL_REGEX,\n  EMAIL_REGEX,\n  EMOJI_REGEX,\n  HEXADECIMAL_REGEX,\n  HEX_COLOR_REGEX,\n  IMEI_REGEX,\n  IPV4_REGEX,\n  IPV6_REGEX,\n  IP_REGEX,\n  ISO_DATE_REGEX,\n  ISO_DATE_TIME_REGEX,\n  ISO_TIMESTAMP_REGEX,\n  ISO_TIME_REGEX,\n  ISO_TIME_SECOND_REGEX,\n  ISO_WEEK_REGEX,\n  MAC48_REGEX,\n  MAC64_REGEX,\n  MAC_REGEX,\n  OCTAL_REGEX,\n  ULID_REGEX,\n  UUID_REGEX,\n  ValiError,\n  _addIssue,\n  _isLuhnAlgo,\n  _isValidObjectKey,\n  _stringify,\n  any,\n  array,\n  arrayAsync,\n  awaitAsync,\n  bic,\n  bigint,\n  blob,\n  boolean,\n  brand,\n  bytes,\n  check,\n  checkAsync,\n  checkItems,\n  config,\n  creditCard,\n  cuid2,\n  custom,\n  customAsync,\n  date,\n  decimal,\n  deleteGlobalConfig,\n  deleteGlobalMessage,\n  deleteSchemaMessage,\n  deleteSpecificMessage,\n  email,\n  emoji,\n  empty,\n  endsWith,\n  entriesFromList,\n  enum_ as enum,\n  enum_,\n  everyItem,\n  excludes,\n  fallback,\n  fallbackAsync,\n  file,\n  filterItems,\n  findItem,\n  finite,\n  flatten,\n  forward,\n  forwardAsync,\n  function_ as function,\n  function_,\n  getDefault,\n  getDefaults,\n  getDefaultsAsync,\n  getDotPath,\n  getFallback,\n  getFallbacks,\n  getFallbacksAsync,\n  getGlobalConfig,\n  getGlobalMessage,\n  getSchemaMessage,\n  getSpecificMessage,\n  hash,\n  hexColor,\n  hexadecimal,\n  imei,\n  includes,\n  instance,\n  integer,\n  intersect,\n  intersectAsync,\n  ip,\n  ipv4,\n  ipv6,\n  is,\n  isOfKind,\n  isOfType,\n  isValiError,\n  isoDate,\n  isoDateTime,\n  isoTime,\n  isoTimeSecond,\n  isoTimestamp,\n  isoWeek,\n  keyof,\n  lazy,\n  lazyAsync,\n  length,\n  literal,\n  looseObject,\n  looseObjectAsync,\n  looseTuple,\n  looseTupleAsync,\n  mac,\n  mac48,\n  mac64,\n  map,\n  mapAsync,\n  mapItems,\n  maxBytes,\n  maxLength,\n  maxSize,\n  maxValue,\n  mimeType,\n  minBytes,\n  minLength,\n  minSize,\n  minValue,\n  multipleOf,\n  nan,\n  never,\n  nonEmpty,\n  nonNullable,\n  nonNullableAsync,\n  nonNullish,\n  nonNullishAsync,\n  nonOptional,\n  nonOptionalAsync,\n  normalize,\n  notBytes,\n  notLength,\n  notSize,\n  notValue,\n  null_ as null,\n  null_,\n  nullable,\n  nullableAsync,\n  nullish,\n  nullishAsync,\n  number,\n  object,\n  objectAsync,\n  objectWithRest,\n  objectWithRestAsync,\n  octal,\n  omit,\n  optional,\n  optionalAsync,\n  parse,\n  parseAsync,\n  parser,\n  parserAsync,\n  partial,\n  partialAsync,\n  partialCheck,\n  partialCheckAsync,\n  pick,\n  picklist,\n  pipe,\n  pipeAsync,\n  promise,\n  rawCheck,\n  rawCheckAsync,\n  rawTransform,\n  rawTransformAsync,\n  readonly,\n  record,\n  recordAsync,\n  reduceItems,\n  regex,\n  required,\n  requiredAsync,\n  safeInteger,\n  safeParse,\n  safeParseAsync,\n  safeParser,\n  safeParserAsync,\n  set,\n  setAsync,\n  setGlobalConfig,\n  setGlobalMessage,\n  setSchemaMessage,\n  setSpecificMessage,\n  size,\n  someItem,\n  sortItems,\n  startsWith,\n  strictObject,\n  strictObjectAsync,\n  strictTuple,\n  strictTupleAsync,\n  string,\n  symbol,\n  toLowerCase,\n  toMaxValue,\n  toMinValue,\n  toUpperCase,\n  transform,\n  transformAsync,\n  trim,\n  trimEnd,\n  trimStart,\n  tuple,\n  tupleAsync,\n  tupleWithRest,\n  tupleWithRestAsync,\n  ulid,\n  undefined_ as undefined,\n  undefined_,\n  union,\n  unionAsync,\n  unknown,\n  unwrap,\n  url,\n  uuid,\n  value,\n  variant,\n  variantAsync,\n  void_ as void,\n  void_\n};\n","import {\n  array,\n  boolean,\n  check,\n  integer,\n  lazy,\n  literal,\n  nullable,\n  nullish,\n  number,\n  object,\n  optional,\n  pipe,\n  record,\n  string,\n  transform,\n  tuple,\n  union,\n  unknown\n} from \"valibot\";\nimport { isValidSuiAddress, normalizeSuiAddress } from \"../../utils/sui-types.js\";\nfunction safeEnum(options) {\n  const unionOptions = Object.entries(options).map(([key, value]) => object({ [key]: value }));\n  return pipe(\n    union(unionOptions),\n    transform((value) => ({\n      ...value,\n      $kind: Object.keys(value)[0]\n    }))\n  );\n}\nconst SuiAddress = pipe(\n  string(),\n  transform((value) => normalizeSuiAddress(value)),\n  check(isValidSuiAddress)\n);\nconst ObjectID = SuiAddress;\nconst BCSBytes = string();\nconst JsonU64 = pipe(\n  union([string(), pipe(number(), integer())]),\n  check((val) => {\n    try {\n      BigInt(val);\n      return BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;\n    } catch {\n      return false;\n    }\n  }, \"Invalid u64\")\n);\nconst ObjectRef = object({\n  objectId: SuiAddress,\n  version: JsonU64,\n  digest: string()\n});\nconst Argument = pipe(\n  union([\n    object({ GasCoin: literal(true) }),\n    object({ Input: pipe(number(), integer()), type: optional(literal(\"pure\")) }),\n    object({ Input: pipe(number(), integer()), type: optional(literal(\"object\")) }),\n    object({ Result: pipe(number(), integer()) }),\n    object({ NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]) })\n  ]),\n  transform((value) => ({\n    ...value,\n    $kind: Object.keys(value)[0]\n  }))\n  // Defined manually to add `type?: 'pure' | 'object'` to Input\n);\nconst GasData = object({\n  budget: nullable(JsonU64),\n  price: nullable(JsonU64),\n  owner: nullable(SuiAddress),\n  payment: nullable(array(ObjectRef))\n});\nconst StructTag = object({\n  address: string(),\n  module: string(),\n  name: string(),\n  // type_params in rust, should be updated to use camelCase\n  typeParams: array(string())\n});\nconst OpenMoveTypeSignatureBody = union([\n  literal(\"address\"),\n  literal(\"bool\"),\n  literal(\"u8\"),\n  literal(\"u16\"),\n  literal(\"u32\"),\n  literal(\"u64\"),\n  literal(\"u128\"),\n  literal(\"u256\"),\n  object({ vector: lazy(() => OpenMoveTypeSignatureBody) }),\n  object({\n    datatype: object({\n      package: string(),\n      module: string(),\n      type: string(),\n      typeParameters: array(lazy(() => OpenMoveTypeSignatureBody))\n    })\n  }),\n  object({ typeParameter: pipe(number(), integer()) })\n]);\nconst OpenMoveTypeSignature = object({\n  ref: nullable(union([literal(\"&\"), literal(\"&mut\")])),\n  body: OpenMoveTypeSignatureBody\n});\nconst ProgrammableMoveCall = object({\n  package: ObjectID,\n  module: string(),\n  function: string(),\n  // snake case in rust\n  typeArguments: array(string()),\n  arguments: array(Argument),\n  _argumentTypes: optional(nullable(array(OpenMoveTypeSignature)))\n});\nconst $Intent = object({\n  name: string(),\n  inputs: record(string(), union([Argument, array(Argument)])),\n  data: record(string(), unknown())\n});\nconst Command = safeEnum({\n  MoveCall: ProgrammableMoveCall,\n  TransferObjects: object({\n    objects: array(Argument),\n    address: Argument\n  }),\n  SplitCoins: object({\n    coin: Argument,\n    amounts: array(Argument)\n  }),\n  MergeCoins: object({\n    destination: Argument,\n    sources: array(Argument)\n  }),\n  Publish: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID)\n  }),\n  MakeMoveVec: object({\n    type: nullable(string()),\n    elements: array(Argument)\n  }),\n  Upgrade: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID),\n    package: ObjectID,\n    ticket: Argument\n  }),\n  $Intent\n});\nconst ObjectArg = safeEnum({\n  ImmOrOwnedObject: ObjectRef,\n  SharedObject: object({\n    objectId: ObjectID,\n    // snake case in rust\n    initialSharedVersion: JsonU64,\n    mutable: boolean()\n  }),\n  Receiving: ObjectRef\n});\nconst CallArg = safeEnum({\n  Object: ObjectArg,\n  Pure: object({\n    bytes: BCSBytes\n  }),\n  UnresolvedPure: object({\n    value: unknown()\n  }),\n  UnresolvedObject: object({\n    objectId: ObjectID,\n    version: optional(nullable(JsonU64)),\n    digest: optional(nullable(string())),\n    initialSharedVersion: optional(nullable(JsonU64))\n  })\n});\nconst NormalizedCallArg = safeEnum({\n  Object: ObjectArg,\n  Pure: object({\n    bytes: BCSBytes\n  })\n});\nconst TransactionExpiration = safeEnum({\n  None: literal(true),\n  Epoch: JsonU64\n});\nconst TransactionData = object({\n  version: literal(2),\n  sender: nullish(SuiAddress),\n  expiration: nullish(TransactionExpiration),\n  gasData: GasData,\n  inputs: array(CallArg),\n  commands: array(Command)\n});\nexport {\n  $Intent,\n  Argument,\n  BCSBytes,\n  Command,\n  GasData,\n  JsonU64,\n  NormalizedCallArg,\n  ObjectArg,\n  ObjectID,\n  ObjectRef,\n  OpenMoveTypeSignature,\n  OpenMoveTypeSignatureBody,\n  StructTag,\n  SuiAddress,\n  TransactionData,\n  TransactionExpiration,\n  safeEnum\n};\n//# sourceMappingURL=internal.js.map\n","import { toBase64 } from \"@mysten/bcs\";\nimport { parse } from \"valibot\";\nimport { normalizeSuiObjectId } from \"../utils/sui-types.js\";\nimport { Argument } from \"./data/internal.js\";\nvar UpgradePolicy = /* @__PURE__ */ ((UpgradePolicy2) => {\n  UpgradePolicy2[UpgradePolicy2[\"COMPATIBLE\"] = 0] = \"COMPATIBLE\";\n  UpgradePolicy2[UpgradePolicy2[\"ADDITIVE\"] = 128] = \"ADDITIVE\";\n  UpgradePolicy2[UpgradePolicy2[\"DEP_ONLY\"] = 192] = \"DEP_ONLY\";\n  return UpgradePolicy2;\n})(UpgradePolicy || {});\nconst Commands = {\n  MoveCall(input) {\n    const [pkg, mod = \"\", fn = \"\"] = \"target\" in input ? input.target.split(\"::\") : [input.package, input.module, input.function];\n    return {\n      $kind: \"MoveCall\",\n      MoveCall: {\n        package: pkg,\n        module: mod,\n        function: fn,\n        typeArguments: input.typeArguments ?? [],\n        arguments: input.arguments ?? []\n      }\n    };\n  },\n  TransferObjects(objects, address) {\n    return {\n      $kind: \"TransferObjects\",\n      TransferObjects: {\n        objects: objects.map((o) => parse(Argument, o)),\n        address: parse(Argument, address)\n      }\n    };\n  },\n  SplitCoins(coin, amounts) {\n    return {\n      $kind: \"SplitCoins\",\n      SplitCoins: {\n        coin: parse(Argument, coin),\n        amounts: amounts.map((o) => parse(Argument, o))\n      }\n    };\n  },\n  MergeCoins(destination, sources) {\n    return {\n      $kind: \"MergeCoins\",\n      MergeCoins: {\n        destination: parse(Argument, destination),\n        sources: sources.map((o) => parse(Argument, o))\n      }\n    };\n  },\n  Publish({\n    modules,\n    dependencies\n  }) {\n    return {\n      $kind: \"Publish\",\n      Publish: {\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? module : toBase64(new Uint8Array(module))\n        ),\n        dependencies: dependencies.map((dep) => normalizeSuiObjectId(dep))\n      }\n    };\n  },\n  Upgrade({\n    modules,\n    dependencies,\n    package: packageId,\n    ticket\n  }) {\n    return {\n      $kind: \"Upgrade\",\n      Upgrade: {\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? module : toBase64(new Uint8Array(module))\n        ),\n        dependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n        package: packageId,\n        ticket: parse(Argument, ticket)\n      }\n    };\n  },\n  MakeMoveVec({\n    type,\n    elements\n  }) {\n    return {\n      $kind: \"MakeMoveVec\",\n      MakeMoveVec: {\n        type: type ?? null,\n        elements: elements.map((o) => parse(Argument, o))\n      }\n    };\n  },\n  Intent({\n    name,\n    inputs = {},\n    data = {}\n  }) {\n    return {\n      $kind: \"$Intent\",\n      $Intent: {\n        name,\n        inputs: Object.fromEntries(\n          Object.entries(inputs).map(([key, value]) => [\n            key,\n            Array.isArray(value) ? value.map((o) => parse(Argument, o)) : parse(Argument, value)\n          ])\n        ),\n        data\n      }\n    };\n  }\n};\nexport {\n  Commands,\n  UpgradePolicy\n};\n//# sourceMappingURL=Commands.js.map\n","import { fromBase64, toBase64 } from \"@mysten/bcs\";\nimport {\n  array,\n  bigint,\n  boolean,\n  check,\n  integer,\n  is,\n  lazy,\n  literal,\n  nullable,\n  nullish,\n  number,\n  object,\n  optional,\n  parse,\n  pipe,\n  string,\n  union,\n  unknown\n} from \"valibot\";\nimport { TypeTagSerializer } from \"../../bcs/index.js\";\nimport { JsonU64, ObjectID, safeEnum, TransactionData } from \"./internal.js\";\nconst ObjectRef = object({\n  digest: string(),\n  objectId: string(),\n  version: union([pipe(number(), integer()), string(), bigint()])\n});\nconst ObjectArg = safeEnum({\n  ImmOrOwned: ObjectRef,\n  Shared: object({\n    objectId: ObjectID,\n    initialSharedVersion: JsonU64,\n    mutable: boolean()\n  }),\n  Receiving: ObjectRef\n});\nconst NormalizedCallArg = safeEnum({\n  Object: ObjectArg,\n  Pure: array(pipe(number(), integer()))\n});\nconst TransactionInput = union([\n  object({\n    kind: literal(\"Input\"),\n    index: pipe(number(), integer()),\n    value: unknown(),\n    type: optional(literal(\"object\"))\n  }),\n  object({\n    kind: literal(\"Input\"),\n    index: pipe(number(), integer()),\n    value: unknown(),\n    type: literal(\"pure\")\n  })\n]);\nconst TransactionExpiration = union([\n  object({ Epoch: pipe(number(), integer()) }),\n  object({ None: nullable(literal(true)) })\n]);\nconst StringEncodedBigint = pipe(\n  union([number(), string(), bigint()]),\n  check((val) => {\n    if (![\"string\", \"number\", \"bigint\"].includes(typeof val)) return false;\n    try {\n      BigInt(val);\n      return true;\n    } catch {\n      return false;\n    }\n  })\n);\nconst TypeTag = union([\n  object({ bool: nullable(literal(true)) }),\n  object({ u8: nullable(literal(true)) }),\n  object({ u64: nullable(literal(true)) }),\n  object({ u128: nullable(literal(true)) }),\n  object({ address: nullable(literal(true)) }),\n  object({ signer: nullable(literal(true)) }),\n  object({ vector: lazy(() => TypeTag) }),\n  object({ struct: lazy(() => StructTag) }),\n  object({ u16: nullable(literal(true)) }),\n  object({ u32: nullable(literal(true)) }),\n  object({ u256: nullable(literal(true)) })\n]);\nconst StructTag = object({\n  address: string(),\n  module: string(),\n  name: string(),\n  typeParams: array(TypeTag)\n});\nconst GasConfig = object({\n  budget: optional(StringEncodedBigint),\n  price: optional(StringEncodedBigint),\n  payment: optional(array(ObjectRef)),\n  owner: optional(string())\n});\nconst TransactionArgumentTypes = [\n  TransactionInput,\n  object({ kind: literal(\"GasCoin\") }),\n  object({ kind: literal(\"Result\"), index: pipe(number(), integer()) }),\n  object({\n    kind: literal(\"NestedResult\"),\n    index: pipe(number(), integer()),\n    resultIndex: pipe(number(), integer())\n  })\n];\nconst TransactionArgument = union([...TransactionArgumentTypes]);\nconst MoveCallTransaction = object({\n  kind: literal(\"MoveCall\"),\n  target: pipe(\n    string(),\n    check((target) => target.split(\"::\").length === 3)\n  ),\n  typeArguments: array(string()),\n  arguments: array(TransactionArgument)\n});\nconst TransferObjectsTransaction = object({\n  kind: literal(\"TransferObjects\"),\n  objects: array(TransactionArgument),\n  address: TransactionArgument\n});\nconst SplitCoinsTransaction = object({\n  kind: literal(\"SplitCoins\"),\n  coin: TransactionArgument,\n  amounts: array(TransactionArgument)\n});\nconst MergeCoinsTransaction = object({\n  kind: literal(\"MergeCoins\"),\n  destination: TransactionArgument,\n  sources: array(TransactionArgument)\n});\nconst MakeMoveVecTransaction = object({\n  kind: literal(\"MakeMoveVec\"),\n  type: union([object({ Some: TypeTag }), object({ None: nullable(literal(true)) })]),\n  objects: array(TransactionArgument)\n});\nconst PublishTransaction = object({\n  kind: literal(\"Publish\"),\n  modules: array(array(pipe(number(), integer()))),\n  dependencies: array(string())\n});\nconst UpgradeTransaction = object({\n  kind: literal(\"Upgrade\"),\n  modules: array(array(pipe(number(), integer()))),\n  dependencies: array(string()),\n  packageId: string(),\n  ticket: TransactionArgument\n});\nconst TransactionTypes = [\n  MoveCallTransaction,\n  TransferObjectsTransaction,\n  SplitCoinsTransaction,\n  MergeCoinsTransaction,\n  PublishTransaction,\n  UpgradeTransaction,\n  MakeMoveVecTransaction\n];\nconst TransactionType = union([...TransactionTypes]);\nconst SerializedTransactionDataV1 = object({\n  version: literal(1),\n  sender: optional(string()),\n  expiration: nullish(TransactionExpiration),\n  gasConfig: GasConfig,\n  inputs: array(TransactionInput),\n  transactions: array(TransactionType)\n});\nfunction serializeV1TransactionData(transactionData) {\n  const inputs = transactionData.inputs.map(\n    (input, index) => {\n      if (input.Object) {\n        return {\n          kind: \"Input\",\n          index,\n          value: {\n            Object: input.Object.ImmOrOwnedObject ? {\n              ImmOrOwned: input.Object.ImmOrOwnedObject\n            } : input.Object.Receiving ? {\n              Receiving: {\n                digest: input.Object.Receiving.digest,\n                version: input.Object.Receiving.version,\n                objectId: input.Object.Receiving.objectId\n              }\n            } : {\n              Shared: {\n                mutable: input.Object.SharedObject.mutable,\n                initialSharedVersion: input.Object.SharedObject.initialSharedVersion,\n                objectId: input.Object.SharedObject.objectId\n              }\n            }\n          },\n          type: \"object\"\n        };\n      }\n      if (input.Pure) {\n        return {\n          kind: \"Input\",\n          index,\n          value: {\n            Pure: Array.from(fromBase64(input.Pure.bytes))\n          },\n          type: \"pure\"\n        };\n      }\n      if (input.UnresolvedPure) {\n        return {\n          kind: \"Input\",\n          type: \"pure\",\n          index,\n          value: input.UnresolvedPure.value\n        };\n      }\n      if (input.UnresolvedObject) {\n        return {\n          kind: \"Input\",\n          type: \"object\",\n          index,\n          value: input.UnresolvedObject.objectId\n        };\n      }\n      throw new Error(\"Invalid input\");\n    }\n  );\n  return {\n    version: 1,\n    sender: transactionData.sender ?? void 0,\n    expiration: transactionData.expiration?.$kind === \"Epoch\" ? { Epoch: Number(transactionData.expiration.Epoch) } : transactionData.expiration ? { None: true } : null,\n    gasConfig: {\n      owner: transactionData.gasData.owner ?? void 0,\n      budget: transactionData.gasData.budget ?? void 0,\n      price: transactionData.gasData.price ?? void 0,\n      payment: transactionData.gasData.payment ?? void 0\n    },\n    inputs,\n    transactions: transactionData.commands.map((command) => {\n      if (command.MakeMoveVec) {\n        return {\n          kind: \"MakeMoveVec\",\n          type: command.MakeMoveVec.type === null ? { None: true } : { Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },\n          objects: command.MakeMoveVec.elements.map(\n            (arg) => convertTransactionArgument(arg, inputs)\n          )\n        };\n      }\n      if (command.MergeCoins) {\n        return {\n          kind: \"MergeCoins\",\n          destination: convertTransactionArgument(command.MergeCoins.destination, inputs),\n          sources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.MoveCall) {\n        return {\n          kind: \"MoveCall\",\n          target: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,\n          typeArguments: command.MoveCall.typeArguments,\n          arguments: command.MoveCall.arguments.map(\n            (arg) => convertTransactionArgument(arg, inputs)\n          )\n        };\n      }\n      if (command.Publish) {\n        return {\n          kind: \"Publish\",\n          modules: command.Publish.modules.map((mod) => Array.from(fromBase64(mod))),\n          dependencies: command.Publish.dependencies\n        };\n      }\n      if (command.SplitCoins) {\n        return {\n          kind: \"SplitCoins\",\n          coin: convertTransactionArgument(command.SplitCoins.coin, inputs),\n          amounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs))\n        };\n      }\n      if (command.TransferObjects) {\n        return {\n          kind: \"TransferObjects\",\n          objects: command.TransferObjects.objects.map(\n            (arg) => convertTransactionArgument(arg, inputs)\n          ),\n          address: convertTransactionArgument(command.TransferObjects.address, inputs)\n        };\n      }\n      if (command.Upgrade) {\n        return {\n          kind: \"Upgrade\",\n          modules: command.Upgrade.modules.map((mod) => Array.from(fromBase64(mod))),\n          dependencies: command.Upgrade.dependencies,\n          packageId: command.Upgrade.package,\n          ticket: convertTransactionArgument(command.Upgrade.ticket, inputs)\n        };\n      }\n      throw new Error(`Unknown transaction ${Object.keys(command)}`);\n    })\n  };\n}\nfunction convertTransactionArgument(arg, inputs) {\n  if (arg.$kind === \"GasCoin\") {\n    return { kind: \"GasCoin\" };\n  }\n  if (arg.$kind === \"Result\") {\n    return { kind: \"Result\", index: arg.Result };\n  }\n  if (arg.$kind === \"NestedResult\") {\n    return { kind: \"NestedResult\", index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };\n  }\n  if (arg.$kind === \"Input\") {\n    return inputs[arg.Input];\n  }\n  throw new Error(`Invalid argument ${Object.keys(arg)}`);\n}\nfunction transactionDataFromV1(data) {\n  return parse(TransactionData, {\n    version: 2,\n    sender: data.sender ?? null,\n    expiration: data.expiration ? \"Epoch\" in data.expiration ? { Epoch: data.expiration.Epoch } : { None: true } : null,\n    gasData: {\n      owner: data.gasConfig.owner ?? null,\n      budget: data.gasConfig.budget?.toString() ?? null,\n      price: data.gasConfig.price?.toString() ?? null,\n      payment: data.gasConfig.payment?.map((ref) => ({\n        digest: ref.digest,\n        objectId: ref.objectId,\n        version: ref.version.toString()\n      })) ?? null\n    },\n    inputs: data.inputs.map((input) => {\n      if (input.kind === \"Input\") {\n        if (is(NormalizedCallArg, input.value)) {\n          const value = parse(NormalizedCallArg, input.value);\n          if (value.Object) {\n            if (value.Object.ImmOrOwned) {\n              return {\n                Object: {\n                  ImmOrOwnedObject: {\n                    objectId: value.Object.ImmOrOwned.objectId,\n                    version: String(value.Object.ImmOrOwned.version),\n                    digest: value.Object.ImmOrOwned.digest\n                  }\n                }\n              };\n            }\n            if (value.Object.Shared) {\n              return {\n                Object: {\n                  SharedObject: {\n                    mutable: value.Object.Shared.mutable ?? null,\n                    initialSharedVersion: value.Object.Shared.initialSharedVersion,\n                    objectId: value.Object.Shared.objectId\n                  }\n                }\n              };\n            }\n            if (value.Object.Receiving) {\n              return {\n                Object: {\n                  Receiving: {\n                    digest: value.Object.Receiving.digest,\n                    version: String(value.Object.Receiving.version),\n                    objectId: value.Object.Receiving.objectId\n                  }\n                }\n              };\n            }\n            throw new Error(\"Invalid object input\");\n          }\n          return {\n            Pure: {\n              bytes: toBase64(new Uint8Array(value.Pure))\n            }\n          };\n        }\n        if (input.type === \"object\") {\n          return {\n            UnresolvedObject: {\n              objectId: input.value\n            }\n          };\n        }\n        return {\n          UnresolvedPure: {\n            value: input.value\n          }\n        };\n      }\n      throw new Error(\"Invalid input\");\n    }),\n    commands: data.transactions.map((transaction) => {\n      switch (transaction.kind) {\n        case \"MakeMoveVec\":\n          return {\n            MakeMoveVec: {\n              type: \"Some\" in transaction.type ? TypeTagSerializer.tagToString(transaction.type.Some) : null,\n              elements: transaction.objects.map((arg) => parseV1TransactionArgument(arg))\n            }\n          };\n        case \"MergeCoins\": {\n          return {\n            MergeCoins: {\n              destination: parseV1TransactionArgument(transaction.destination),\n              sources: transaction.sources.map((arg) => parseV1TransactionArgument(arg))\n            }\n          };\n        }\n        case \"MoveCall\": {\n          const [pkg, mod, fn] = transaction.target.split(\"::\");\n          return {\n            MoveCall: {\n              package: pkg,\n              module: mod,\n              function: fn,\n              typeArguments: transaction.typeArguments,\n              arguments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg))\n            }\n          };\n        }\n        case \"Publish\": {\n          return {\n            Publish: {\n              modules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n              dependencies: transaction.dependencies\n            }\n          };\n        }\n        case \"SplitCoins\": {\n          return {\n            SplitCoins: {\n              coin: parseV1TransactionArgument(transaction.coin),\n              amounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg))\n            }\n          };\n        }\n        case \"TransferObjects\": {\n          return {\n            TransferObjects: {\n              objects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n              address: parseV1TransactionArgument(transaction.address)\n            }\n          };\n        }\n        case \"Upgrade\": {\n          return {\n            Upgrade: {\n              modules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n              dependencies: transaction.dependencies,\n              package: transaction.packageId,\n              ticket: parseV1TransactionArgument(transaction.ticket)\n            }\n          };\n        }\n      }\n      throw new Error(`Unknown transaction ${Object.keys(transaction)}`);\n    })\n  });\n}\nfunction parseV1TransactionArgument(arg) {\n  switch (arg.kind) {\n    case \"GasCoin\": {\n      return { GasCoin: true };\n    }\n    case \"Result\":\n      return { Result: arg.index };\n    case \"NestedResult\": {\n      return { NestedResult: [arg.index, arg.resultIndex] };\n    }\n    case \"Input\": {\n      return { Input: arg.index };\n    }\n  }\n}\nexport {\n  NormalizedCallArg,\n  ObjectRef,\n  SerializedTransactionDataV1,\n  StructTag,\n  TransactionArgument,\n  TypeTag,\n  serializeV1TransactionData,\n  transactionDataFromV1\n};\n//# sourceMappingURL=v1.js.map\n","import {\n  array,\n  boolean,\n  integer,\n  literal,\n  nullable,\n  nullish,\n  number,\n  object,\n  optional,\n  pipe,\n  record,\n  string,\n  tuple,\n  union,\n  unknown\n} from \"valibot\";\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, SuiAddress } from \"./internal.js\";\nfunction enumUnion(options) {\n  return union(\n    Object.entries(options).map(([key, value]) => object({ [key]: value }))\n  );\n}\nconst Argument = enumUnion({\n  GasCoin: literal(true),\n  Input: pipe(number(), integer()),\n  Result: pipe(number(), integer()),\n  NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())])\n});\nconst GasData = object({\n  budget: nullable(JsonU64),\n  price: nullable(JsonU64),\n  owner: nullable(SuiAddress),\n  payment: nullable(array(ObjectRef))\n});\nconst ProgrammableMoveCall = object({\n  package: ObjectID,\n  module: string(),\n  function: string(),\n  // snake case in rust\n  typeArguments: array(string()),\n  arguments: array(Argument)\n});\nconst $Intent = object({\n  name: string(),\n  inputs: record(string(), union([Argument, array(Argument)])),\n  data: record(string(), unknown())\n});\nconst Command = enumUnion({\n  MoveCall: ProgrammableMoveCall,\n  TransferObjects: object({\n    objects: array(Argument),\n    address: Argument\n  }),\n  SplitCoins: object({\n    coin: Argument,\n    amounts: array(Argument)\n  }),\n  MergeCoins: object({\n    destination: Argument,\n    sources: array(Argument)\n  }),\n  Publish: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID)\n  }),\n  MakeMoveVec: object({\n    type: nullable(string()),\n    elements: array(Argument)\n  }),\n  Upgrade: object({\n    modules: array(BCSBytes),\n    dependencies: array(ObjectID),\n    package: ObjectID,\n    ticket: Argument\n  }),\n  $Intent\n});\nconst ObjectArg = enumUnion({\n  ImmOrOwnedObject: ObjectRef,\n  SharedObject: object({\n    objectId: ObjectID,\n    // snake case in rust\n    initialSharedVersion: JsonU64,\n    mutable: boolean()\n  }),\n  Receiving: ObjectRef\n});\nconst CallArg = enumUnion({\n  Object: ObjectArg,\n  Pure: object({\n    bytes: BCSBytes\n  }),\n  UnresolvedPure: object({\n    value: unknown()\n  }),\n  UnresolvedObject: object({\n    objectId: ObjectID,\n    version: optional(nullable(JsonU64)),\n    digest: optional(nullable(string())),\n    initialSharedVersion: optional(nullable(JsonU64))\n  })\n});\nconst TransactionExpiration = enumUnion({\n  None: literal(true),\n  Epoch: JsonU64\n});\nconst SerializedTransactionDataV2 = object({\n  version: literal(2),\n  sender: nullish(SuiAddress),\n  expiration: nullish(TransactionExpiration),\n  gasData: GasData,\n  inputs: array(CallArg),\n  commands: array(Command)\n});\nexport {\n  SerializedTransactionDataV2\n};\n//# sourceMappingURL=v2.js.map\n","import { parse } from \"valibot\";\nimport { bcs } from \"../bcs/index.js\";\nimport { normalizeSuiAddress, normalizeSuiObjectId, SUI_TYPE_ARG } from \"../utils/index.js\";\nimport { ObjectRef } from \"./data/internal.js\";\nimport { Inputs } from \"./Inputs.js\";\nimport { getPureBcsSchema, isTxContext, normalizedTypeToMoveTypeSignature } from \"./serializer.js\";\nconst MAX_OBJECTS_PER_FETCH = 50;\nconst GAS_SAFE_OVERHEAD = 1000n;\nconst MAX_GAS = 5e10;\nasync function resolveTransactionData(transactionData, options, next) {\n  await normalizeInputs(transactionData, options);\n  await resolveObjectReferences(transactionData, options);\n  if (!options.onlyTransactionKind) {\n    await setGasPrice(transactionData, options);\n    await setGasBudget(transactionData, options);\n    await setGasPayment(transactionData, options);\n  }\n  await validate(transactionData);\n  return await next();\n}\nasync function setGasPrice(transactionData, options) {\n  if (!transactionData.gasConfig.price) {\n    transactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());\n  }\n}\nasync function setGasBudget(transactionData, options) {\n  if (transactionData.gasConfig.budget) {\n    return;\n  }\n  const dryRunResult = await getClient(options).dryRunTransactionBlock({\n    transactionBlock: transactionData.build({\n      overrides: {\n        gasData: {\n          budget: String(MAX_GAS),\n          payment: []\n        }\n      }\n    })\n  });\n  if (dryRunResult.effects.status.status !== \"success\") {\n    throw new Error(\n      `Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n      { cause: dryRunResult }\n    );\n  }\n  const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);\n  const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n  const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost) - BigInt(dryRunResult.effects.gasUsed.storageRebate);\n  transactionData.gasConfig.budget = String(\n    gasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead\n  );\n}\nasync function setGasPayment(transactionData, options) {\n  if (!transactionData.gasConfig.payment) {\n    const coins = await getClient(options).getCoins({\n      owner: transactionData.gasConfig.owner || transactionData.sender,\n      coinType: SUI_TYPE_ARG\n    });\n    const paymentCoins = coins.data.filter((coin) => {\n      const matchingInput = transactionData.inputs.find((input) => {\n        if (input.Object?.ImmOrOwnedObject) {\n          return coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;\n        }\n        return false;\n      });\n      return !matchingInput;\n    }).map((coin) => ({\n      objectId: coin.coinObjectId,\n      digest: coin.digest,\n      version: coin.version\n    }));\n    if (!paymentCoins.length) {\n      throw new Error(\"No valid gas coins found for the transaction.\");\n    }\n    transactionData.gasConfig.payment = paymentCoins.map((payment) => parse(ObjectRef, payment));\n  }\n}\nasync function resolveObjectReferences(transactionData, options) {\n  const objectsToResolve = transactionData.inputs.filter((input) => {\n    return input.UnresolvedObject && !(input.UnresolvedObject.version || input.UnresolvedObject?.initialSharedVersion);\n  });\n  const dedupedIds = [\n    ...new Set(\n      objectsToResolve.map((input) => normalizeSuiObjectId(input.UnresolvedObject.objectId))\n    )\n  ];\n  const objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];\n  const resolved = (await Promise.all(\n    objectChunks.map(\n      (chunk2) => getClient(options).multiGetObjects({\n        ids: chunk2,\n        options: { showOwner: true }\n      })\n    )\n  )).flat();\n  const responsesById = new Map(\n    dedupedIds.map((id, index) => {\n      return [id, resolved[index]];\n    })\n  );\n  const invalidObjects = Array.from(responsesById).filter(([_, obj]) => obj.error).map(([_, obj]) => JSON.stringify(obj.error));\n  if (invalidObjects.length) {\n    throw new Error(`The following input objects are invalid: ${invalidObjects.join(\", \")}`);\n  }\n  const objects = resolved.map((object) => {\n    if (object.error || !object.data) {\n      throw new Error(`Failed to fetch object: ${object.error}`);\n    }\n    const owner = object.data.owner;\n    const initialSharedVersion = owner && typeof owner === \"object\" && \"Shared\" in owner ? owner.Shared.initial_shared_version : null;\n    return {\n      objectId: object.data.objectId,\n      digest: object.data.digest,\n      version: object.data.version,\n      initialSharedVersion\n    };\n  });\n  const objectsById = new Map(\n    dedupedIds.map((id, index) => {\n      return [id, objects[index]];\n    })\n  );\n  for (const [index, input] of transactionData.inputs.entries()) {\n    if (!input.UnresolvedObject) {\n      continue;\n    }\n    let updated;\n    const id = normalizeSuiAddress(input.UnresolvedObject.objectId);\n    const object = objectsById.get(id);\n    if (input.UnresolvedObject.initialSharedVersion ?? object?.initialSharedVersion) {\n      updated = Inputs.SharedObjectRef({\n        objectId: id,\n        initialSharedVersion: input.UnresolvedObject.initialSharedVersion || object?.initialSharedVersion,\n        mutable: isUsedAsMutable(transactionData, index)\n      });\n    } else if (isUsedAsReceiving(transactionData, index)) {\n      updated = Inputs.ReceivingRef(\n        {\n          objectId: id,\n          digest: input.UnresolvedObject.digest ?? object?.digest,\n          version: input.UnresolvedObject.version ?? object?.version\n        }\n      );\n    }\n    transactionData.inputs[transactionData.inputs.indexOf(input)] = updated ?? Inputs.ObjectRef({\n      objectId: id,\n      digest: input.UnresolvedObject.digest ?? object?.digest,\n      version: input.UnresolvedObject.version ?? object?.version\n    });\n  }\n}\nasync function normalizeInputs(transactionData, options) {\n  const { inputs, commands } = transactionData;\n  const moveCallsToResolve = [];\n  const moveFunctionsToResolve = /* @__PURE__ */ new Set();\n  commands.forEach((command) => {\n    if (command.MoveCall) {\n      if (command.MoveCall._argumentTypes) {\n        return;\n      }\n      const inputs2 = command.MoveCall.arguments.map((arg) => {\n        if (arg.$kind === \"Input\") {\n          return transactionData.inputs[arg.Input];\n        }\n        return null;\n      });\n      const needsResolution = inputs2.some(\n        (input) => input?.UnresolvedPure || input?.UnresolvedObject\n      );\n      if (needsResolution) {\n        const functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;\n        moveFunctionsToResolve.add(functionName);\n        moveCallsToResolve.push(command.MoveCall);\n      }\n    }\n    switch (command.$kind) {\n      case \"SplitCoins\":\n        command.SplitCoins.amounts.forEach((amount) => {\n          normalizeRawArgument(amount, bcs.U64, transactionData);\n        });\n        break;\n      case \"TransferObjects\":\n        normalizeRawArgument(command.TransferObjects.address, bcs.Address, transactionData);\n        break;\n    }\n  });\n  const moveFunctionParameters = /* @__PURE__ */ new Map();\n  if (moveFunctionsToResolve.size > 0) {\n    const client = getClient(options);\n    await Promise.all(\n      [...moveFunctionsToResolve].map(async (functionName) => {\n        const [packageId, moduleId, functionId] = functionName.split(\"::\");\n        const def = await client.getNormalizedMoveFunction({\n          package: packageId,\n          module: moduleId,\n          function: functionId\n        });\n        moveFunctionParameters.set(\n          functionName,\n          def.parameters.map((param) => normalizedTypeToMoveTypeSignature(param))\n        );\n      })\n    );\n  }\n  if (moveCallsToResolve.length) {\n    await Promise.all(\n      moveCallsToResolve.map(async (moveCall) => {\n        const parameters = moveFunctionParameters.get(\n          `${moveCall.package}::${moveCall.module}::${moveCall.function}`\n        );\n        if (!parameters) {\n          return;\n        }\n        const hasTxContext = parameters.length > 0 && isTxContext(parameters.at(-1));\n        const params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;\n        moveCall._argumentTypes = params;\n      })\n    );\n  }\n  commands.forEach((command) => {\n    if (!command.MoveCall) {\n      return;\n    }\n    const moveCall = command.MoveCall;\n    const fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;\n    const params = moveCall._argumentTypes;\n    if (!params) {\n      return;\n    }\n    if (params.length !== command.MoveCall.arguments.length) {\n      throw new Error(`Incorrect number of arguments for ${fnName}`);\n    }\n    params.forEach((param, i) => {\n      const arg = moveCall.arguments[i];\n      if (arg.$kind !== \"Input\") return;\n      const input = inputs[arg.Input];\n      if (!input.UnresolvedPure && !input.UnresolvedObject) {\n        return;\n      }\n      const inputValue = input.UnresolvedPure?.value ?? input.UnresolvedObject?.objectId;\n      const schema = getPureBcsSchema(param.body);\n      if (schema) {\n        arg.type = \"pure\";\n        inputs[inputs.indexOf(input)] = Inputs.Pure(schema.serialize(inputValue));\n        return;\n      }\n      if (typeof inputValue !== \"string\") {\n        throw new Error(\n          `Expect the argument to be an object id string, got ${JSON.stringify(\n            inputValue,\n            null,\n            2\n          )}`\n        );\n      }\n      arg.type = \"object\";\n      const unresolvedObject = input.UnresolvedPure ? {\n        $kind: \"UnresolvedObject\",\n        UnresolvedObject: {\n          objectId: inputValue\n        }\n      } : input;\n      inputs[arg.Input] = unresolvedObject;\n    });\n  });\n}\nfunction validate(transactionData) {\n  transactionData.inputs.forEach((input, index) => {\n    if (input.$kind !== \"Object\" && input.$kind !== \"Pure\") {\n      throw new Error(\n        `Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(\n          input\n        )}`\n      );\n    }\n  });\n}\nfunction normalizeRawArgument(arg, schema, transactionData) {\n  if (arg.$kind !== \"Input\") {\n    return;\n  }\n  const input = transactionData.inputs[arg.Input];\n  if (input.$kind !== \"UnresolvedPure\") {\n    return;\n  }\n  transactionData.inputs[arg.Input] = Inputs.Pure(schema.serialize(input.UnresolvedPure.value));\n}\nfunction isUsedAsMutable(transactionData, index) {\n  let usedAsMutable = false;\n  transactionData.getInputUses(index, (arg, tx) => {\n    if (tx.MoveCall && tx.MoveCall._argumentTypes) {\n      const argIndex = tx.MoveCall.arguments.indexOf(arg);\n      usedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== \"&\" || usedAsMutable;\n    }\n    if (tx.$kind === \"MakeMoveVec\" || tx.$kind === \"MergeCoins\" || tx.$kind === \"SplitCoins\") {\n      usedAsMutable = true;\n    }\n  });\n  return usedAsMutable;\n}\nfunction isUsedAsReceiving(transactionData, index) {\n  let usedAsReceiving = false;\n  transactionData.getInputUses(index, (arg, tx) => {\n    if (tx.MoveCall && tx.MoveCall._argumentTypes) {\n      const argIndex = tx.MoveCall.arguments.indexOf(arg);\n      usedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;\n    }\n  });\n  return usedAsReceiving;\n}\nfunction isReceivingType(type) {\n  if (typeof type.body !== \"object\" || !(\"datatype\" in type.body)) {\n    return false;\n  }\n  return type.body.datatype.package === \"0x2\" && type.body.datatype.module === \"transfer\" && type.body.datatype.type === \"Receiving\";\n}\nfunction getClient(options) {\n  if (!options.client) {\n    throw new Error(\n      `No sui client passed to Transaction#build, but transaction data was not sufficient to build offline.`\n    );\n  }\n  return options.client;\n}\nfunction chunk(arr, size) {\n  return Array.from(\n    { length: Math.ceil(arr.length / size) },\n    (_, i) => arr.slice(i * size, i * size + size)\n  );\n}\nexport {\n  getClient,\n  resolveTransactionData\n};\n//# sourceMappingURL=json-rpc-resolver.js.map\n","function createObjectMethods(makeObject) {\n  function object(value) {\n    return makeObject(value);\n  }\n  object.system = () => object(\"0x5\");\n  object.clock = () => object(\"0x6\");\n  object.random = () => object(\"0x8\");\n  object.denyList = () => object(\"0x403\");\n  object.option = ({ type, value }) => (tx) => tx.moveCall({\n    typeArguments: [type],\n    target: `0x1::option::${value === null ? \"none\" : \"some\"}`,\n    arguments: value === null ? [] : [tx.object(value)]\n  });\n  return object;\n}\nexport {\n  createObjectMethods\n};\n//# sourceMappingURL=object.js.map\n","import { isSerializedBcs } from \"@mysten/bcs\";\nimport { bcs } from \"../bcs/index.js\";\nimport { pureBcsSchemaFromTypeName } from \"../bcs/pure.js\";\nfunction createPure(makePure) {\n  function pure(typeOrSerializedValue, value) {\n    if (typeof typeOrSerializedValue === \"string\") {\n      return makePure(pureBcsSchemaFromTypeName(typeOrSerializedValue).serialize(value));\n    }\n    if (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {\n      return makePure(typeOrSerializedValue);\n    }\n    throw new Error(\"tx.pure must be called either a bcs type name, or a serialized bcs value\");\n  }\n  pure.u8 = (value) => makePure(bcs.U8.serialize(value));\n  pure.u16 = (value) => makePure(bcs.U16.serialize(value));\n  pure.u32 = (value) => makePure(bcs.U32.serialize(value));\n  pure.u64 = (value) => makePure(bcs.U64.serialize(value));\n  pure.u128 = (value) => makePure(bcs.U128.serialize(value));\n  pure.u256 = (value) => makePure(bcs.U256.serialize(value));\n  pure.bool = (value) => makePure(bcs.Bool.serialize(value));\n  pure.string = (value) => makePure(bcs.String.serialize(value));\n  pure.address = (value) => makePure(bcs.Address.serialize(value));\n  pure.id = pure.address;\n  pure.vector = (type, value) => {\n    return makePure(\n      bcs.vector(pureBcsSchemaFromTypeName(type)).serialize(value)\n    );\n  };\n  pure.option = (type, value) => {\n    return makePure(bcs.option(pureBcsSchemaFromTypeName(type)).serialize(value));\n  };\n  return pure;\n}\nexport {\n  createPure\n};\n//# sourceMappingURL=pure.js.map\n","import { blake2b } from \"@noble/hashes/blake2b\";\nfunction hashTypedData(typeTag, data) {\n  const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n  dataWithTag.set(typeTagBytes);\n  dataWithTag.set(data, typeTagBytes.length);\n  return blake2b(dataWithTag, { dkLen: 32 });\n}\nexport {\n  hashTypedData\n};\n//# sourceMappingURL=hash.js.map\n","import { toBase58 } from \"@mysten/bcs\";\nimport { parse } from \"valibot\";\nimport { bcs } from \"../bcs/index.js\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nimport { TransactionData } from \"./data/internal.js\";\nimport { transactionDataFromV1 } from \"./data/v1.js\";\nimport { hashTypedData } from \"./hash.js\";\nfunction prepareSuiAddress(address) {\n  return normalizeSuiAddress(address).replace(\"0x\", \"\");\n}\nclass TransactionDataBuilder {\n  constructor(clone) {\n    this.version = 2;\n    this.sender = clone?.sender ?? null;\n    this.expiration = clone?.expiration ?? null;\n    this.inputs = clone?.inputs ?? [];\n    this.commands = clone?.commands ?? [];\n    this.gasData = clone?.gasData ?? {\n      budget: null,\n      price: null,\n      owner: null,\n      payment: null\n    };\n  }\n  static fromKindBytes(bytes) {\n    const kind = bcs.TransactionKind.parse(bytes);\n    const programmableTx = kind.ProgrammableTransaction;\n    if (!programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    return TransactionDataBuilder.restore({\n      version: 2,\n      sender: null,\n      expiration: null,\n      gasData: {\n        budget: null,\n        owner: null,\n        payment: null,\n        price: null\n      },\n      inputs: programmableTx.inputs,\n      commands: programmableTx.commands\n    });\n  }\n  static fromBytes(bytes) {\n    const rawData = bcs.TransactionData.parse(bytes);\n    const data = rawData?.V1;\n    const programmableTx = data.kind.ProgrammableTransaction;\n    if (!data || !programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    return TransactionDataBuilder.restore({\n      version: 2,\n      sender: data.sender,\n      expiration: data.expiration,\n      gasData: data.gasData,\n      inputs: programmableTx.inputs,\n      commands: programmableTx.commands\n    });\n  }\n  static restore(data) {\n    if (data.version === 2) {\n      return new TransactionDataBuilder(parse(TransactionData, data));\n    } else {\n      return new TransactionDataBuilder(parse(TransactionData, transactionDataFromV1(data)));\n    }\n  }\n  /**\n   * Generate transaction digest.\n   *\n   * @param bytes BCS serialized transaction data\n   * @returns transaction digest.\n   */\n  static getDigestFromBytes(bytes) {\n    const hash = hashTypedData(\"TransactionData\", bytes);\n    return toBase58(hash);\n  }\n  // @deprecated use gasData instead\n  get gasConfig() {\n    return this.gasData;\n  }\n  // @deprecated use gasData instead\n  set gasConfig(value) {\n    this.gasData = value;\n  }\n  build({\n    maxSizeBytes = Infinity,\n    overrides,\n    onlyTransactionKind\n  } = {}) {\n    const inputs = this.inputs;\n    const commands = this.commands;\n    const kind = {\n      ProgrammableTransaction: {\n        inputs,\n        commands\n      }\n    };\n    if (onlyTransactionKind) {\n      return bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n    }\n    const expiration = overrides?.expiration ?? this.expiration;\n    const sender = overrides?.sender ?? this.sender;\n    const gasData = { ...this.gasData, ...overrides?.gasConfig, ...overrides?.gasData };\n    if (!sender) {\n      throw new Error(\"Missing transaction sender\");\n    }\n    if (!gasData.budget) {\n      throw new Error(\"Missing gas budget\");\n    }\n    if (!gasData.payment) {\n      throw new Error(\"Missing gas payment\");\n    }\n    if (!gasData.price) {\n      throw new Error(\"Missing gas price\");\n    }\n    const transactionData = {\n      sender: prepareSuiAddress(sender),\n      expiration: expiration ? expiration : { None: true },\n      gasData: {\n        payment: gasData.payment,\n        owner: prepareSuiAddress(this.gasData.owner ?? sender),\n        price: BigInt(gasData.price),\n        budget: BigInt(gasData.budget)\n      },\n      kind: {\n        ProgrammableTransaction: {\n          inputs,\n          commands\n        }\n      }\n    };\n    return bcs.TransactionData.serialize(\n      { V1: transactionData },\n      { maxSize: maxSizeBytes }\n    ).toBytes();\n  }\n  addInput(type, arg) {\n    const index = this.inputs.length;\n    this.inputs.push(arg);\n    return { Input: index, type, $kind: \"Input\" };\n  }\n  getInputUses(index, fn) {\n    this.mapArguments((arg, command) => {\n      if (arg.$kind === \"Input\" && arg.Input === index) {\n        fn(arg, command);\n      }\n      return arg;\n    });\n  }\n  mapArguments(fn) {\n    for (const command of this.commands) {\n      switch (command.$kind) {\n        case \"MoveCall\":\n          command.MoveCall.arguments = command.MoveCall.arguments.map((arg) => fn(arg, command));\n          break;\n        case \"TransferObjects\":\n          command.TransferObjects.objects = command.TransferObjects.objects.map(\n            (arg) => fn(arg, command)\n          );\n          command.TransferObjects.address = fn(command.TransferObjects.address, command);\n          break;\n        case \"SplitCoins\":\n          command.SplitCoins.coin = fn(command.SplitCoins.coin, command);\n          command.SplitCoins.amounts = command.SplitCoins.amounts.map((arg) => fn(arg, command));\n          break;\n        case \"MergeCoins\":\n          command.MergeCoins.destination = fn(command.MergeCoins.destination, command);\n          command.MergeCoins.sources = command.MergeCoins.sources.map((arg) => fn(arg, command));\n          break;\n        case \"MakeMoveVec\":\n          command.MakeMoveVec.elements = command.MakeMoveVec.elements.map(\n            (arg) => fn(arg, command)\n          );\n          break;\n        case \"Upgrade\":\n          command.Upgrade.ticket = fn(command.Upgrade.ticket, command);\n          break;\n        case \"$Intent\":\n          const inputs = command.$Intent.inputs;\n          command.$Intent.inputs = {};\n          for (const [key, value] of Object.entries(inputs)) {\n            command.$Intent.inputs[key] = Array.isArray(value) ? value.map((arg) => fn(arg, command)) : fn(value, command);\n          }\n          break;\n        case \"Publish\":\n          break;\n        default:\n          throw new Error(`Unexpected transaction kind: ${command.$kind}`);\n      }\n    }\n  }\n  replaceCommand(index, replacement) {\n    if (!Array.isArray(replacement)) {\n      this.commands[index] = replacement;\n      return;\n    }\n    const sizeDiff = replacement.length - 1;\n    this.commands.splice(index, 1, ...replacement);\n    if (sizeDiff !== 0) {\n      this.mapArguments((arg) => {\n        switch (arg.$kind) {\n          case \"Result\":\n            if (arg.Result > index) {\n              arg.Result += sizeDiff;\n            }\n            break;\n          case \"NestedResult\":\n            if (arg.NestedResult[0] > index) {\n              arg.NestedResult[0] += sizeDiff;\n            }\n            break;\n        }\n        return arg;\n      });\n    }\n  }\n  getDigest() {\n    const bytes = this.build({ onlyTransactionKind: false });\n    return TransactionDataBuilder.getDigestFromBytes(bytes);\n  }\n  snapshot() {\n    return parse(TransactionData, this);\n  }\n}\nexport {\n  TransactionDataBuilder\n};\n//# sourceMappingURL=TransactionData.js.map\n","import { is } from \"valibot\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nimport { Argument } from \"./data/internal.js\";\nfunction extractMutableReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"MutableReference\" in normalizedType ? normalizedType.MutableReference : void 0;\n}\nfunction extractReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"Reference\" in normalizedType ? normalizedType.Reference : void 0;\n}\nfunction extractStructTag(normalizedType) {\n  if (typeof normalizedType === \"object\" && \"Struct\" in normalizedType) {\n    return normalizedType;\n  }\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n  if (typeof ref === \"object\" && \"Struct\" in ref) {\n    return ref;\n  }\n  if (typeof mutRef === \"object\" && \"Struct\" in mutRef) {\n    return mutRef;\n  }\n  return void 0;\n}\nfunction getIdFromCallArg(arg) {\n  if (typeof arg === \"string\") {\n    return normalizeSuiAddress(arg);\n  }\n  if (arg.Object) {\n    if (arg.Object.ImmOrOwnedObject) {\n      return normalizeSuiAddress(arg.Object.ImmOrOwnedObject.objectId);\n    }\n    if (arg.Object.Receiving) {\n      return normalizeSuiAddress(arg.Object.Receiving.objectId);\n    }\n    return normalizeSuiAddress(arg.Object.SharedObject.objectId);\n  }\n  if (arg.UnresolvedObject) {\n    return normalizeSuiAddress(arg.UnresolvedObject.objectId);\n  }\n  return void 0;\n}\nfunction isArgument(value) {\n  return is(Argument, value);\n}\nexport {\n  extractMutableReference,\n  extractReference,\n  extractStructTag,\n  getIdFromCallArg,\n  isArgument\n};\n//# sourceMappingURL=utils.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _serializationPlugins, _buildPlugins, _intentResolvers, _data, _Transaction_instances, normalizeTransactionArgument_fn, resolveArgument_fn, prepareBuild_fn, runPlugins_fn;\nimport { fromBase64, isSerializedBcs } from \"@mysten/bcs\";\nimport { is, parse } from \"valibot\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nimport { Commands } from \"./Commands.js\";\nimport { Argument, NormalizedCallArg, ObjectRef, TransactionExpiration } from \"./data/internal.js\";\nimport { serializeV1TransactionData } from \"./data/v1.js\";\nimport { SerializedTransactionDataV2 } from \"./data/v2.js\";\nimport { Inputs } from \"./Inputs.js\";\nimport { resolveTransactionData } from \"./json-rpc-resolver.js\";\nimport { createObjectMethods } from \"./object.js\";\nimport { createPure } from \"./pure.js\";\nimport { TransactionDataBuilder } from \"./TransactionData.js\";\nimport { getIdFromCallArg } from \"./utils.js\";\nfunction createTransactionResult(index, length = Infinity) {\n  const baseResult = { $kind: \"Result\", Result: index };\n  const nestedResults = [];\n  const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {\n    $kind: \"NestedResult\",\n    NestedResult: [index, resultIndex]\n  });\n  return new Proxy(baseResult, {\n    set() {\n      throw new Error(\n        \"The transaction result is a proxy, and does not support setting properties directly\"\n      );\n    },\n    // TODO: Instead of making this return a concrete argument, we should ideally\n    // make it reference-based (so that this gets resolved at build-time), which\n    // allows re-ordering transactions.\n    get(target, property) {\n      if (property in target) {\n        return Reflect.get(target, property);\n      }\n      if (property === Symbol.iterator) {\n        return function* () {\n          let i = 0;\n          while (i < length) {\n            yield nestedResultFor(i);\n            i++;\n          }\n        };\n      }\n      if (typeof property === \"symbol\") return;\n      const resultIndex = parseInt(property, 10);\n      if (Number.isNaN(resultIndex) || resultIndex < 0) return;\n      return nestedResultFor(resultIndex);\n    }\n  });\n}\nconst TRANSACTION_BRAND = Symbol.for(\"@mysten/transaction\");\nfunction isTransaction(obj) {\n  return !!obj && typeof obj === \"object\" && obj[TRANSACTION_BRAND] === true;\n}\nconst modulePluginRegistry = {\n  buildPlugins: /* @__PURE__ */ new Map(),\n  serializationPlugins: /* @__PURE__ */ new Map()\n};\nconst TRANSACTION_REGISTRY_KEY = Symbol.for(\"@mysten/transaction/registry\");\nfunction getGlobalPluginRegistry() {\n  try {\n    const target = globalThis;\n    if (!target[TRANSACTION_REGISTRY_KEY]) {\n      target[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;\n    }\n    return target[TRANSACTION_REGISTRY_KEY];\n  } catch (e) {\n    return modulePluginRegistry;\n  }\n}\nconst _Transaction = class _Transaction {\n  constructor() {\n    __privateAdd(this, _Transaction_instances);\n    __privateAdd(this, _serializationPlugins);\n    __privateAdd(this, _buildPlugins);\n    __privateAdd(this, _intentResolvers, /* @__PURE__ */ new Map());\n    __privateAdd(this, _data);\n    /**\n     * Add a new object input to the transaction.\n     */\n    this.object = createObjectMethods(\n      (value) => {\n        if (typeof value === \"function\") {\n          return this.object(value(this));\n        }\n        if (typeof value === \"object\" && is(Argument, value)) {\n          return value;\n        }\n        const id = getIdFromCallArg(value);\n        const inserted = __privateGet(this, _data).inputs.find((i) => id === getIdFromCallArg(i));\n        if (inserted?.Object?.SharedObject && typeof value === \"object\" && value.Object?.SharedObject) {\n          inserted.Object.SharedObject.mutable = inserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;\n        }\n        return inserted ? { $kind: \"Input\", Input: __privateGet(this, _data).inputs.indexOf(inserted), type: \"object\" } : __privateGet(this, _data).addInput(\n          \"object\",\n          typeof value === \"string\" ? {\n            $kind: \"UnresolvedObject\",\n            UnresolvedObject: { objectId: normalizeSuiAddress(value) }\n          } : value\n        );\n      }\n    );\n    const globalPlugins = getGlobalPluginRegistry();\n    __privateSet(this, _data, new TransactionDataBuilder());\n    __privateSet(this, _buildPlugins, [...globalPlugins.buildPlugins.values()]);\n    __privateSet(this, _serializationPlugins, [...globalPlugins.serializationPlugins.values()]);\n  }\n  /**\n   * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n   * Supports either a byte array, or base64-encoded bytes.\n   */\n  static fromKind(serialized) {\n    const tx = new _Transaction();\n    __privateSet(tx, _data, TransactionDataBuilder.fromKindBytes(\n      typeof serialized === \"string\" ? fromBase64(serialized) : serialized\n    ));\n    return tx;\n  }\n  /**\n   * Converts from a serialized transaction format to a `Transaction` class.\n   * There are two supported serialized formats:\n   * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n   * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n   */\n  static from(transaction) {\n    const newTransaction = new _Transaction();\n    if (isTransaction(transaction)) {\n      __privateSet(newTransaction, _data, new TransactionDataBuilder(transaction.getData()));\n    } else if (typeof transaction !== \"string\" || !transaction.startsWith(\"{\")) {\n      __privateSet(newTransaction, _data, TransactionDataBuilder.fromBytes(\n        typeof transaction === \"string\" ? fromBase64(transaction) : transaction\n      ));\n    } else {\n      __privateSet(newTransaction, _data, TransactionDataBuilder.restore(JSON.parse(transaction)));\n    }\n    return newTransaction;\n  }\n  static registerGlobalSerializationPlugin(stepOrStep, step) {\n    getGlobalPluginRegistry().serializationPlugins.set(\n      stepOrStep,\n      step ?? stepOrStep\n    );\n  }\n  static unregisterGlobalSerializationPlugin(name) {\n    getGlobalPluginRegistry().serializationPlugins.delete(name);\n  }\n  static registerGlobalBuildPlugin(stepOrStep, step) {\n    getGlobalPluginRegistry().buildPlugins.set(\n      stepOrStep,\n      step ?? stepOrStep\n    );\n  }\n  static unregisterGlobalBuildPlugin(name) {\n    getGlobalPluginRegistry().buildPlugins.delete(name);\n  }\n  addSerializationPlugin(step) {\n    __privateGet(this, _serializationPlugins).push(step);\n  }\n  addBuildPlugin(step) {\n    __privateGet(this, _buildPlugins).push(step);\n  }\n  addIntentResolver(intent, resolver) {\n    if (__privateGet(this, _intentResolvers).has(intent) && __privateGet(this, _intentResolvers).get(intent) !== resolver) {\n      throw new Error(`Intent resolver for ${intent} already exists`);\n    }\n    __privateGet(this, _intentResolvers).set(intent, resolver);\n  }\n  setSender(sender) {\n    __privateGet(this, _data).sender = sender;\n  }\n  /**\n   * Sets the sender only if it has not already been set.\n   * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n   */\n  setSenderIfNotSet(sender) {\n    if (!__privateGet(this, _data).sender) {\n      __privateGet(this, _data).sender = sender;\n    }\n  }\n  setExpiration(expiration) {\n    __privateGet(this, _data).expiration = expiration ? parse(TransactionExpiration, expiration) : null;\n  }\n  setGasPrice(price) {\n    __privateGet(this, _data).gasConfig.price = String(price);\n  }\n  setGasBudget(budget) {\n    __privateGet(this, _data).gasConfig.budget = String(budget);\n  }\n  setGasBudgetIfNotSet(budget) {\n    if (__privateGet(this, _data).gasData.budget == null) {\n      __privateGet(this, _data).gasConfig.budget = String(budget);\n    }\n  }\n  setGasOwner(owner) {\n    __privateGet(this, _data).gasConfig.owner = owner;\n  }\n  setGasPayment(payments) {\n    __privateGet(this, _data).gasConfig.payment = payments.map((payment) => parse(ObjectRef, payment));\n  }\n  /** @deprecated Use `getData()` instead. */\n  get blockData() {\n    return serializeV1TransactionData(__privateGet(this, _data).snapshot());\n  }\n  /** Get a snapshot of the transaction data, in JSON form: */\n  getData() {\n    return __privateGet(this, _data).snapshot();\n  }\n  // Used to brand transaction classes so that they can be identified, even between multiple copies\n  // of the builder.\n  get [TRANSACTION_BRAND]() {\n    return true;\n  }\n  // Temporary workaround for the wallet interface accidentally serializing transactions via postMessage\n  get pure() {\n    Object.defineProperty(this, \"pure\", {\n      enumerable: false,\n      value: createPure((value) => {\n        if (isSerializedBcs(value)) {\n          return __privateGet(this, _data).addInput(\"pure\", {\n            $kind: \"Pure\",\n            Pure: {\n              bytes: value.toBase64()\n            }\n          });\n        }\n        return __privateGet(this, _data).addInput(\n          \"pure\",\n          is(NormalizedCallArg, value) ? parse(NormalizedCallArg, value) : value instanceof Uint8Array ? Inputs.Pure(value) : { $kind: \"UnresolvedPure\", UnresolvedPure: { value } }\n        );\n      })\n    });\n    return this.pure;\n  }\n  /** Returns an argument for the gas coin, to be used in a transaction. */\n  get gas() {\n    return { $kind: \"GasCoin\", GasCoin: true };\n  }\n  /**\n   * Add a new object input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  objectRef(...args) {\n    return this.object(Inputs.ObjectRef(...args));\n  }\n  /**\n   * Add a new receiving input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  receivingRef(...args) {\n    return this.object(Inputs.ReceivingRef(...args));\n  }\n  /**\n   * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  sharedObjectRef(...args) {\n    return this.object(Inputs.SharedObjectRef(...args));\n  }\n  /** Add a transaction to the transaction */\n  add(command) {\n    if (typeof command === \"function\") {\n      return command(this);\n    }\n    const index = __privateGet(this, _data).commands.push(command);\n    return createTransactionResult(index - 1);\n  }\n  // Method shorthands:\n  splitCoins(coin, amounts) {\n    const command = Commands.SplitCoins(\n      typeof coin === \"string\" ? this.object(coin) : __privateMethod(this, _Transaction_instances, resolveArgument_fn).call(this, coin),\n      amounts.map(\n        (amount) => typeof amount === \"number\" || typeof amount === \"bigint\" || typeof amount === \"string\" ? this.pure.u64(amount) : __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, amount)\n      )\n    );\n    const index = __privateGet(this, _data).commands.push(command);\n    return createTransactionResult(index - 1, amounts.length);\n  }\n  mergeCoins(destination, sources) {\n    return this.add(\n      Commands.MergeCoins(\n        this.object(destination),\n        sources.map((src) => this.object(src))\n      )\n    );\n  }\n  publish({ modules, dependencies }) {\n    return this.add(\n      Commands.Publish({\n        modules,\n        dependencies\n      })\n    );\n  }\n  upgrade({\n    modules,\n    dependencies,\n    package: packageId,\n    ticket\n  }) {\n    return this.add(\n      Commands.Upgrade({\n        modules,\n        dependencies,\n        package: packageId,\n        ticket: this.object(ticket)\n      })\n    );\n  }\n  moveCall({\n    arguments: args,\n    ...input\n  }) {\n    return this.add(\n      Commands.MoveCall({\n        ...input,\n        arguments: args?.map((arg) => __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, arg))\n      })\n    );\n  }\n  transferObjects(objects, address) {\n    return this.add(\n      Commands.TransferObjects(\n        objects.map((obj) => this.object(obj)),\n        typeof address === \"string\" ? this.pure.address(address) : __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, address)\n      )\n    );\n  }\n  makeMoveVec({\n    type,\n    elements\n  }) {\n    return this.add(\n      Commands.MakeMoveVec({\n        type,\n        elements: elements.map((obj) => this.object(obj))\n      })\n    );\n  }\n  /**\n   * @deprecated Use toJSON instead.\n   * For synchronous serialization, you can use `getData()`\n   * */\n  serialize() {\n    return JSON.stringify(serializeV1TransactionData(__privateGet(this, _data).snapshot()));\n  }\n  async toJSON(options = {}) {\n    await this.prepareForSerialization(options);\n    return JSON.stringify(\n      parse(SerializedTransactionDataV2, __privateGet(this, _data).snapshot()),\n      (_key, value) => typeof value === \"bigint\" ? value.toString() : value,\n      2\n    );\n  }\n  /** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n  async sign(options) {\n    const { signer, ...buildOptions } = options;\n    const bytes = await this.build(buildOptions);\n    return signer.signTransaction(bytes);\n  }\n  /** Build the transaction to BCS bytes. */\n  async build(options = {}) {\n    await this.prepareForSerialization(options);\n    await __privateMethod(this, _Transaction_instances, prepareBuild_fn).call(this, options);\n    return __privateGet(this, _data).build({\n      onlyTransactionKind: options.onlyTransactionKind\n    });\n  }\n  /** Derive transaction digest */\n  async getDigest(options = {}) {\n    await __privateMethod(this, _Transaction_instances, prepareBuild_fn).call(this, options);\n    return __privateGet(this, _data).getDigest();\n  }\n  async prepareForSerialization(options) {\n    const intents = /* @__PURE__ */ new Set();\n    for (const command of __privateGet(this, _data).commands) {\n      if (command.$Intent) {\n        intents.add(command.$Intent.name);\n      }\n    }\n    const steps = [...__privateGet(this, _serializationPlugins)];\n    for (const intent of intents) {\n      if (options.supportedIntents?.includes(intent)) {\n        continue;\n      }\n      if (!__privateGet(this, _intentResolvers).has(intent)) {\n        throw new Error(`Missing intent resolver for ${intent}`);\n      }\n      steps.push(__privateGet(this, _intentResolvers).get(intent));\n    }\n    await __privateMethod(this, _Transaction_instances, runPlugins_fn).call(this, steps, options);\n  }\n};\n_serializationPlugins = new WeakMap();\n_buildPlugins = new WeakMap();\n_intentResolvers = new WeakMap();\n_data = new WeakMap();\n_Transaction_instances = new WeakSet();\nnormalizeTransactionArgument_fn = function(arg) {\n  if (isSerializedBcs(arg)) {\n    return this.pure(arg);\n  }\n  return __privateMethod(this, _Transaction_instances, resolveArgument_fn).call(this, arg);\n};\nresolveArgument_fn = function(arg) {\n  if (typeof arg === \"function\") {\n    return parse(Argument, arg(this));\n  }\n  return parse(Argument, arg);\n};\nprepareBuild_fn = async function(options) {\n  if (!options.onlyTransactionKind && !__privateGet(this, _data).sender) {\n    throw new Error(\"Missing transaction sender\");\n  }\n  await __privateMethod(this, _Transaction_instances, runPlugins_fn).call(this, [...__privateGet(this, _buildPlugins), resolveTransactionData], options);\n};\nrunPlugins_fn = async function(plugins, options) {\n  const createNext = (i) => {\n    if (i >= plugins.length) {\n      return () => {\n      };\n    }\n    const plugin = plugins[i];\n    return async () => {\n      const next = createNext(i + 1);\n      let calledNext = false;\n      let nextResolved = false;\n      await plugin(__privateGet(this, _data), options, async () => {\n        if (calledNext) {\n          throw new Error(`next() was call multiple times in TransactionPlugin ${i}`);\n        }\n        calledNext = true;\n        await next();\n        nextResolved = true;\n      });\n      if (!calledNext) {\n        throw new Error(`next() was not called in TransactionPlugin ${i}`);\n      }\n      if (!nextResolved) {\n        throw new Error(`next() was not awaited in TransactionPlugin ${i}`);\n      }\n    };\n  };\n  await createNext(0)();\n};\nlet Transaction = _Transaction;\nexport {\n  Transaction,\n  isTransaction\n};\n//# sourceMappingURL=Transaction.js.map\n","import { fromBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { isTransaction } from \"../transactions/index.js\";\nimport {\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeSuiAddress,\n  normalizeSuiObjectId\n} from \"../utils/sui-types.js\";\nimport { normalizeSuiNSName } from \"../utils/suins.js\";\nimport { SuiHTTPTransport } from \"./http-transport.js\";\nconst SUI_CLIENT_BRAND = Symbol.for(\"@mysten/SuiClient\");\nfunction isSuiClient(client) {\n  return typeof client === \"object\" && client !== null && client[SUI_CLIENT_BRAND] === true;\n}\nclass SuiClient {\n  get [SUI_CLIENT_BRAND]() {\n    return true;\n  }\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    this.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n  }\n  async getRpcApiVersion() {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: []\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getCoins\",\n      params: [input.owner, input.coinType, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getBalance\",\n      params: [input.owner, input.coinType]\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getAllBalances\", params: [input.owner] });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata(input) {\n    return await this.transport.request({\n      method: \"suix_getCoinMetadata\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply(input) {\n    return await this.transport.request({\n      method: \"suix_getTotalSupply\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params) {\n    return await this.transport.request({ method, params });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes(input) {\n    return await this.transport.request({\n      method: \"sui_getMoveFunctionArgTypes\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModulesByPackage\",\n      params: [input.package]\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModule\",\n      params: [input.package, input.module]\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveFunction\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveStruct\",\n      params: [input.package, input.module, input.struct]\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getOwnedObjects\",\n      params: [\n        input.owner,\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit\n      ]\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"sui_getObject\",\n      params: [input.id, input.options]\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"sui_tryGetPastObject\",\n      params: [input.id, input.version, input.options]\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetObjects\",\n      params: [input.ids, input.options]\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks(input) {\n    return await this.transport.request({\n      method: \"suix_queryTransactionBlocks\",\n      params: [\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!isValidTransactionDigest(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"sui_getTransactionBlock\",\n      params: [input.digest, input.options]\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach((d) => {\n      if (!isValidTransactionDigest(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetTransactionBlocks\",\n      params: [input.digests, input.options]\n    });\n  }\n  async executeTransactionBlock({\n    transactionBlock,\n    signature,\n    options,\n    requestType\n  }) {\n    const result = await this.transport.request({\n      method: \"sui_executeTransactionBlock\",\n      params: [\n        typeof transactionBlock === \"string\" ? transactionBlock : toBase64(transactionBlock),\n        Array.isArray(signature) ? signature : [signature],\n        options\n      ]\n    });\n    if (requestType === \"WaitForLocalExecution\") {\n      try {\n        await this.waitForTransaction({\n          digest: result.digest\n        });\n      } catch (_) {\n      }\n    }\n    return result;\n  }\n  async signAndExecuteTransaction({\n    transaction,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transaction instanceof Uint8Array) {\n      transactionBytes = transaction;\n    } else {\n      transaction.setSenderIfNotSet(signer.toSuiAddress());\n      transactionBytes = await transaction.build({ client: this });\n    }\n    const { signature, bytes } = await signer.signTransaction(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks() {\n    const resp = await this.transport.request({\n      method: \"sui_getTotalTransactionBlocks\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice() {\n    const resp = await this.transport.request({\n      method: \"suix_getReferenceGasPrice\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getStakes\", params: [input.owner] });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedSuiIds.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"suix_getStakesByIds\",\n      params: [input.stakedSuiIds]\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestSuiSystemState() {\n    return await this.transport.request({ method: \"suix_getLatestSuiSystemState\", params: [] });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents(input) {\n    return await this.transport.request({\n      method: \"suix_queryEvents\",\n      params: [\n        input.query,\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   *\n   * @deprecated\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeEvent\",\n      unsubscribe: \"suix_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * @deprecated\n   */\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeTransaction\",\n      unsubscribe: \"suix_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if (isTransaction(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = toBase64(\n        await input.transactionBlock.build({\n          client: this,\n          onlyTransactionKind: true\n        })\n      );\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = toBase64(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    return await this.transport.request({\n      method: \"sui_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_dryRunTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : toBase64(input.transactionBlock)\n      ]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"suix_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"suix_getDynamicFieldObject\",\n      params: [input.parentId, input.name]\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber() {\n    const resp = await this.transport.request({\n      method: \"sui_getLatestCheckpointSequenceNumber\",\n      params: []\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({ method: \"sui_getCheckpoint\", params: [input.id] });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"suix_getCommitteeInfo\",\n      params: [input?.epoch]\n    });\n  }\n  async getNetworkMetrics() {\n    return await this.transport.request({ method: \"suix_getNetworkMetrics\", params: [] });\n  }\n  async getAddressMetrics() {\n    return await this.transport.request({ method: \"suix_getLatestAddressMetrics\", params: [] });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics() {\n    return await this.transport.request({ method: \"suix_getMoveCallMetrics\", params: [] });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch() {\n    return await this.transport.request({ method: \"suix_getCurrentEpoch\", params: [] });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy() {\n    return await this.transport.request({ method: \"suix_getValidatorsApy\", params: [] });\n  }\n  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n  async getChainIdentifier() {\n    const checkpoint = await this.getCheckpoint({ id: \"0\" });\n    const bytes = fromBase58(checkpoint.digest);\n    return toHex(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceAddress\",\n      params: [input.name]\n    });\n  }\n  async resolveNameServiceNames({\n    format = \"dot\",\n    ...input\n  }) {\n    const { nextCursor, hasNextPage, data } = await this.transport.request({\n      method: \"suix_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit]\n    });\n    return {\n      hasNextPage,\n      nextCursor,\n      data: data.map((name) => normalizeSuiNSName(name, format))\n    };\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"sui_getProtocolConfig\",\n      params: [input?.version]\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransaction({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {\n    });\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch (e) {\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, pollInterval)),\n          timeoutPromise\n        ]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\nexport {\n  SuiClient,\n  isSuiClient\n};\n//# sourceMappingURL=client.js.map\n","import { getFullnodeUrl, SuiClient } from \"@mysten/sui/client\";\r\nimport { createNetworkConfig } from \"@mysten/dapp-kit\";\r\n\r\n// type Network = \"mainnet\" | \"testnet\" | \"devnet\" | \"localnet\";\r\n\r\n// const network = (process.env.NEXT_PUBLIC_NETWORK as Network) || \"testnet\";\r\nconst network = \"testnet\";\r\n\r\nconst { networkConfig, useNetworkVariable, useNetworkVariables } = createNetworkConfig({\r\n    testnet: {\r\n        url: getFullnodeUrl(\"testnet\"),\r\n        variables: {},\r\n    },\r\n    mainnet: {\r\n        url: getFullnodeUrl(\"mainnet\"),\r\n        variables: {},\r\n    },\r\n    devnet: {\r\n        url: getFullnodeUrl(\"devnet\"),\r\n        variables: {},\r\n    },\r\n    localnet: {\r\n        url: getFullnodeUrl(\"localnet\"),\r\n        variables: {},\r\n    },\r\n});\r\n\r\n// 创建全局 SuiClient 实例\r\nconst suiClient = new SuiClient({ url: networkConfig[network].url });\r\n\r\nexport { useNetworkVariable, useNetworkVariables, networkConfig, network, suiClient };\r\n","'use client'\r\n\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { SuiClientProvider, WalletProvider } from \"@mysten/dapp-kit\";\r\nimport { networkConfig, network } from \"../../config/index\"\r\nimport \"@mysten/dapp-kit/dist/index.css\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport function Providers({ children }) {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <SuiClientProvider networks={networkConfig} defaultNetwork={network}>\r\n        <WalletProvider>\r\n          {children}\r\n        </WalletProvider>\r\n      </SuiClientProvider>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","export const PACKAGE_ID = '0x88d15c734b854a80fd016b87832864e496606b38d11330842ab2917f03bab188'\nexport const CONTRACTS_CONTAINER = '0xd834cb59d06a10d10a272797cd3c70b83d2a517aefe1fc7370baa0853f520bc3'\nexport const SUI_MIST = 1000000000;\n","import { useState } from 'react';\nimport { Box, Button, Alert, Field } from '@strapi/design-system';\nimport { useSignAndExecuteTransaction, useSuiClient } from '@mysten/dapp-kit';\nimport { Transaction } from '@mysten/sui/transactions';\nimport {\n    useFetchClient,\n  } from '@strapi/strapi/admin';\nimport { PACKAGE_ID, CONTRACTS_CONTAINER, SUI_MIST } from '../config/constantsjs';\n\nconst CreateContractForm = ({ petApply }) => {\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({\n    type: 'success',\n    msg: '',\n  });\n  const [deposit, setDeposit] = useState(0);\n  const [recordTimes, setRecordTimes] = useState(0);\n  const fetchClient = useFetchClient();\n\n  const suiClient = useSuiClient();\n  const { mutate: signAndExecute } = useSignAndExecuteTransaction({\n    execute: async ({ bytes, signature }) =>\n      await suiClient.executeTransactionBlock({\n        transactionBlock: bytes,\n        signature,\n        options: {\n          // Raw effects are required so the effects can be reported back to the wallet\n          showRawEffects: true,\n          showEffects: true,\n          showEvents: true,\n        },\n      }),\n  });\n\n  const handleSubmit = async (e) => {\n    // Prevent submitting parent form\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      const txb = new Transaction();\n\n      txb.setGasBudget(100000000);\n      console.log('!!!!!!petApply = ', petApply);\n      console.log('packageId = ', PACKAGE_ID);\n      await new Promise((resolve, reject) => {\n        txb.moveCall({\n          target: `${PACKAGE_ID}::apply_for_adoption::create_adopt_contract`,\n          arguments: [\n            txb.pure.string(petApply.userId),\n            txb.pure.string(petApply.documentId),\n            txb.pure.u64(deposit * SUI_MIST),\n            txb.pure.address(petApply.userWallet), // adopter_address\n            txb.object(CONTRACTS_CONTAINER), // contracts\n            txb.pure.u64(recordTimes),\n            txb.pure.u64(0),\n          ],\n          typeArguments: [],\n        });\n\n        // Show loading state\n        setLoading(true);\n\n        signAndExecute(\n          {\n            transaction: txb,\n          },\n          {\n            onSuccess: async (data) => {\n              console.log('transaction digest: ' + JSON.stringify(data));\n              if ((data.effects && data.effects.status.status) === 'success') {\n                const contractId =\n                  data.events &&\n                  Array.isArray(data.events) &&\n                  data.events.length > 0 &&\n                  data.events[0].parsedJson.contractId;\n\n                  const res = await fetchClient.post('/contract-strapi-plugin/contracts', {\n                    contractAddress: contractId,\n                    userId: petApply.userId,\n                    deposit: deposit * SUI_MIST,\n                    recordTimes: parseInt(recordTimes),\n                    userWallet: petApply.userWallet,\n                    state: 'toSign',\n                    status: 'published',\n                    pet: petApply.pet.documentId,\n                    petApply: petApply.documentId,\n                  }); // 保存合约信息到数据库\n  \n                  if (res.error) {\n                    reject(new Error(res.error.message));\n                  } else {\n                    resolve();\n                  }\n              } else {\n                reject(new Error('交易失败: ' + data.digest));\n              }\n            },\n            onError: (err) => {\n              console.error('transaction error: ' + err);\n              reject(err);\n            },\n          }\n        );\n      });\n\n      setMessage({\n        type: 'success',\n        msg: '合同创建成功',\n      });\n    } catch (e) {\n      console.error(e);\n      setMessage({\n        type: 'error',\n        msg: e.message,\n      });\n    } finally {\n      setLoading(false);\n      setTimeout(() => {\n        setMessage({\n          type: 'success',\n          msg: '',\n        });\n      }, 5000);\n    }\n  };\n  return (\n    <>\n      {message.msg && (\n        <Alert title=\"Tips\" variant={message.type}>\n          {message.msg}\n        </Alert>\n      )}\n      <Box paddingTop={2} paddingBottom={2}>\n        <Box paddingTop={2}>\n          <Field.Root>\n            <Field.Label>押金数量(SUI)</Field.Label>\n            <Field.Input\n              type=\"text\"\n              placeholder=\"填写押金(SUI)\"\n              onChange={(e) => setDeposit(e.target.value)}\n              value={deposit}\n            />\n            <Field.Error />\n          </Field.Root>\n        </Box>\n        <Box paddingTop={2}>\n          <Field.Root>\n            <Field.Label>回访次数</Field.Label>\n            <Field.Input\n              type=\"text\"\n              placeholder=\"填写回访次数\"\n              onChange={(e) => setRecordTimes(e.target.value)}\n              value={recordTimes}\n            />\n            <Field.Error />\n          </Field.Root>\n        </Box>\n      </Box>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {loading ? '提交中...' : '创建合同'}\n      </Button>\n    </>\n  );\n};\n\nexport default CreateContractForm;\n","import { useState } from 'react';\nimport { Box, Button, Alert, Field, SingleSelect,\n  SingleSelectOption, Textarea } from '@strapi/design-system';\nimport { useSignAndExecuteTransaction, useSuiClient } from '@mysten/dapp-kit';\nimport { Transaction } from '@mysten/sui/transactions';\nimport {SUI_SYSTEM_STATE_OBJECT_ID} from \"@mysten/sui/utils\";\nimport {\n    useFetchClient,\n  } from '@strapi/strapi/admin';\nimport { PACKAGE_ID, CONTRACTS_CONTAINER, SUI_MIST } from '../config/constantsjs';\n\nconst CreateContractForm = ({ record }) => {\n  console.log('record = ', record);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({\n    type: 'success',\n    msg: '',\n  });\n  const [result, setResult] = useState(false);\n  const [comment, setComment] = useState('');\n  const fetchClient = useFetchClient();\n\n  const suiClient = useSuiClient();\n  const { mutate: signAndExecute } = useSignAndExecuteTransaction({\n    execute: async ({ bytes, signature }) =>\n      await suiClient.executeTransactionBlock({\n        transactionBlock: bytes,\n        signature,\n        options: {\n          // Raw effects are required so the effects can be reported back to the wallet\n          showRawEffects: true,\n          showEffects: true,\n          showEvents: true,\n        },\n      }),\n  });\n\n  const handleSubmit = async (e) => {\n    // Prevent submitting parent form\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      const txb = new Transaction();\n\n      txb.setGasBudget(100000000);\n      console.log('packageId = ', PACKAGE_ID);\n      await new Promise((resolve, reject) => {\n        txb.moveCall({\n          target: `${PACKAGE_ID}::apply_for_adoption::audit_record`,\n          arguments: [\n            txb.pure.id(record?.contract?.contractAddress),\n            txb.object(CONTRACTS_CONTAINER), // contracts\n            txb.pure.bool(result === 'Pass'),\n            txb.pure.string(comment),\n            txb.object(SUI_SYSTEM_STATE_OBJECT_ID)\n          ],\n          typeArguments: [],\n        });\n        console.log('start txb !!!!!!!!!!!!!!!!!!')\n        // Show loading state\n        setLoading(true);\n\n        signAndExecute(\n          {\n            transaction: txb,\n          },\n          {\n            onSuccess: async (data) => {\n              console.log('transaction digest: ' + JSON.stringify(data));\n              if ((data.effects && data.effects.status.status) === 'success') {\n                const recordRes = await fetchClient.put('/contract-strapi-plugin/records', {\n                  documentId: record?.documentId,\n                  data: {\n                    result,\n                    comment,\n                  },\n                  status: 'published'\n                }); // 更新记录\n                // console.log('更新记录 = ', recordRes)\n              \n                if (recordRes.error) {\n                  reject(new Error(recordRes.error.message));\n                  return\n                }\n        \n                await new Promise(res => setTimeout(res, 500));\n        \n                const allRecordsRes = await fetchClient.get(`/contract-strapi-plugin/getRecordsByContract/api::record.record?contractId=${record.contract.documentId}`);\n                console.log('所有记录 = ', allRecordsRes)\n                if (allRecordsRes.error) {\n                  reject(new Error(allRecordsRes.error.message));\n                  return\n                }\n                const allRecords = allRecordsRes.data\n                console.log('record.contract = ', record.contract)\n                if (allRecords.length >= record.contract.recordTimes) {\n                  // 通过次数够了，更新合同状态\n                  const contractRes = await fetchClient.put(`/contract-strapi-plugin/contracts`, {\n                    documentId: record?.contract?.documentId,\n                    data: {\n                      state: 'complete',\n                      finishDate: new Date().toISOString()\n                    },\n                    status: 'published'\n                  });\n                  console.log('更新合同状态 = ', contractRes)\n                  if (contractRes.error) {\n                    reject(new Error(contractRes.error.message));\n                    return\n                  }\n                }\n              } else {\n                reject(new Error('交易失败: ' + data.digest));\n              }\n            },\n            onError: (err) => {\n              console.error('transaction error: ' + err);\n              reject(err);\n            },\n          }\n        );\n        resolve('');\n      });\n\n      setMessage({\n        type: 'success',\n        msg: '合同创建成功',\n      });\n    } catch (e) {\n      console.error(e);\n      setMessage({\n        type: 'error',\n        msg: e.message,\n      });\n    } finally {\n      setLoading(false);\n      setTimeout(() => {\n        setMessage({\n          type: 'success',\n          msg: '',\n        });\n      }, 5000);\n    }\n  };\n  return (\n    <>\n      {message.msg && (\n        <Alert title=\"Tips\" variant={message.type}>\n          {message.msg}\n        </Alert>\n      )}\n      <Box paddingTop={2} paddingBottom={2}>\n        <Box paddingTop={2}>\n          <Field.Root>\n            <Field.Label>审核结果</Field.Label>\n            <SingleSelect onChange={setResult} value={result}>\n              <SingleSelectOption value=\"Pass\">通过</SingleSelectOption>\n              <SingleSelectOption value=\"Reject\">不通过</SingleSelectOption>\n            </SingleSelect>\n            <Field.Error />\n          </Field.Root>\n        </Box>\n        <Box paddingTop={2}>\n          <Field.Root>\n            <Field.Label>评论</Field.Label>\n            <Textarea\n              placeholder=\"请填写审核评论\"\n              name=\"comment\"\n              onChange={(v) => {\n                setComment(v.target.value);\n              }}\n            />\n            <Field.Error />\n          </Field.Root>\n        </Box>\n      </Box>\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\n        {loading ? '提交中...' : '提交'}\n      </Button>\n    </>\n  );\n};\n\nexport default CreateContractForm;\n","import { Main } from '@strapi/design-system';\r\nimport { useIntl } from 'react-intl';\r\nimport {\r\n  ConnectButton,\r\n  useCurrentAccount,\r\n  useSignAndExecuteTransaction,\r\n  useSuiClient,\r\n} from '@mysten/dapp-kit';\r\nimport { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Flex,\r\n  TextButton,\r\n  Typography,\r\n  TextInput,\r\n  Button,\r\n  Alert,\r\n  Field,\r\n} from '@strapi/design-system';\r\nimport usePetApply from '../hooks/usePetApply';\r\nimport useRecord from '../hooks/useRecord';\r\nimport { getTranslation } from '../utils/getTranslation';\r\nimport { Providers } from '../components/providers/sui-provider';\r\nimport CreateContractForm from '../components/CreateContractForm';\r\nimport ReviewRecordForm from '../components/ReviewRecordForm';\r\n\r\nconst HomePage = () => {\r\n  const { formatMessage } = useIntl();\r\n  const { status, petApplies, refetchPetApplies, model } = usePetApply();\r\n  const { status: recordStatus, record, refetchRecord } = useRecord();\r\n  console.log('model = ', model);\r\n  return (\r\n    <Providers>\r\n      <Box\r\n        aria-labelledy=\"additional-informations\"\r\n        background=\"neutral0\"\r\n        marginTop={4}\r\n        width={'100%'}\r\n      >\r\n        {model === 'api::pet-apply.pet-apply' && (\r\n          <>\r\n            <ConnectButton>连接钱包</ConnectButton>\r\n            <CreateContractForm petApply={petApplies} />\r\n          </>\r\n        )}\r\n        {model === 'api::record.record' && (\r\n          <>\r\n            <ConnectButton>连接钱包</ConnectButton>\r\n            <ReviewRecordForm record={record} />\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nexport { HomePage };\r\n","import { getTranslation } from './utils/getTranslation';\r\nimport { PLUGIN_ID } from './pluginId';\r\nimport { Initializer } from './components/Initializer';\r\nimport { PluginIcon } from './components/PluginIcon';\r\nimport { HomePage as CreateContract } from './pages/HomePage';\r\n\r\nexport default {\r\n  register(app) {\r\n    // app.addMenuLink({\r\n    //   to: `plugins/${PluginIcon}`,\r\n    //   icon: PluginIcon,\r\n    //   intlLabel: {\r\n    //     id: `${PLUGIN_ID}.plugin.name`,\r\n    //     defaultMessage: PLUGIN_ID,\r\n    //   },\r\n    //   Component: async () => {\r\n    //     const { App } = await import('./pages/App');\r\n\r\n    //     return App;\r\n    //   },\r\n    // });\r\n\r\n    app.registerPlugin({\r\n      id: PLUGIN_ID,\r\n      initializer: Initializer,\r\n      isReady: false,\r\n      name: PLUGIN_ID,\r\n    });\r\n  },\r\n\r\n  bootstrap(app) {\r\n    app.getPlugin('content-manager').injectComponent('editView', 'right-links', {\r\n      name: PLUGIN_ID,\r\n      Component: CreateContract,\r\n    });\r\n  },\r\n\r\n  async registerTrads({ locales }) {\r\n    return Promise.all(\r\n      locales.map(async (locale) => {\r\n        try {\r\n          const { default: data } = await import(`./translations/${locale}.json`);\r\n\r\n          return { data, locale };\r\n        } catch {\r\n          return { data: {}, locale };\r\n        }\r\n      })\r\n    );\r\n  },\r\n};\r\n"],"names":["usePetApply","useContentManagerContext","record","__typeError","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","_requestId","network","ALPHABET","string","basex","base64String","chunk","bigint","_BcsType","validate","toBytes","array","index","ObjectArg","CallArg","StructTag","TypeTag","Argument","ProgrammableMoveCall","Command","TransactionExpiration","GasData","TransactionData","bcs","ObjectRef","$Intent","NormalizedCallArg","object","_Transaction","CreateContractForm","e","useRecord","ReviewRecordForm","CreateContract"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,YAAY;ACOzB,MAAM,cAAc,CAAC,EAAE,gBAAgB;AAC/B,QAAA,MAAM,OAAO,SAAS;AAE5B,YAAU,MAAM;AACd,QAAI,QAAQ,SAAS;AAAA,EACvB,GAAG,EAAE;AAEE,SAAA;AACT;ACTA,SAASA,gBAAc;AACrB,QAAM,cAAc;AAEpB,QAAM,EAAE,OAAO,IAAI,aAAc,IAAGC,kCAAwB;AAE5D,QAAM,CAAC,QAAQ,SAAS,IAAI,MAAM,SAAS,SAAS;AACpD,QAAM,CAAC,YAAY,aAAa,IAAI,MAAM,SAAS,CAAA,CAAE;AAErD,QAAM,oBAAoB,MAAM,YAAY,YAAY;AACtD,QAAI;AACF,YAAM,EAAE,KAAI,IAAK,MAAM,YAAY;AAAA,QACjC,uCAAuC,KAAK,eAAe,eAAe,KAAK,EAAE;AAAA,MACzF;AAEM,oBAAc,IAAI;AAClB,cAAQ,IAAI,iBAAiB,IAAI;AACjC,gBAAU,SAAS;AAAA,IACpB,SAAQ,GAAG;AACV,gBAAU,OAAO;AAAA,IAClB;AAAA,EACF,GAAE,CAAC,aAAa,IAAI,cAAc,KAAK,CAAC;AAEzC,QAAM,UAAU,MAAM;AACpB;EACJ,GAAK,CAAC,IAAI,cAAc,eAAe,WAAW,iBAAiB,CAAC;AAElE,SAAO,EAAE,QAAQ,YAAY,mBAAmB,MAAK;AACvD;AC3BA,SAAS,cAAc;AACrB,QAAM,cAAc;AAEpB,QAAM,EAAE,OAAO,IAAI,aAAc,IAAGA,kCAAwB;AAE5D,QAAM,CAAC,QAAQ,SAAS,IAAI,MAAM,SAAS,SAAS;AACpD,QAAM,CAACC,SAAQ,SAAS,IAAI,MAAM,SAAS,CAAA,CAAE;AAE7C,QAAM,gBAAgB,MAAM,YAAY,YAAY;AAClD,QAAI;AACF,YAAM,EAAE,KAAI,IAAK,MAAM,YAAY;AAAA,QACjC,qCAAqC,KAAK,eAAe,eAAe,KAAK,EAAE;AAAA,MACvF;AAEM,gBAAU,IAAI;AACd,cAAQ,IAAI,iBAAiB,IAAI;AACjC,gBAAU,SAAS;AAAA,IACpB,SAAQ,GAAG;AACV,gBAAU,OAAO;AAAA,IAClB;AAAA,EACF,GAAE,CAAC,aAAa,IAAI,cAAc,KAAK,CAAC;AAEzC,QAAM,UAAU,MAAM;AACpB;EACJ,GAAK,CAAC,IAAI,cAAc,WAAW,WAAW,aAAa,CAAC;AAE1D,SAAO,EAAE,QAAQ,QAAAA,SAAQ,eAAe,MAAK;AAC/C;ACjCA,MAAM,kBAAkB;AACxB,MAAM,uBAAuB;ACD7B,MAAM,qBAAqB;AAAA,EACzB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AACZ;AACA,MAAM,8BAA8B,MAAM;AAC1C;AACA,MAAM,qBAAqB,sBAAsB;AAAA,EAC/C,YAAY,SAAS,MAAM;AACzB,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,OAAO,mBAAmB,IAAI,KAAK;AAAA,EAC5C;AACA;AACA,MAAM,2BAA2B,sBAAsB;AAAA,EACrD,YAAY,SAAS,QAAQ,YAAY;AACvC,UAAM,OAAO;AACb,SAAK,SAAS;AACd,SAAK,aAAa;AAAA,EACtB;AACA;ACjCA,IAAIC,gBAAc,CAAC,QAAQ;AACzB,QAAM,UAAU,GAAG;AACrB;AACA,IAAIC,kBAAgB,CAAC,KAAK,QAAQ,QAAQ,OAAO,IAAI,GAAG,KAAKD,cAAY,YAAY,GAAG;AACxF,IAAIE,iBAAe,CAAC,KAAK,QAAQ,YAAYD,gBAAc,KAAK,QAAQ,yBAAyB,GAAG,SAAS,OAAO,KAAK,GAAG,IAAI,OAAO,IAAI,GAAG;AAC9I,IAAIE,iBAAe,CAAC,KAAK,QAAQ,UAAU,OAAO,IAAI,GAAG,IAAIH,cAAY,mDAAmD,IAAI,kBAAkB,UAAU,OAAO,IAAI,GAAG,IAAI,OAAO,IAAI,KAAK,KAAK;AACnM,IAAII,iBAAe,CAAC,KAAK,QAAQ,OAAO,YAAYH,gBAAc,KAAK,QAAQ,wBAAwB,GAAsC,OAAO,IAAI,KAAK,KAAK,GAAG;AACrK,IAAII,oBAAkB,CAAC,KAAK,QAAQ,YAAYJ,gBAAc,KAAK,QAAQ,uBAAuB,GAAG;AACrG,IAAI,mBAAmB,CAAC,KAAK,QAAQ,QAAQ,YAAY;AAAA,EACvD,IAAI,EAAE,OAAO;AACXG,mBAAa,KAAK,QAAQ,KAAa;AAAA,EACxC;AAAA,EACD,IAAI,IAAI;AACN,WAAOF,eAAa,KAAK,QAAQ,MAAM;AAAA,EAC3C;AACA;AACA,IAAII,cAAY,cAAc,YAAY,oBAAoB,gBAAgB,kBAAkB,4BAA4B,mBAAmB;AAE/I,SAAS,gBAAgB,SAAS;AAChC,QAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,MAAI,WAAW,IAAI,SAAS,QAAQ,QAAQ,IAAI;AAChD,SAAO,IAAI,SAAU;AACvB;AACA,MAAM,yBAAyB;AAAA;AAAA,EAE7B,sBAAsB,OAAO,cAAc,cAAc,YAAY;AAAA,EACrE,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,eAAe;AACjB;AACA,MAAM,gBAAgB;AAAA,EACpB,YAAY,UAAU,UAAU,IAAI;AAClCH,mBAAa,MAAM,0BAA0B;AAC7CA,mBAAa,MAAMG,cAAY,CAAC;AAChCH,mBAAa,MAAM,cAAc,CAAC;AAClCA,mBAAa,MAAM,YAAY,IAAI;AACnCA,mBAAa,MAAM,oBAAoB,IAAI;AAC3CA,mBAAa,MAAM,gBAAgC,oBAAI,IAAG,CAAE;AAC5DA,mBAAa,MAAM,kBAAkC,oBAAI,IAAG,CAAE;AAC9D,SAAK,WAAW;AAChB,SAAK,UAAU,EAAE,GAAG,wBAAwB,GAAG,QAAS;AACxD,QAAI,CAAC,KAAK,QAAQ,sBAAsB;AACtC,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACrD;AACI,QAAI,KAAK,SAAS,WAAW,MAAM,GAAG;AACpC,WAAK,WAAW,gBAAgB,KAAK,QAAQ;AAAA,IACnD;AAAA,EACA;AAAA,EACE,MAAM,YAAY,QAAQ,QAAQ;AAChC,UAAM,YAAY,MAAME,kBAAgB,MAAM,4BAA4B,iBAAiB,EAAE,KAAK,IAAI;AACtG,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCD,qBAAa,MAAME,cAAYJ,eAAa,MAAMI,YAAU,IAAI,CAAC;AACjEJ,qBAAa,MAAM,gBAAgB,EAAE,IAAIA,eAAa,MAAMI,YAAU,GAAG;AAAA,QACvE;AAAA,QACA;AAAA,QACA,SAAS,WAAW,MAAM;AACxBJ,yBAAa,MAAM,gBAAgB,EAAE,OAAOA,eAAa,MAAMI,YAAU,CAAC;AAC1E,iBAAO,IAAI,MAAM,oBAAoB,MAAM,EAAE,CAAC;AAAA,QACxD,GAAW,KAAK,QAAQ,WAAW;AAAA,MACnC,CAAO;AACD,gBAAU,KAAK,KAAK,UAAU,EAAE,SAAS,OAAO,IAAIJ,eAAa,MAAMI,YAAU,GAAG,QAAQ,OAAQ,CAAA,CAAC;AAAA,IACtG,CAAA,EAAE,KAAK,CAAC,EAAE,OAAO,OAAM,MAAO;AAC7B,UAAI,OAAO;AACT,cAAM,IAAI,aAAa,MAAM,SAAS,MAAM,IAAI;AAAA,MACxD;AACM,aAAO;AAAA,IACb,CAAK;AAAA,EACL;AAAA,EACE,MAAM,UAAU,OAAO;AACrB,UAAM,eAAe,IAAI,gBAAgB,KAAK;AAC9CJ,mBAAa,MAAM,cAAc,EAAE,IAAI,YAAY;AACnD,UAAM,aAAa,UAAU,IAAI;AACjC,WAAO,MAAM,aAAa,YAAY,IAAI;AAAA,EAC9C;AACA;AACAI,eAAa,oBAAI,QAAS;AAC1B,eAAe,oBAAI,QAAS;AAC5B,aAAa,oBAAI,QAAS;AAC1B,qBAAqB,oBAAI,QAAS;AAClC,iBAAiB,oBAAI,QAAS;AAC9B,mBAAmB,oBAAI,QAAS;AAChC,6BAA6B,oBAAI,QAAS;AAC1C,oBAAoB,WAAW;AAC7B,MAAIJ,eAAa,MAAM,kBAAkB,GAAG;AAC1C,WAAOA,eAAa,MAAM,kBAAkB;AAAA,EAChD;AACEE,iBAAa,MAAM,oBAAoB,IAAI,QAAQ,CAAC,YAAY;AAC9DF,mBAAa,MAAM,UAAU,GAAG,MAAO;AACvCE,mBAAa,MAAM,YAAY,IAAI,KAAK,QAAQ,qBAAqB,KAAK,QAAQ,CAAC;AACnFF,mBAAa,MAAM,UAAU,EAAE,iBAAiB,QAAQ,MAAM;AAC5DE,qBAAa,MAAM,cAAc,CAAC;AAClC,cAAQF,eAAa,MAAM,UAAU,CAAC;AAAA,IAC5C,CAAK;AACDA,mBAAa,MAAM,UAAU,EAAE,iBAAiB,SAAS,MAAM;AAC7D,uBAAiB,MAAM,YAAY,EAAE;AACrC,UAAIA,eAAa,MAAM,YAAY,KAAK,KAAK,QAAQ,eAAe;AAClE,mBAAW,MAAM;AACfG,4BAAgB,MAAM,4BAA4B,YAAY,EAAE,KAAK,IAAI;AAAA,QACnF,GAAW,KAAK,QAAQ,gBAAgB;AAAA,MACxC;AAAA,IACA,CAAK;AACDH,mBAAa,MAAM,UAAU,EAAE,iBAAiB,WAAW,CAAC,EAAE,WAAW;AACvE,UAAI;AACJ,UAAI;AACF,eAAO,KAAK,MAAM,IAAI;AAAA,MACvB,SAAQ,OAAO;AACd,gBAAQ,MAAM,IAAI,MAAM,gCAAgC,IAAI,IAAI,EAAE,OAAO,MAAK,CAAE,CAAC;AACjF;AAAA,MACR;AACM,UAAI,QAAQ,QAAQ,KAAK,MAAM,QAAQA,eAAa,MAAM,gBAAgB,EAAE,IAAI,KAAK,EAAE,GAAG;AACxF,cAAM,EAAE,SAAS,UAAU,YAAYA,eAAa,MAAM,gBAAgB,EAAE,IAAI,KAAK,EAAE;AACvF,qBAAa,OAAO;AACpB,iBAAS,IAAI;AAAA,MACrB,WAAiB,YAAY,MAAM;AAC3B,cAAM,EAAE,OAAM,IAAK;AACnBA,uBAAa,MAAM,cAAc,EAAE,QAAQ,CAAC,iBAAiB;AAC3D,cAAI,aAAa,mBAAmB,OAAO,cAAc;AACvD,gBAAI,OAAO,iBAAiB,aAAa,gBAAgB;AACvD,2BAAa,UAAU,OAAO,MAAM;AAAA,YAClD;AAAA,UACA;AAAA,QACA,CAAS;AAAA,MACT;AAAA,IACA,CAAK;AAAA,EACL,CAAG,CAAC;AACF,SAAOA,eAAa,MAAM,kBAAkB;AAC9C;AACA,eAAe,iBAAiB;AAC9BA,iBAAa,MAAM,UAAU,GAAG,MAAO;AACvCE,iBAAa,MAAM,oBAAoB,IAAI;AAC3C,SAAO,QAAQ;AAAA,IACb,CAAC,GAAGF,eAAa,MAAM,cAAc,CAAC,EAAE,IAAI,CAAC,iBAAiB,aAAa,UAAU,IAAI,CAAC;AAAA,EAC3F;AACH;AACA,MAAM,gBAAgB;AAAA,EACpB,YAAY,OAAO;AACjB,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAClB,SAAK,QAAQ;AAAA,EACjB;AAAA,EACE,UAAU,SAAS;AACjB,QAAI,KAAK,YAAY;AACnB,WAAK,MAAM,UAAU,OAAO;AAAA,IAClC;AAAA,EACA;AAAA,EACE,MAAM,YAAY,QAAQ;AACxB,UAAM,EAAE,eAAc,IAAK;AAC3B,SAAK,aAAa;AAClB,QAAI,kBAAkB,KAAM,QAAO;AACnC,SAAK,iBAAiB;AACtB,WAAO,OAAO,YAAY,KAAK,MAAM,aAAa,CAAC,cAAc,CAAC;AAAA,EACtE;AAAA,EACE,MAAM,UAAU,QAAQ;AACtB,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAClB,UAAM,oBAAoB,MAAM,OAAO;AAAA,MACrC,KAAK,MAAM;AAAA,MACX,KAAK,MAAM;AAAA,IACZ;AACD,QAAI,KAAK,YAAY;AACnB,WAAK,iBAAiB;AAAA,IAC5B;AAAA,EACA;AACA;ACnKA,IAAIF,gBAAc,CAAC,QAAQ;AACzB,QAAM,UAAU,GAAG;AACrB;AACA,IAAIC,kBAAgB,CAAC,KAAK,QAAQ,QAAQ,OAAO,IAAI,GAAG,KAAKD,cAAY,YAAY,GAAG;AACxF,IAAIE,iBAAe,CAAC,KAAK,QAAQ,YAAYD,gBAAc,KAAK,QAAQ,yBAAyB,GAAG,SAAS,OAAO,KAAK,GAAG,IAAI,OAAO,IAAI,GAAG;AAC9I,IAAIE,iBAAe,CAAC,KAAK,QAAQ,UAAU,OAAO,IAAI,GAAG,IAAIH,cAAY,mDAAmD,IAAI,kBAAkB,UAAU,OAAO,IAAI,GAAG,IAAI,OAAO,IAAI,KAAK,KAAK;AACnM,IAAII,iBAAe,CAAC,KAAK,QAAQ,OAAO,YAAYH,gBAAc,KAAK,QAAQ,wBAAwB,GAAsC,OAAO,IAAI,KAAK,KAAK,GAAG;AACrK,IAAII,oBAAkB,CAAC,KAAK,QAAQ,YAAYJ,gBAAc,KAAK,QAAQ,uBAAuB,GAAG;AACrG,IAAI,YAAY,UAAU,kBAAkB,6BAA6B;AAIzE,MAAM,iBAAiB;AAAA,EACrB,YAAY,SAAS;AACnBE,mBAAa,MAAM,2BAA2B;AAC9CA,mBAAa,MAAM,YAAY,CAAC;AAChCA,mBAAa,MAAM,QAAQ;AAC3BA,mBAAa,MAAM,gBAAgB;AACnCC,mBAAa,MAAM,UAAU,OAAO;AAAA,EACxC;AAAA,EACE,MAAM,OAAO,MAAM;AACjB,UAAM,UAAUF,eAAa,MAAM,QAAQ,EAAE,SAAS;AACtD,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI;AAAA,QACR;AAAA,MACD;AAAA,IACP;AACI,WAAO,QAAQ,OAAO,IAAI;AAAA,EAC9B;AAAA,EACE,MAAM,QAAQ,OAAO;AACnBE,mBAAa,MAAM,YAAYF,eAAa,MAAM,UAAU,IAAI,CAAC;AACjE,UAAM,MAAM,MAAM,KAAK,MAAMA,eAAa,MAAM,QAAQ,EAAE,KAAK,OAAOA,eAAa,MAAM,QAAQ,EAAE,KAAK;AAAA,MACtG,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,mBAAmB;AAAA,QACnB,sBAAsB;AAAA,QACtB,6BAA6B;AAAA,QAC7B,yBAAyB,MAAM;AAAA,QAC/B,GAAGA,eAAa,MAAM,QAAQ,EAAE,KAAK;AAAA,MACtC;AAAA,MACD,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,IAAIA,eAAa,MAAM,UAAU;AAAA,QACjC,QAAQ,MAAM;AAAA,QACd,QAAQ,MAAM;AAAA,MACf,CAAA;AAAA,IACP,CAAK;AACD,QAAI,CAAC,IAAI,IAAI;AACX,YAAM,IAAI;AAAA,QACR,2BAA2B,IAAI,MAAM;AAAA,QACrC,IAAI;AAAA,QACJ,IAAI;AAAA,MACL;AAAA,IACP;AACI,UAAM,OAAO,MAAM,IAAI,KAAM;AAC7B,QAAI,WAAW,QAAQ,KAAK,SAAS,MAAM;AACzC,YAAM,IAAI,aAAa,KAAK,MAAM,SAAS,KAAK,MAAM,IAAI;AAAA,IAChE;AACI,WAAO,KAAK;AAAA,EAChB;AAAA,EACE,MAAM,UAAU,OAAO;AACrB,UAAM,cAAc,MAAMG,kBAAgB,MAAM,6BAA6B,qBAAqB,EAAE,KAAK,IAAI,EAAE,UAAU,KAAK;AAC9H,WAAO,YAAY,CAAC,CAAC,MAAM,YAAa;AAAA,EAC5C;AACA;AACA,aAAa,oBAAI,QAAS;AAC1B,WAAW,oBAAI,QAAS;AACxB,mBAAmB,oBAAI,QAAS;AAChC,8BAA8B,oBAAI,QAAS;AAC3C,wBAAwB,WAAW;AACjC,MAAI,CAACH,eAAa,MAAM,gBAAgB,GAAG;AACzC,UAAM,uBAAuBA,eAAa,MAAM,QAAQ,EAAE,wBAAwB;AAClF,QAAI,CAAC,sBAAsB;AACzB,YAAM,IAAI;AAAA,QACR;AAAA,MACD;AAAA,IACP;AACIE,mBAAa,MAAM,kBAAkB,IAAI;AAAA,MACvCF,eAAa,MAAM,QAAQ,EAAE,WAAW,OAAOA,eAAa,MAAM,QAAQ,EAAE;AAAA,MAC5E;AAAA,QACE;AAAA,QACA,GAAGA,eAAa,MAAM,QAAQ,EAAE;AAAA,MACxC;AAAA,IACA,CAAK;AAAA,EACL;AACE,SAAOA,eAAa,MAAM,gBAAgB;AAC5C;ACvFA,SAAS,eAAeK,UAAS;AAC/B,UAAQA,UAAO;AAAA,IACb,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,YAAM,IAAI,MAAM,oBAAoBA,QAAO,EAAE;AAAA,EACnD;AACA;ACRA,SAAS,KAAMC,WAAU;AACvB,MAAIA,UAAS,UAAU,KAAK;AAAE,UAAM,IAAI,UAAU,mBAAmB;AAAA,EAAC;AACtE,QAAM,WAAW,IAAI,WAAW,GAAG;AACnC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,CAAC,IAAI;AAAA,EAClB;AACE,WAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ,KAAK;AACxC,UAAM,IAAIA,UAAS,OAAO,CAAC;AAC3B,UAAM,KAAK,EAAE,WAAW,CAAC;AACzB,QAAI,SAAS,EAAE,MAAM,KAAK;AAAE,YAAM,IAAI,UAAU,IAAI,eAAe;AAAA,IAAC;AACpE,aAAS,EAAE,IAAI;AAAA,EACnB;AACE,QAAM,OAAOA,UAAS;AACtB,QAAM,SAASA,UAAS,OAAO,CAAC;AAChC,QAAM,SAAS,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG;AAC5C,QAAM,UAAU,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI;AAC7C,WAAS,OAAQ,QAAQ;AAEvB,QAAI,kBAAkB,WAAY;AAAA,aAAa,YAAY,OAAO,MAAM,GAAG;AACzE,eAAS,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;AAAA,IAC5E,WAAU,MAAM,QAAQ,MAAM,GAAG;AAChC,eAAS,WAAW,KAAK,MAAM;AAAA,IACrC;AACI,QAAI,EAAE,kBAAkB,aAAa;AAAE,YAAM,IAAI,UAAU,qBAAqB;AAAA,IAAC;AACjF,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO;AAAA,IAAE;AAEpC,QAAI,SAAS;AACb,QAAI,SAAS;AACb,QAAI,SAAS;AACb,UAAM,OAAO,OAAO;AACpB,WAAO,WAAW,QAAQ,OAAO,MAAM,MAAM,GAAG;AAC9C;AACA;AAAA,IACN;AAEI,UAAM,QAAS,OAAO,UAAU,UAAU,MAAO;AACjD,UAAM,MAAM,IAAI,WAAW,IAAI;AAE/B,WAAO,WAAW,MAAM;AACtB,UAAI,QAAQ,OAAO,MAAM;AAEzB,UAAI,IAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAK,IAAI,WAAY,QAAQ,IAAK,OAAO,KAAK;AAChF,iBAAU,MAAM,IAAI,GAAG,MAAO;AAC9B,YAAI,GAAG,IAAK,QAAQ,SAAU;AAC9B,gBAAS,QAAQ,SAAU;AAAA,MACnC;AACM,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;AAAA,MAAC;AACpD,eAAS;AACT;AAAA,IACN;AAEI,QAAI,MAAM,OAAO;AACjB,WAAO,QAAQ,QAAQ,IAAI,GAAG,MAAM,GAAG;AACrC;AAAA,IACN;AAEI,QAAI,MAAM,OAAO,OAAO,MAAM;AAC9B,WAAO,MAAM,MAAM,EAAE,KAAK;AAAE,aAAOA,UAAS,OAAO,IAAI,GAAG,CAAC;AAAA,IAAC;AAC5D,WAAO;AAAA,EACX;AACE,WAAS,aAAc,QAAQ;AAC7B,QAAI,OAAO,WAAW,UAAU;AAAE,YAAM,IAAI,UAAU,iBAAiB;AAAA,IAAC;AACxE,QAAI,OAAO,WAAW,GAAG;AAAE,aAAO,IAAI,WAAY;AAAA,IAAA;AAClD,QAAI,MAAM;AAEV,QAAI,SAAS;AACb,QAAI,SAAS;AACb,WAAO,OAAO,GAAG,MAAM,QAAQ;AAC7B;AACA;AAAA,IACN;AAEI,UAAM,QAAU,OAAO,SAAS,OAAO,SAAU,MAAO;AACxD,UAAM,OAAO,IAAI,WAAW,IAAI;AAEhC,WAAO,OAAO,GAAG,GAAG;AAElB,UAAI,QAAQ,SAAS,OAAO,WAAW,GAAG,CAAC;AAE3C,UAAI,UAAU,KAAK;AAAE;AAAA,MAAM;AAC3B,UAAI,IAAI;AACR,eAAS,MAAM,OAAO,IAAI,UAAU,KAAK,IAAI,WAAY,QAAQ,IAAK,OAAO,KAAK;AAChF,iBAAU,OAAO,KAAK,GAAG,MAAO;AAChC,aAAK,GAAG,IAAK,QAAQ,QAAS;AAC9B,gBAAS,QAAQ,QAAS;AAAA,MAClC;AACM,UAAI,UAAU,GAAG;AAAE,cAAM,IAAI,MAAM,gBAAgB;AAAA,MAAC;AACpD,eAAS;AACT;AAAA,IACN;AAEI,QAAI,MAAM,OAAO;AACjB,WAAO,QAAQ,QAAQ,KAAK,GAAG,MAAM,GAAG;AACtC;AAAA,IACN;AACI,UAAM,MAAM,IAAI,WAAW,UAAU,OAAO,IAAI;AAChD,QAAI,IAAI;AACR,WAAO,QAAQ,MAAM;AACnB,UAAI,GAAG,IAAI,KAAK,KAAK;AAAA,IAC3B;AACI,WAAO;AAAA,EACX;AACE,WAAS,OAAQC,SAAQ;AACvB,UAAM,SAAS,aAAaA,OAAM;AAClC,QAAI,QAAQ;AAAE,aAAO;AAAA,IAAM;AAC3B,UAAM,IAAI,MAAM,aAAa,OAAO,YAAY;AAAA,EACpD;AACE,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA;ACrHA,IAAI,WAAW;AACf,MAAeC,OAAAA,KAAM,QAAQ;ACD7B,MAAM,WAAW,CAAC,WAAW,KAAK,OAAO,MAAM;AAC/C,MAAM,aAAa,CAAC,QAAQ,KAAK,OAAO,GAAG;ACF3C,SAAS,WAAWC,eAAc;AAChC,SAAO,WAAW,KAAK,KAAKA,aAAY,GAAG,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC;AACzE;AACA,MAAM,aAAa;AACnB,SAAS,SAAS,OAAO;AACvB,MAAI,MAAM,SAAS,YAAY;AAC7B,WAAO,KAAK,OAAO,aAAa,GAAG,KAAK,CAAC;AAAA,EAC7C;AACE,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,YAAY;AACjD,UAAMC,SAAQ,MAAM,MAAM,GAAG,IAAI,UAAU;AAC3C,cAAU,OAAO,aAAa,GAAGA,MAAK;AAAA,EAC1C;AACE,SAAO,KAAK,MAAM;AACpB;ACdA,SAAS,QAAQ,QAAQ;AACvB,QAAM,aAAa,OAAO,WAAW,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI;AAC/D,QAAM,SAAS,WAAW,SAAS,MAAM,IAAI,aAAa,IAAI,UAAU;AACxE,QAAM,SAAS,OAAO,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,SAAS,MAAM,EAAE,CAAC,KAAK,CAAE;AACvF,MAAI,OAAO,WAAW,OAAO,SAAS,GAAG;AACvC,UAAM,IAAI,MAAM,sBAAsB,MAAM,EAAE;AAAA,EAClD;AACE,SAAO,WAAW,KAAK,MAAM;AAC/B;AACA,SAAS,MAAM,OAAO;AACpB,SAAO,MAAM,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,GAAG,EAAE;AACjF;ACXA,SAAS,WAAW,KAAK;AACvB,MAAI,MAAM,CAAE;AACZ,MAAI,MAAM;AACV,MAAI,QAAQ,GAAG;AACb,WAAO,CAAC,CAAC;AAAA,EACb;AACE,SAAO,MAAM,GAAG;AACd,QAAI,GAAG,IAAI,MAAM;AACjB,QAAI,QAAQ,GAAG;AACb,UAAI,GAAG,KAAK;AAAA,IAClB;AACI,WAAO;AAAA,EACX;AACE,SAAO;AACT;AACA,SAAS,WAAW,KAAK;AACvB,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,MAAI,MAAM;AACV,SAAO,MAAM;AACX,QAAI,OAAO,IAAI,GAAG;AAClB,WAAO;AACP,cAAU,OAAO,QAAQ;AACzB,SAAK,OAAO,SAAS,GAAG;AACtB;AAAA,IACN;AACI,aAAS;AAAA,EACb;AACE,SAAO;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,EACT;AACH;AC/BA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,EAId,YAAY,MAAM;AAChB,SAAK,eAAe;AACpB,SAAK,WAAW,IAAI,SAAS,KAAK,MAAM;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,MAAM,OAAO;AACX,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,QAAQ;AACN,QAAI,QAAQ,KAAK,SAAS,SAAS,KAAK,YAAY;AACpD,SAAK,MAAM,CAAC;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,SAAS;AACP,QAAI,QAAQ,KAAK,SAAS,UAAU,KAAK,cAAc,IAAI;AAC3D,SAAK,MAAM,CAAC;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,SAAS;AACP,QAAI,QAAQ,KAAK,SAAS,UAAU,KAAK,cAAc,IAAI;AAC3D,SAAK,MAAM,CAAC;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,SAAS;AACP,QAAI,SAAS,KAAK,OAAQ;AAC1B,QAAI,SAAS,KAAK,OAAQ;AAC1B,QAAI,SAAS,OAAO,SAAS,EAAE,IAAI,OAAO,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AACtE,WAAO,OAAO,OAAO,MAAM,EAAE,SAAS,EAAE;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAIE,UAAU;AACR,QAAI,SAAS,OAAO,KAAK,OAAM,CAAE;AACjC,QAAI,SAAS,OAAO,KAAK,OAAM,CAAE;AACjC,QAAI,SAAS,OAAO,SAAS,EAAE,IAAI,OAAO,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AACvE,WAAO,OAAO,OAAO,MAAM,EAAE,SAAS,EAAE;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,UAAU;AACR,QAAI,SAAS,OAAO,KAAK,QAAO,CAAE;AAClC,QAAI,SAAS,OAAO,KAAK,QAAO,CAAE;AAClC,QAAI,SAAS,OAAO,SAAS,EAAE,IAAI,OAAO,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AACvE,WAAO,OAAO,OAAO,MAAM,EAAE,SAAS,EAAE;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,UAAU,KAAK;AACb,QAAI,QAAQ,KAAK,eAAe,KAAK,SAAS;AAC9C,QAAI,QAAQ,IAAI,WAAW,KAAK,SAAS,QAAQ,OAAO,GAAG;AAC3D,SAAK,MAAM,GAAG;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAME,WAAW;AACT,QAAI,QAAQ,KAAK,eAAe,KAAK,SAAS;AAC9C,QAAI,SAAS,IAAI,WAAW,KAAK,SAAS,QAAQ,KAAK;AACvD,QAAI,EAAE,OAAO,WAAW,WAAW,MAAM;AACzC,SAAK,MAAM,MAAM;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,QAAQ,IAAI;AACV,QAAI,SAAS,KAAK,SAAU;AAC5B,QAAI,SAAS,CAAE;AACf,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,aAAO,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC;AAAA,IACrC;AACI,WAAO;AAAA,EACX;AACA;AC5GA,SAAS,UAAU,MAAM,UAAU;AACjC,UAAQ,UAAQ;AAAA,IACd,KAAK;AACH,aAAO,SAAS,IAAI;AAAA,IACtB,KAAK;AACH,aAAO,SAAS,IAAI;AAAA,IACtB,KAAK;AACH,aAAO,MAAM,IAAI;AAAA,IACnB;AACE,YAAM,IAAI,MAAM,yDAAyD;AAAA,EAC/E;AACA;AAaA,SAAS,uBAAuB,KAAK,oBAAoB,CAAC,KAAK,GAAG,GAAG;AACnE,QAAM,CAAC,MAAM,KAAK,IAAI;AACtB,QAAM,MAAM,CAAE;AACd,MAAI,OAAO;AACX,MAAI,sBAAsB;AAC1B,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAM,OAAO,IAAI,CAAC;AAClB,QAAI,SAAS,MAAM;AACjB;AAAA,IACN;AACI,QAAI,SAAS,OAAO;AAClB;AAAA,IACN;AACI,QAAI,wBAAwB,KAAK,SAAS,KAAK;AAC7C,UAAI,KAAK,KAAK,MAAM;AACpB,aAAO;AACP;AAAA,IACN;AACI,YAAQ;AAAA,EACZ;AACE,MAAI,KAAK,KAAK,MAAM;AACpB,SAAO;AACT;AC/CA,MAAM,UAAU;AAAA,EACd,YAAY;AAAA,IACV,cAAc;AAAA,IACd,UAAU;AAAA,IACV,eAAe;AAAA,EAChB,IAAG,IAAI;AACN,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,SAAK,WAAW,IAAI,SAAS,IAAI,YAAY,WAAW,CAAC;AAAA,EAC7D;AAAA,EACE,iBAAiB,OAAO;AACtB,UAAM,eAAe,KAAK,eAAe;AACzC,QAAI,eAAe,KAAK,MAAM;AAC5B,YAAM,WAAW,KAAK,IAAI,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY;AACrE,UAAI,eAAe,UAAU;AAC3B,cAAM,IAAI;AAAA,UACR,yFAAyF,KAAK,IAAI,eAAe,KAAK,OAAO,oBAAoB,YAAY;AAAA,QAC9J;AAAA,MACT;AACM,WAAK,OAAO;AACZ,YAAM,aAAa,IAAI,YAAY,KAAK,IAAI;AAC5C,UAAI,WAAW,UAAU,EAAE,IAAI,IAAI,WAAW,KAAK,SAAS,MAAM,CAAC;AACnE,WAAK,WAAW,IAAI,SAAS,UAAU;AAAA,IAC7C;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,MAAM,OAAO;AACX,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAME,OAAO,OAAO;AACZ,SAAK,iBAAiB,CAAC;AACvB,SAAK,SAAS,SAAS,KAAK,cAAc,OAAO,KAAK,CAAC;AACvD,WAAO,KAAK,MAAM,CAAC;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAME,QAAQ,OAAO;AACb,SAAK,iBAAiB,CAAC;AACvB,SAAK,SAAS,UAAU,KAAK,cAAc,OAAO,KAAK,GAAG,IAAI;AAC9D,WAAO,KAAK,MAAM,CAAC;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAME,QAAQ,OAAO;AACb,SAAK,iBAAiB,CAAC;AACvB,SAAK,SAAS,UAAU,KAAK,cAAc,OAAO,KAAK,GAAG,IAAI;AAC9D,WAAO,KAAK,MAAM,CAAC;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAME,QAAQ,OAAO;AACb,mBAAe,OAAO,KAAK,GAAG,CAAC,EAAE,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;AAChE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,SAAS,OAAO;AACd,mBAAe,OAAO,KAAK,GAAG,EAAE,EAAE,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;AACjE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,SAAS,OAAO;AACd,mBAAe,OAAO,KAAK,GAAG,EAAE,EAAE,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;AACjE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOE,UAAU,OAAO;AACf,eAAW,KAAK,EAAE,QAAQ,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;AACjD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASE,SAAS,QAAQ,IAAI;AACnB,SAAK,UAAU,OAAO,MAAM;AAC5B,UAAM,KAAK,MAAM,EAAE,QAAQ,CAAC,IAAI,MAAM,GAAG,MAAM,IAAI,GAAG,OAAO,MAAM,CAAC;AACpE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,EAAE,OAAO,QAAQ,IAAI;AACnB,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,KAAK;AAC1C,YAAM,KAAK,SAAS,SAAS,CAAC;AAAA,IACpC;AACI,WAAO,KAAK,QAAS;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,UAAU;AACR,WAAO,IAAI,WAAW,KAAK,SAAS,OAAO,MAAM,GAAG,KAAK,YAAY,CAAC;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKE,SAAS,UAAU;AACjB,WAAO,UAAU,KAAK,QAAO,GAAI,QAAQ;AAAA,EAC7C;AACA;AACA,SAAS,eAAeC,SAAQ,MAAM;AACpC,MAAI,SAAS,IAAI,WAAW,IAAI;AAChC,MAAI,IAAI;AACR,SAAOA,UAAS,GAAG;AACjB,WAAO,CAAC,IAAI,OAAOA,UAAS,OAAO,GAAG,CAAC;AACvC,IAAAA,UAASA,UAAS,OAAO,GAAG;AAC5B,SAAK;AAAA,EACT;AACE,SAAO;AACT;AC3JA,IAAIb,gBAAc,CAAC,QAAQ;AACzB,QAAM,UAAU,GAAG;AACrB;AACA,IAAIC,kBAAgB,CAAC,KAAK,QAAQ,QAAQ,OAAO,IAAI,GAAG,KAAKD,cAAY,YAAY,GAAG;AACxF,IAAIE,iBAAe,CAAC,KAAK,QAAQ,YAAYD,gBAAc,KAAK,QAAQ,yBAAyB,GAAG,SAAS,OAAO,KAAK,GAAG,IAAI,OAAO,IAAI,GAAG;AAC9I,IAAIE,iBAAe,CAAC,KAAK,QAAQ,UAAU,OAAO,IAAI,GAAG,IAAIH,cAAY,mDAAmD,IAAI,kBAAkB,UAAU,OAAO,IAAI,GAAG,IAAI,OAAO,IAAI,KAAK,KAAK;AACnM,IAAII,iBAAe,CAAC,KAAK,QAAQ,OAAO,YAAYH,gBAAc,KAAK,QAAQ,wBAAwB,GAAsC,OAAO,IAAI,KAAK,KAAK,GAAG;AACrK,IAAI,QAAQ,YAAY,SAAS;AAOjC,MAAM,WAAW,MAAMa,UAAS;AAAA,EAC9B,YAAY,SAAS;AACnBX,mBAAa,MAAM,MAAM;AACzBA,mBAAa,MAAM,UAAU;AAC7B,SAAK,OAAO,QAAQ;AACpB,SAAK,OAAO,QAAQ;AACpB,SAAK,iBAAiB,QAAQ,mBAAmB,MAAM;AACvDC,mBAAa,MAAM,QAAQ,QAAQ,KAAK;AACxCA,mBAAa,MAAM,YAAY,QAAQ,cAAc,CAAC,OAAO,aAAa;AACxE,YAAM,SAAS,IAAI,UAAU;AAAA,QAC3B,aAAa,KAAK,eAAe,KAAK,KAAK;AAAA,QAC3C,GAAG;AAAA,MACX,CAAO;AACDF,qBAAa,MAAM,MAAM,EAAE,KAAK,MAAM,OAAO,MAAM;AACnD,aAAO,OAAO,QAAS;AAAA,IAC7B,EAAM;AACF,SAAK,WAAW,QAAQ,aAAa,MAAM;AAAA,IAC/C;AAAA,EACA;AAAA,EACE,MAAM,OAAO,QAAQ;AACnB,SAAK,SAAS,KAAK;AACnBA,mBAAa,MAAM,MAAM,EAAE,KAAK,MAAM,OAAO,MAAM;AAAA,EACvD;AAAA,EACE,UAAU,OAAO,SAAS;AACxB,SAAK,SAAS,KAAK;AACnB,WAAO,IAAI,cAAc,MAAMA,eAAa,MAAM,UAAU,EAAE,KAAK,MAAM,OAAO,OAAO,CAAC;AAAA,EAC5F;AAAA,EACE,MAAM,OAAO;AACX,UAAM,SAAS,IAAI,UAAU,KAAK;AAClC,WAAO,KAAK,KAAK,MAAM;AAAA,EAC3B;AAAA,EACE,QAAQ,KAAK;AACX,WAAO,KAAK,MAAM,QAAQ,GAAG,CAAC;AAAA,EAClC;AAAA,EACE,WAAW,KAAK;AACd,WAAO,KAAK,MAAM,WAAW,GAAG,CAAC;AAAA,EACrC;AAAA,EACE,WAAW,KAAK;AACd,WAAO,KAAK,MAAM,WAAW,GAAG,CAAC;AAAA,EACrC;AAAA,EACE,UAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAAa;AAAA,EACJ,GAAK;AACD,WAAO,IAAID,UAAS;AAAA,MAClB,MAAM,QAAQ,KAAK;AAAA,MACnB,MAAM,CAAC,WAAW,SAAS,OAAO,KAAK,KAAK,MAAM,CAAC,IAAI,KAAK,KAAK,MAAM;AAAA,MACvE,OAAO,CAAC,OAAO,WAAWZ,eAAa,MAAM,MAAM,EAAE,KAAK,MAAM,QAAQ,MAAM,KAAK,IAAI,OAAO,MAAM;AAAA,MACpG,gBAAgB,CAAC,UAAU,KAAK,eAAe,QAAQ,MAAM,KAAK,IAAI,KAAK;AAAA,MAC3E,WAAW,CAAC,OAAO,YAAYA,eAAa,MAAM,UAAU,EAAE,KAAK,MAAM,QAAQ,MAAM,KAAK,IAAI,OAAO,OAAO;AAAA,MAC9G,UAAU,CAAC,UAAU;AACnB,QAAAa,YAAW,KAAK;AAChB,aAAK,SAAS,QAAQ,MAAM,KAAK,IAAI,KAAK;AAAA,MAClD;AAAA,IACA,CAAK;AAAA,EACL;AACA;AACA,SAAS,oBAAI,QAAS;AACtB,aAAa,oBAAI,QAAS;AAC1B,IAAI,UAAU;AACd,MAAM,uBAAuB,OAAO,IAAI,wBAAwB;AAChE,SAAS,gBAAgB,KAAK;AAC5B,SAAO,CAAC,CAAC,OAAO,OAAO,QAAQ,YAAY,IAAI,oBAAoB,MAAM;AAC3E;AACA,MAAM,cAAc;AAAA,EAClB,YAAY,MAAM,QAAQ;AACxBZ,mBAAa,MAAM,OAAO;AAC1BA,mBAAa,MAAM,MAAM;AACzBC,mBAAa,MAAM,SAAS,IAAI;AAChCA,mBAAa,MAAM,QAAQ,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA,EAGE,KAAK,oBAAoB,IAAI;AAC3B,WAAO;AAAA,EACX;AAAA,EACE,UAAU;AACR,WAAOF,eAAa,MAAM,MAAM;AAAA,EACpC;AAAA,EACE,QAAQ;AACN,WAAO,MAAMA,eAAa,MAAM,MAAM,CAAC;AAAA,EAC3C;AAAA,EACE,WAAW;AACT,WAAO,SAASA,eAAa,MAAM,MAAM,CAAC;AAAA,EAC9C;AAAA,EACE,WAAW;AACT,WAAO,SAASA,eAAa,MAAM,MAAM,CAAC;AAAA,EAC9C;AAAA,EACE,QAAQ;AACN,WAAOA,eAAa,MAAM,OAAO,EAAE,MAAMA,eAAa,MAAM,MAAM,CAAC;AAAA,EACvE;AACA;AACA,UAAU,oBAAI,QAAS;AACvB,SAAS,oBAAI,QAAS;AACtB,SAAS,iBAAiB;AAAA,EACxB;AAAA,EACA,GAAG;AACL,GAAG;AACD,SAAO,IAAI,QAAQ;AAAA,IACjB,GAAG;AAAA,IACH,gBAAgB,MAAM;AAAA,EAC1B,CAAG;AACH;AACA,SAAS,YAAY;AAAA,EACnB;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG;AACD,SAAO,iBAAiB;AAAA,IACtB,GAAG;AAAA,IACH,MAAM,CAAC,WAAW,OAAO,UAAU,EAAG;AAAA,IACtC,OAAO,CAAC,OAAO,WAAW,OAAO,WAAW,EAAE,KAAK;AAAA,IACnD,UAAU,CAAC,UAAU;AACnB,UAAI,QAAQ,KAAK,QAAQ,QAAQ,UAAU;AACzC,cAAM,IAAI;AAAA,UACR,WAAW,QAAQ,IAAI,WAAW,KAAK,+BAA+B,QAAQ,QAAQ;AAAA,QACvF;AAAA,MACT;AACM,cAAQ,WAAW,KAAK;AAAA,IAC9B;AAAA,EACA,CAAG;AACH;AACA,SAAS,eAAe;AAAA,EACtB;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG;AACD,SAAO,iBAAiB;AAAA,IACtB,GAAG;AAAA,IACH,MAAM,CAAC,WAAW,OAAO,UAAU,EAAG;AAAA,IACtC,OAAO,CAAC,OAAO,WAAW,OAAO,WAAW,EAAE,OAAO,KAAK,CAAC;AAAA,IAC3D,UAAU,CAAC,QAAQ;AACjB,YAAM,QAAQ,OAAO,GAAG;AACxB,UAAI,QAAQ,KAAK,QAAQ,QAAQ,UAAU;AACzC,cAAM,IAAI;AAAA,UACR,WAAW,QAAQ,IAAI,WAAW,KAAK,+BAA+B,QAAQ,QAAQ;AAAA,QACvF;AAAA,MACT;AACM,cAAQ,WAAW,KAAK;AAAA,IAC9B;AAAA,EACA,CAAG;AACH;AACA,SAAS,mBAAmB;AAAA,EAC1B;AAAA,EACA,GAAG;AACL,GAAG;AACD,QAAM,OAAO,IAAI,QAAQ;AAAA,IACvB,GAAG;AAAA,IACH;AAAA,IACA,OAAO,CAAC,OAAO,WAAW;AACxB,iBAAW,QAAQ,KAAK,UAAU,KAAK,EAAE,WAAW;AAClD,eAAO,OAAO,IAAI;AAAA,MAC1B;AAAA,IACA;AAAA,EACA,CAAG;AACD,SAAO;AACT;AACA,SAAS,kBAAkB;AAAA,EACzB,SAAAc;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG;AACD,SAAO,IAAI,QAAQ;AAAA,IACjB,GAAG;AAAA,IACH,MAAM,CAAC,WAAW;AAChB,YAAM,SAAS,OAAO,SAAU;AAChC,YAAM,QAAQ,OAAO,UAAU,MAAM;AACrC,aAAO,UAAU,KAAK;AAAA,IACvB;AAAA,IACD,OAAO,CAAC,KAAK,WAAW;AACtB,YAAM,QAAQA,SAAQ,GAAG;AACzB,aAAO,UAAU,MAAM,MAAM;AAC7B,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,eAAO,OAAO,MAAM,CAAC,CAAC;AAAA,MAC9B;AAAA,IACK;AAAA,IACD,WAAW,CAAC,UAAU;AACpB,YAAM,QAAQA,SAAQ,KAAK;AAC3B,YAAM,OAAO,WAAW,MAAM,MAAM;AACpC,YAAM,SAAS,IAAI,WAAW,KAAK,SAAS,MAAM,MAAM;AACxD,aAAO,IAAI,MAAM,CAAC;AAClB,aAAO,IAAI,OAAO,KAAK,MAAM;AAC7B,aAAO;AAAA,IACR;AAAA,IACD,UAAU,CAAC,UAAU;AACnB,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,IAAI,UAAU,WAAW,QAAQ,IAAI,WAAW,KAAK,mBAAmB;AAAA,MACtF;AACM,cAAQ,WAAW,KAAK;AAAA,IAC9B;AAAA,EACA,CAAG;AACH;AACA,SAAS,YAAY,IAAI;AACvB,MAAI,WAAW;AACf,WAAS,UAAU;AACjB,QAAI,CAAC,UAAU;AACb,iBAAW,GAAI;AAAA,IACrB;AACI,WAAO;AAAA,EACX;AACE,SAAO,IAAI,QAAQ;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,CAAC,SAAS,QAAO,EAAG,KAAK,IAAI;AAAA,IACnC,gBAAgB,CAAC,UAAU,QAAO,EAAG,eAAe,KAAK;AAAA,IACzD,OAAO,CAAC,OAAO,WAAW,QAAO,EAAG,MAAM,OAAO,MAAM;AAAA,IACvD,WAAW,CAAC,OAAO,YAAY,QAAS,EAAC,UAAU,OAAO,OAAO,EAAE,QAAO;AAAA,EAC9E,CAAG;AACH;ACrNA,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMV,GAAG,SAAS;AACV,WAAO,YAAY;AAAA,MACjB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,KAAK,IAAI;AAAA,MACnB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,SAAS;AACX,WAAO,YAAY;AAAA,MACjB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,KAAK,KAAK;AAAA,MACpB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,SAAS;AACX,WAAO,YAAY;AAAA,MACjB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,KAAK,KAAK;AAAA,MACpB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,SAAS;AACX,WAAO,eAAe;AAAA,MACpB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,MAAM,MAAM;AAAA,MACtB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAK,SAAS;AACZ,WAAO,eAAe;AAAA,MACpB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,MAAM,OAAO;AAAA,MACvB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAK,SAAS;AACZ,WAAO,eAAe;AAAA,MACpB,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,MAAM;AAAA,MACN,UAAU,MAAM,OAAO;AAAA,MACvB,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAK,SAAS;AACZ,WAAO,iBAAiB;AAAA,MACtB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,OAAO,MAAO,MAAK;AAAA,MACrC,OAAO,CAAC,OAAO,WAAW,OAAO,OAAO,QAAQ,IAAI,CAAC;AAAA,MACrD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,OAAO,UAAU,WAAW;AAC9B,gBAAM,IAAI,UAAU,2BAA2B,OAAO,KAAK,EAAE;AAAA,QACvE;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQ,SAAS;AACf,WAAO,mBAAmB;AAAA,MACxB,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,OAAO,SAAU;AAAA,MACnC,WAAW,CAAC,UAAU;AACpB,eAAO,WAAW,KAAK,WAAW,KAAK,CAAC;AAAA,MACzC;AAAA,MACD,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,MAAM,SAAS;AACnB,WAAO,iBAAiB;AAAA,MACtB,MAAM,SAAS,IAAI;AAAA,MACnB;AAAA,MACA,MAAM,CAAC,WAAW,OAAO,UAAU,IAAI;AAAA,MACvC,OAAO,CAAC,OAAO,WAAW;AACxB,cAAMC,SAAQ,IAAI,WAAW,KAAK;AAClC,iBAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,iBAAO,OAAOA,OAAM,CAAC,KAAK,CAAC;AAAA,QACrC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,CAAC,SAAS,OAAO,UAAU,YAAY,EAAE,YAAY,QAAQ;AAC/D,gBAAM,IAAI,UAAU,yBAAyB,OAAO,KAAK,EAAE;AAAA,QACrE;AACQ,YAAI,MAAM,WAAW,MAAM;AACzB,gBAAM,IAAI,UAAU,4BAA4B,IAAI,WAAW,MAAM,MAAM,EAAE;AAAA,QACvF;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,WAAW,SAAS;AAClB,WAAO,IAAI,QAAQ;AAAA,MACjB,MAAM;AAAA,MACN,MAAM,CAAC,WAAW;AAChB,cAAM,SAAS,OAAO,SAAU;AAChC,eAAO,OAAO,UAAU,MAAM;AAAA,MAC/B;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,cAAMA,SAAQ,IAAI,WAAW,KAAK;AAClC,eAAO,UAAUA,OAAM,MAAM;AAC7B,iBAAS,IAAI,GAAG,IAAIA,OAAM,QAAQ,KAAK;AACrC,iBAAO,OAAOA,OAAM,CAAC,KAAK,CAAC;AAAA,QACrC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,gBAAgB,CAAC,UAAU;AACzB,cAAM,SAAS,YAAY,QAAQ,MAAM,SAAS;AAClD,eAAO,UAAU,OAAO,OAAO,WAAW,MAAM,EAAE,SAAS;AAAA,MAC5D;AAAA,MACD,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,CAAC,SAAS,OAAO,UAAU,YAAY,EAAE,YAAY,QAAQ;AAC/D,gBAAM,IAAI,UAAU,yBAAyB,OAAO,KAAK,EAAE;AAAA,QACrE;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,SAAS;AACd,WAAO,kBAAkB;AAAA,MACvB,MAAM;AAAA,MACN,SAAS,CAAC,UAAU,IAAI,YAAW,EAAG,OAAO,KAAK;AAAA,MAClD,WAAW,CAAC,UAAU,IAAI,YAAW,EAAG,OAAO,KAAK;AAAA,MACpD,GAAG;AAAA,IACT,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,WAAW,MAAM,MAAM,SAAS;AAC9B,WAAO,IAAI,QAAQ;AAAA,MACjB,MAAM,GAAG,KAAK,IAAI,IAAI,IAAI;AAAA,MAC1B,MAAM,CAAC,WAAW;AAChB,cAAM,SAAS,IAAI,MAAM,IAAI;AAC7B,iBAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,iBAAO,CAAC,IAAI,KAAK,KAAK,MAAM;AAAA,QACtC;AACQ,eAAO;AAAA,MACR;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,mBAAW,QAAQ,OAAO;AACxB,eAAK,MAAM,MAAM,MAAM;AAAA,QACjC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,CAAC,SAAS,OAAO,UAAU,YAAY,EAAE,YAAY,QAAQ;AAC/D,gBAAM,IAAI,UAAU,yBAAyB,OAAO,KAAK,EAAE;AAAA,QACrE;AACQ,YAAI,MAAM,WAAW,MAAM;AACzB,gBAAM,IAAI,UAAU,4BAA4B,IAAI,WAAW,MAAM,MAAM,EAAE;AAAA,QACvF;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,MAAM;AACX,WAAO,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK;AAAA,MACtC,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAA,EAAE,UAAU;AAAA,MACX,OAAO,CAAC,UAAU;AAChB,YAAI,SAAS,MAAM;AACjB,iBAAO,EAAE,MAAM,KAAM;AAAA,QAC/B;AACQ,eAAO,EAAE,MAAM,MAAO;AAAA,MACvB;AAAA,MACD,QAAQ,CAAC,UAAU;AACjB,YAAI,MAAM,UAAU,QAAQ;AAC1B,iBAAO,MAAM;AAAA,QACvB;AACQ,eAAO;AAAA,MACf;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,MAAM,SAAS;AACpB,WAAO,IAAI,QAAQ;AAAA,MACjB,MAAM,UAAU,KAAK,IAAI;AAAA,MACzB,MAAM,CAAC,WAAW;AAChB,cAAM,SAAS,OAAO,SAAU;AAChC,cAAM,SAAS,IAAI,MAAM,MAAM;AAC/B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,iBAAO,CAAC,IAAI,KAAK,KAAK,MAAM;AAAA,QACtC;AACQ,eAAO;AAAA,MACR;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,eAAO,UAAU,MAAM,MAAM;AAC7B,mBAAW,QAAQ,OAAO;AACxB,eAAK,MAAM,MAAM,MAAM;AAAA,QACjC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,CAAC,SAAS,OAAO,UAAU,YAAY,EAAE,YAAY,QAAQ;AAC/D,gBAAM,IAAI,UAAU,yBAAyB,OAAO,KAAK,EAAE;AAAA,QACrE;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,OAAO,SAAS;AACpB,WAAO,IAAI,QAAQ;AAAA,MACjB,MAAM,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC;AAAA,MAC7C,gBAAgB,CAAC,WAAW;AAC1B,YAAI,QAAQ;AACZ,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,OAAO,MAAM,CAAC,EAAE,eAAe,OAAO,CAAC,CAAC;AAC9C,cAAI,QAAQ,MAAM;AAChB,mBAAO;AAAA,UACnB;AACU,mBAAS;AAAA,QACnB;AACQ,eAAO;AAAA,MACR;AAAA,MACD,MAAM,CAAC,WAAW;AAChB,cAAM,SAAS,CAAE;AACjB,mBAAW,QAAQ,OAAO;AACxB,iBAAO,KAAK,KAAK,KAAK,MAAM,CAAC;AAAA,QACvC;AACQ,eAAO;AAAA,MACR;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,CAAC,EAAE,MAAM,MAAM,CAAC,GAAG,MAAM;AAAA,QACzC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACzB,gBAAM,IAAI,UAAU,yBAAyB,OAAO,KAAK,EAAE;AAAA,QACrE;AACQ,YAAI,MAAM,WAAW,MAAM,QAAQ;AACjC,gBAAM,IAAI,UAAU,4BAA4B,MAAM,MAAM,WAAW,MAAM,MAAM,EAAE;AAAA,QAC/F;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,OAAO,MAAM,QAAQ,SAAS;AAC5B,UAAM,iBAAiB,OAAO,QAAQ,MAAM;AAC5C,WAAO,IAAI,QAAQ;AAAA,MACjB;AAAA,MACA,gBAAgB,CAAC,WAAW;AAC1B,YAAI,QAAQ;AACZ,mBAAW,CAAC,OAAO,IAAI,KAAK,gBAAgB;AAC1C,gBAAM,OAAO,KAAK,eAAe,OAAO,KAAK,CAAC;AAC9C,cAAI,QAAQ,MAAM;AAChB,mBAAO;AAAA,UACnB;AACU,mBAAS;AAAA,QACnB;AACQ,eAAO;AAAA,MACR;AAAA,MACD,MAAM,CAAC,WAAW;AAChB,cAAM,SAAS,CAAE;AACjB,mBAAW,CAAC,OAAO,IAAI,KAAK,gBAAgB;AAC1C,iBAAO,KAAK,IAAI,KAAK,KAAK,MAAM;AAAA,QAC1C;AACQ,eAAO;AAAA,MACR;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,mBAAW,CAAC,OAAO,IAAI,KAAK,gBAAgB;AAC1C,eAAK,MAAM,MAAM,KAAK,GAAG,MAAM;AAAA,QACzC;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,OAAO,UAAU,YAAY,SAAS,MAAM;AAC9C,gBAAM,IAAI,UAAU,0BAA0B,OAAO,KAAK,EAAE;AAAA,QACtE;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBD,KAAK,MAAM,QAAQ,SAAS;AAC1B,UAAM,iBAAiB,OAAO,QAAQ,MAAM;AAC5C,WAAO,IAAI,QAAQ;AAAA,MACjB;AAAA,MACA,MAAM,CAAC,WAAW;AAChB,cAAMC,SAAQ,OAAO,SAAU;AAC/B,cAAM,YAAY,eAAeA,MAAK;AACtC,YAAI,CAAC,WAAW;AACd,gBAAM,IAAI,UAAU,iBAAiBA,MAAK,aAAa,IAAI,EAAE;AAAA,QACvE;AACQ,cAAM,CAAC,MAAM,IAAI,IAAI;AACrB,eAAO;AAAA,UACL,CAAC,IAAI,GAAG,MAAM,KAAK,MAAM,KAAK;AAAA,UAC9B,OAAO;AAAA,QACR;AAAA,MACF;AAAA,MACD,OAAO,CAAC,OAAO,WAAW;AACxB,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,QAAQ,KAAK,EAAE;AAAA,UACzC,CAAC,CAAC,KAAK,MAAM,OAAO,OAAO,QAAQ,KAAK;AAAA,QACzC,EAAC,CAAC;AACH,iBAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,gBAAM,CAAC,YAAY,UAAU,IAAI,eAAe,CAAC;AACjD,cAAI,eAAe,OAAO;AACxB,mBAAO,UAAU,CAAC;AAClB,wBAAY,MAAM,KAAK,MAAM;AAC7B;AAAA,UACZ;AAAA,QACA;AAAA,MACO;AAAA,MACD,GAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,iBAAS,WAAW,KAAK;AACzB,YAAI,OAAO,UAAU,YAAY,SAAS,MAAM;AAC9C,gBAAM,IAAI,UAAU,0BAA0B,OAAO,KAAK,EAAE;AAAA,QACtE;AACQ,cAAM,OAAO,OAAO,KAAK,KAAK,EAAE;AAAA,UAC9B,CAAC,MAAM,MAAM,CAAC,MAAM,UAAU,OAAO,OAAO,QAAQ,CAAC;AAAA,QACtD;AACD,YAAI,KAAK,WAAW,GAAG;AACrB,gBAAM,IAAI;AAAA,YACR,2CAA2C,KAAK,MAAM,aAAa,IAAI;AAAA,UACxE;AAAA,QACX;AACQ,cAAM,CAAC,OAAO,IAAI;AAClB,YAAI,CAAC,OAAO,OAAO,QAAQ,OAAO,GAAG;AACnC,gBAAM,IAAI,UAAU,wBAAwB,OAAO,EAAE;AAAA,QAC/D;AAAA,MACA;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,IAAI,SAAS,WAAW;AACtB,WAAO,IAAI,OAAO,IAAI,MAAM,CAAC,SAAS,SAAS,CAAC,CAAC,EAAE,UAAU;AAAA,MAC3D,MAAM,OAAO,QAAQ,IAAI,KAAK,UAAU,IAAI;AAAA,MAC5C,OAAO,CAAC,UAAU;AAChB,eAAO,CAAC,GAAG,MAAM,SAAS;AAAA,MAC3B;AAAA,MACD,QAAQ,CAAC,UAAU;AACjB,cAAM,SAAyB,oBAAI,IAAK;AACxC,mBAAW,CAAC,KAAK,GAAG,KAAK,OAAO;AAC9B,iBAAO,IAAI,KAAK,GAAG;AAAA,QAC7B;AACQ,eAAO;AAAA,MACf;AAAA,IACA,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,KAAK,IAAI;AACP,WAAO,YAAY,EAAE;AAAA,EACzB;AACA;AC7eA,MAAM,mBAAmB;AACzB,SAAS,yBAAyB,OAAO;AACvC,MAAI;AACF,UAAM,SAAS,WAAW,KAAK;AAC/B,WAAO,OAAO,WAAW;AAAA,EAC1B,SAAQ,GAAG;AACV,WAAO;AAAA,EACX;AACA;AACA,MAAM,qBAAqB;AAC3B,SAAS,kBAAkB,OAAO;AAChC,SAAO,MAAM,KAAK,KAAK,iBAAiB,KAAK,MAAM;AACrD;AACA,SAAS,mBAAmB,OAAO;AACjC,SAAO,kBAAkB,KAAK;AAChC;AA0BA,SAAS,oBAAoB,OAAO,aAAa,OAAO;AACtD,MAAI,UAAU,MAAM,YAAa;AACjC,MAAI,CAAC,cAAc,QAAQ,WAAW,IAAI,GAAG;AAC3C,cAAU,QAAQ,MAAM,CAAC;AAAA,EAC7B;AACE,SAAO,KAAK,QAAQ,SAAS,qBAAqB,GAAG,GAAG,CAAC;AAC3D;AACA,SAAS,qBAAqB,OAAO,aAAa,OAAO;AACvD,SAAO,oBAAoB,OAAO,UAAU;AAC9C;AACA,SAAS,MAAM,OAAO;AACpB,SAAO,yBAAyB,KAAK,KAAK,KAAK,MAAM,SAAS,MAAM;AACtE;AACA,SAAS,iBAAiB,OAAO;AAC/B,SAAO,WAAW,KAAK,KAAK,KAAK,MAAM,SAAS,KAAK,IAAI,MAAM,SAAS;AAC1E;ACvDA,MAAM,eAAe;AACrB,MAAM,eAAe;AACrB,MAAM,kBAAkB;AAAA,EACtB,OAAO,aAAa,KAAK,mBAAmB,OAAO;AACjD,QAAI,QAAQ,WAAW;AACrB,aAAO,EAAE,SAAS,KAAM;AAAA,IAC9B,WAAe,QAAQ,QAAQ;AACzB,aAAO,EAAE,MAAM,KAAM;AAAA,IAC3B,WAAe,QAAQ,MAAM;AACvB,aAAO,EAAE,IAAI,KAAM;AAAA,IACzB,WAAe,QAAQ,OAAO;AACxB,aAAO,EAAE,KAAK,KAAM;AAAA,IAC1B,WAAe,QAAQ,OAAO;AACxB,aAAO,EAAE,KAAK,KAAM;AAAA,IAC1B,WAAe,QAAQ,OAAO;AACxB,aAAO,EAAE,KAAK,KAAM;AAAA,IAC1B,WAAe,QAAQ,QAAQ;AACzB,aAAO,EAAE,MAAM,KAAM;AAAA,IAC3B,WAAe,QAAQ,QAAQ;AACzB,aAAO,EAAE,MAAM,KAAM;AAAA,IAC3B,WAAe,QAAQ,UAAU;AAC3B,aAAO,EAAE,QAAQ,KAAM;AAAA,IAC7B;AACI,UAAM,cAAc,IAAI,MAAM,YAAY;AAC1C,QAAI,aAAa;AACf,aAAO;AAAA,QACL,QAAQ,kBAAkB,aAAa,YAAY,CAAC,GAAG,gBAAgB;AAAA,MACxE;AAAA,IACP;AACI,UAAM,cAAc,IAAI,MAAM,YAAY;AAC1C,QAAI,aAAa;AACf,YAAM,UAAU,mBAAmB,oBAAoB,YAAY,CAAC,CAAC,IAAI,YAAY,CAAC;AACtF,aAAO;AAAA,QACL,QAAQ;AAAA,UACN;AAAA,UACA,QAAQ,YAAY,CAAC;AAAA,UACrB,MAAM,YAAY,CAAC;AAAA,UACnB,YAAY,YAAY,CAAC,MAAM,SAAS,CAAA,IAAK,kBAAkB,oBAAoB,YAAY,CAAC,GAAG,gBAAgB;AAAA,QAC7H;AAAA,MACO;AAAA,IACP;AACI,UAAM,IAAI,MAAM,2DAA2D,GAAG,EAAE;AAAA,EACpF;AAAA,EACE,OAAO,oBAAoB,KAAK,mBAAmB,OAAO;AACxD,WAAO,uBAAuB,GAAG,EAAE;AAAA,MACjC,CAAC,QAAQ,kBAAkB,aAAa,KAAK,gBAAgB;AAAA,IAC9D;AAAA,EACL;AAAA,EACE,OAAO,YAAY,KAAK;AACtB,QAAI,UAAU,KAAK;AACjB,aAAO;AAAA,IACb;AACI,QAAI,QAAQ,KAAK;AACf,aAAO;AAAA,IACb;AACI,QAAI,SAAS,KAAK;AAChB,aAAO;AAAA,IACb;AACI,QAAI,SAAS,KAAK;AAChB,aAAO;AAAA,IACb;AACI,QAAI,SAAS,KAAK;AAChB,aAAO;AAAA,IACb;AACI,QAAI,UAAU,KAAK;AACjB,aAAO;AAAA,IACb;AACI,QAAI,UAAU,KAAK;AACjB,aAAO;AAAA,IACb;AACI,QAAI,aAAa,KAAK;AACpB,aAAO;AAAA,IACb;AACI,QAAI,YAAY,KAAK;AACnB,aAAO;AAAA,IACb;AACI,QAAI,YAAY,KAAK;AACnB,aAAO,UAAU,kBAAkB,YAAY,IAAI,MAAM,CAAC;AAAA,IAChE;AACI,QAAI,YAAY,KAAK;AACnB,YAAM,SAAS,IAAI;AACnB,YAAM,aAAa,OAAO,WAAW,IAAI,kBAAkB,WAAW,EAAE,KAAK,IAAI;AACjF,aAAO,GAAG,OAAO,OAAO,KAAK,OAAO,MAAM,KAAK,OAAO,IAAI,GAAG,aAAa,IAAI,UAAU,MAAM,EAAE;AAAA,IACtG;AACI,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AACA;ACrFA,SAAS,WAAW,SAAS;AAC3B,SAAO,IAAI,IAAI;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,EACJ,CAAA,EAAE,UAAU;AAAA,IACX,OAAO,CAAC,QAAQ;AAAA,IAChB,QAAQ,CAAC,QAAQ,OAAO,GAAG;AAAA,EAC/B,CAAG;AACH;AACA,SAAS,WAAW,MAAM;AACxB,SAAO,IAAI,KAAK,UAAU;AAAA,IACxB,MAAM;AAAA,IACN,MAAM;AAAA,EACV,CAAG;AACH;AACA,MAAM,UAAU,IAAI,MAAM,kBAAkB,EAAE,UAAU;AAAA,EACtD,UAAU,CAAC,QAAQ;AACjB,UAAM,UAAU,OAAO,QAAQ,WAAW,MAAM,MAAM,GAAG;AACzD,QAAI,CAAC,WAAW,CAAC,kBAAkB,oBAAoB,OAAO,CAAC,GAAG;AAChE,YAAM,IAAI,MAAM,uBAAuB,OAAO,EAAE;AAAA,IACtD;AAAA,EACG;AAAA,EACD,OAAO,CAAC,QAAQ,OAAO,QAAQ,WAAW,QAAQ,oBAAoB,GAAG,CAAC,IAAI;AAAA,EAC9E,QAAQ,CAAC,QAAQ,oBAAoB,MAAM,GAAG,CAAC;AACjD,CAAC;AACD,MAAM,eAAe,IAAI,OAAO,IAAI,GAAE,CAAE,EAAE,UAAU;AAAA,EAClD,MAAM;AAAA,EACN,OAAO,CAAC,UAAU,WAAW,KAAK;AAAA,EAClC,QAAQ,CAAC,UAAU,SAAS,IAAI,WAAW,KAAK,CAAC;AAAA,EACjD,UAAU,CAAC,UAAU;AACnB,QAAI,WAAW,KAAK,EAAE,WAAW,IAAI;AACnC,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACrD;AAAA,EACA;AACA,CAAC;AACD,MAAM,eAAe,IAAI,OAAO,gBAAgB;AAAA,EAC9C,UAAU;AAAA,EACV,SAAS,IAAI,IAAK;AAAA,EAClB,QAAQ;AACV,CAAC;AACD,MAAM,kBAAkB,IAAI,OAAO,mBAAmB;AAAA,EACpD,UAAU;AAAA,EACV,sBAAsB,IAAI,IAAK;AAAA,EAC/B,SAAS,IAAI,KAAI;AACnB,CAAC;AACD,MAAMC,cAAY,IAAI,KAAK,aAAa;AAAA,EACtC,kBAAkB;AAAA,EAClB,cAAc;AAAA,EACd,WAAW;AACb,CAAC;AACD,MAAMC,YAAU,IAAI,KAAK,WAAW;AAAA,EAClC,MAAM,IAAI,OAAO,QAAQ;AAAA,IACvB,OAAO,IAAI,OAAO,IAAI,GAAE,CAAE,EAAE,UAAU;AAAA,MACpC,OAAO,CAAC,QAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI;AAAA,MAC5D,QAAQ,CAAC,QAAQ,SAAS,IAAI,WAAW,GAAG,CAAC;AAAA,IAC9C,CAAA;AAAA,EACL,CAAG;AAAA,EACD,QAAQD;AACV,CAAC;AACD,MAAM,eAAe,IAAI,KAAK,WAAW;AAAA,EACvC,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ,IAAI,KAAK,MAAM,YAAY;AAAA,EACnC,QAAQ,IAAI,KAAK,MAAME,WAAS;AAAA,EAChC,KAAK;AAAA,EACL,KAAK;AAAA,EACL,MAAM;AACR,CAAC;AACD,MAAMC,YAAU,aAAa,UAAU;AAAA,EACrC,OAAO,CAAC,YAAY,OAAO,YAAY,WAAW,kBAAkB,aAAa,SAAS,IAAI,IAAI;AAAA,EAClG,QAAQ,CAAC,YAAY,kBAAkB,YAAY,OAAO;AAC5D,CAAC;AACD,MAAMC,aAAW,IAAI,KAAK,YAAY;AAAA,EACpC,SAAS;AAAA,EACT,OAAO,IAAI,IAAK;AAAA,EAChB,QAAQ,IAAI,IAAK;AAAA,EACjB,cAAc,IAAI,MAAM,CAAC,IAAI,OAAO,IAAI,KAAK,CAAC;AAChD,CAAC;AACD,MAAMC,yBAAuB,IAAI,OAAO,wBAAwB;AAAA,EAC9D,SAAS;AAAA,EACT,QAAQ,IAAI,OAAQ;AAAA,EACpB,UAAU,IAAI,OAAQ;AAAA,EACtB,eAAe,IAAI,OAAOF,SAAO;AAAA,EACjC,WAAW,IAAI,OAAOC,UAAQ;AAChC,CAAC;AACD,MAAME,YAAU,IAAI,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlC,UAAUD;AAAAA;AAAAA;AAAAA;AAAAA,EAIV,iBAAiB,IAAI,OAAO,mBAAmB;AAAA,IAC7C,SAAS,IAAI,OAAOD,UAAQ;AAAA,IAC5B,SAASA;AAAAA,EACb,CAAG;AAAA;AAAA;AAAA;AAAA,EAID,YAAY,IAAI,OAAO,cAAc;AAAA,IACnC,MAAMA;AAAAA,IACN,SAAS,IAAI,OAAOA,UAAQ;AAAA,EAChC,CAAG;AAAA;AAAA;AAAA;AAAA,EAID,YAAY,IAAI,OAAO,cAAc;AAAA,IACnC,aAAaA;AAAAA,IACb,SAAS,IAAI,OAAOA,UAAQ;AAAA,EAChC,CAAG;AAAA;AAAA;AAAA;AAAA,EAID,SAAS,IAAI,OAAO,WAAW;AAAA,IAC7B,SAAS,IAAI;AAAA,MACX,IAAI,OAAO,IAAI,GAAI,CAAA,EAAE,UAAU;AAAA,QAC7B,OAAO,CAAC,QAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI;AAAA,QAC5D,QAAQ,CAAC,QAAQ,SAAS,IAAI,WAAW,GAAG,CAAC;AAAA,MAC9C,CAAA;AAAA,IACF;AAAA,IACD,cAAc,IAAI,OAAO,OAAO;AAAA,EACpC,CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,IAAI,OAAO,eAAe;AAAA,IACrC,MAAM,WAAWD,SAAO,EAAE,UAAU;AAAA,MAClC,OAAO,CAAC,QAAQ,QAAQ,OAAO;AAAA,QAC7B,MAAM;AAAA,MACd,IAAU;AAAA,QACF,MAAM;AAAA,MACP;AAAA,MACD,QAAQ,CAAC,QAAQ,IAAI,QAAQ;AAAA,IACnC,CAAK;AAAA,IACD,UAAU,IAAI,OAAOC,UAAQ;AAAA,EACjC,CAAG;AAAA,EACD,SAAS,IAAI,OAAO,WAAW;AAAA,IAC7B,SAAS,IAAI;AAAA,MACX,IAAI,OAAO,IAAI,GAAI,CAAA,EAAE,UAAU;AAAA,QAC7B,OAAO,CAAC,QAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI;AAAA,QAC5D,QAAQ,CAAC,QAAQ,SAAS,IAAI,WAAW,GAAG,CAAC;AAAA,MAC9C,CAAA;AAAA,IACF;AAAA,IACD,cAAc,IAAI,OAAO,OAAO;AAAA,IAChC,SAAS;AAAA,IACT,QAAQA;AAAAA,EACT,CAAA;AACH,CAAC;AACD,MAAM,0BAA0B,IAAI,OAAO,2BAA2B;AAAA,EACpE,QAAQ,IAAI,OAAOH,SAAO;AAAA,EAC1B,UAAU,IAAI,OAAOK,SAAO;AAC9B,CAAC;AACD,MAAM,kBAAkB,IAAI,KAAK,mBAAmB;AAAA,EAClD;AAAA,EACA,aAAa;AAAA,EACb,SAAS;AAAA,EACT,yBAAyB;AAC3B,CAAC;AACD,MAAMC,0BAAwB,IAAI,KAAK,yBAAyB;AAAA,EAC9D,MAAM;AAAA,EACN,OAAO,WAAU;AACnB,CAAC;AACD,MAAML,cAAY,IAAI,OAAO,aAAa;AAAA,EACxC,SAAS;AAAA,EACT,QAAQ,IAAI,OAAQ;AAAA,EACpB,MAAM,IAAI,OAAQ;AAAA,EAClB,YAAY,IAAI,OAAO,YAAY;AACrC,CAAC;AACD,MAAMM,YAAU,IAAI,OAAO,WAAW;AAAA,EACpC,SAAS,IAAI,OAAO,YAAY;AAAA,EAChC,OAAO;AAAA,EACP,OAAO,IAAI,IAAK;AAAA,EAChB,QAAQ,IAAI,IAAG;AACjB,CAAC;AACD,MAAM,oBAAoB,IAAI,OAAO,qBAAqB;AAAA,EACxD,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,SAASA;AAAAA,EACT,YAAYD;AACd,CAAC;AACD,MAAME,oBAAkB,IAAI,KAAK,mBAAmB;AAAA,EAClD,IAAI;AACN,CAAC;AACD,MAAM,cAAc,IAAI,KAAK,eAAe;AAAA,EAC1C,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,iBAAiB;AACnB,CAAC;AACD,MAAM,gBAAgB,IAAI,KAAK,iBAAiB;AAAA,EAC9C,IAAI;AACN,CAAC;AACD,MAAM,QAAQ,IAAI,KAAK,SAAS;AAAA,EAC9B,KAAK;AACP,CAAC;AACD,MAAM,SAAS,IAAI,OAAO,UAAU;AAAA,EAClC,OAAO;AAAA,EACP,SAAS;AAAA,EACT,OAAO;AACT,CAAC;AACD,SAAS,cAAc,GAAG;AACxB,SAAO,IAAI,OAAO,iBAAiB,EAAE,IAAI,KAAK;AAAA,IAC5C,QAAQ;AAAA,IACR,OAAO;AAAA,EACX,CAAG;AACH;AACA,MAAM,sBAAsB,IAAI,KAAK,uBAAuB;AAAA,EAC1D,SAAS,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACpC,WAAW,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACtC,WAAW,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACtC,SAAS,IAAI,OAAO,IAAI,GAAI,CAAA;AAC9B,CAAC;AACD,MAAM,YAAY,IAAI,KAAK,aAAa;AAAA,EACtC,SAAS,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACpC,WAAW,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACtC,WAAW,IAAI,WAAW,IAAI,IAAI,GAAE,CAAE;AAAA,EACtC,SAAS,IAAI,OAAO,IAAI,GAAI,CAAA;AAC9B,CAAC;AACD,MAAM,gBAAgB,IAAI,OAAO,iBAAiB;AAAA,EAChD,QAAQ;AAAA,EACR,QAAQ,IAAI,GAAE;AAChB,CAAC;AACD,MAAM,oBAAoB,IAAI,OAAO,qBAAqB;AAAA,EACxD,QAAQ,IAAI,OAAO,aAAa;AAAA,EAChC,WAAW,IAAI,IAAG;AACpB,CAAC;AACD,MAAM,WAAW,IAAI,OAAO,YAAY;AAAA,EACtC,MAAM,IAAI,OAAO,mBAAmB;AAAA,EACpC,QAAQ,IAAI,IAAK;AAAA,EACjB,aAAa;AACf,CAAC;AACD,MAAM,eAAe,IAAI,OAAO,IAAI,GAAE,CAAE,EAAE,UAAU;AAAA,EAClD,OAAO,CAAC,QAAQ,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI;AAAA,EAC5D,QAAQ,CAAC,QAAQ,SAAS,IAAI,WAAW,GAAG,CAAC;AAC/C,CAAC;AACD,MAAM,0BAA0B,IAAI,OAAO,2BAA2B;AAAA,EACpE,eAAe,cAAcA,iBAAe;AAAA,EAC5C,cAAc,IAAI,OAAO,YAAY;AACvC,CAAC;AACD,MAAM,mBAAmB,IAAI,OAAO,yBAAyB;AAAA,EAC3D,MAAM;AACR,CAAC;AACD,MAAM,uBAAuB,IAAI,OAAO,wBAAwB;AAAA,EAC9D,mBAAmB,IAAI,OAAO,IAAI,GAAE,CAAE;AAAA,EACtC,gBAAgB,IAAI,OAAQ;AAAA,EAC5B,eAAe,IAAI,OAAO,IAAI,GAAI,CAAA;AACpC,CAAC;AChQD,MAAM,sBAAsB,IAAI,KAAK,uBAAuB;AAAA,EAC1D,sBAAsB,IAAI,OAAO,wBAAwB,EAAE,WAAW,SAAS;AAAA,EAC/E,aAAa,IAAI,OAAO,eAAe,EAAE,UAAU,SAAS;AAAA,EAC5D,qBAAqB;AAAA,EACrB,oBAAoB,IAAI,OAAO,sBAAsB,EAAE,QAAQ,IAAI,OAAO,IAAI,GAAE,CAAE,EAAC,CAAE;AAAA,EACrF,sBAAsB,IAAI,OAAO,wBAAwB,EAAE,QAAQ,IAAI,GAAE,GAAI;AAAA,EAC7E,uBAAuB,IAAI,OAAO,yBAAyB;AAAA,IACzD,WAAW;AAAA,IACX,UAAU;AAAA,EACX,CAAA;AACH,CAAC;AACD,MAAM,WAAW,IAAI,OAAO,YAAY;AAAA,EACtC,SAAS;AAAA,EACT,MAAM,IAAI,OAAM;AAClB,CAAC;AACD,MAAM,eAAe,IAAI,OAAO,gBAAgB;AAAA,EAC9C,QAAQ;AAAA,EACR,UAAU,IAAI,IAAK;AAAA,EACnB,aAAa,IAAI,IAAK;AAAA,EACtB,cAAc,IAAI,OAAO,IAAI,OAAQ,CAAA;AACvC,CAAC;AACD,MAAM,uBAAuB,IAAI,KAAK,wBAAwB;AAAA,EAC5D,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,uBAAuB;AAAA,EACvB,uCAAuC;AAAA,EACvC,kBAAkB,IAAI,OAAO,oBAAoB,EAAE,KAAK,IAAI,IAAG,GAAI;AAAA,EACnE,2BAA2B,IAAI,OAAO,6BAA6B;AAAA,IACjE,WAAW,IAAI,IAAK;AAAA,IACpB,cAAc,IAAI,IAAG;AAAA,EACzB,CAAG;AAAA,EACD,oBAAoB,IAAI,OAAO,sBAAsB,EAAE,WAAW,IAAI,IAAG,GAAI;AAAA,EAC7E,qBAAqB;AAAA,EACrB,mBAAmB;AAAA,EACnB,sBAAsB;AAAA,EACtB,uBAAuB;AAAA,EACvB,iCAAiC;AACnC,CAAC;AACD,MAAM,oBAAoB,IAAI,KAAK,qBAAqB;AAAA,EACtD,cAAc;AAAA,EACd,wBAAwB;AAC1B,CAAC;AACD,MAAM,yBAAyB,IAAI,KAAK,0BAA0B;AAAA,EAChE,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,kBAAkB,IAAI,OAAO,oBAAoB;AAAA,IAC/C,YAAY,IAAI,IAAK;AAAA,IACrB,eAAe,IAAI,IAAG;AAAA,EAC1B,CAAG;AAAA,EACD,mBAAmB,IAAI,OAAO,qBAAqB;AAAA,IACjD,YAAY,IAAI,IAAK;AAAA,IACrB,eAAe,IAAI,IAAG;AAAA,EAC1B,CAAG;AAAA,EACD,yBAAyB,IAAI,OAAO,2BAA2B,EAAE,QAAQ,SAAS;AAAA,EAClF,yBAAyB;AAAA,EACzB,qBAAqB;AAAA,EACrB,4BAA4B;AAAA,EAC5B,0BAA0B;AAAA,EAC1B,2BAA2B,IAAI,OAAO,YAAY;AAAA,EAClD,WAAW,IAAI,MAAM,CAAC,cAAc,IAAI,IAAG,CAAE,CAAC;AAAA,EAC9C,sCAAsC;AAAA,EACtC,sBAAsB;AAAA,EACtB,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,yBAAyB;AAAA,EACzB,sBAAsB,IAAI,OAAO,wBAAwB;AAAA,IACvD,QAAQ,IAAI,IAAK;AAAA,IACjB,MAAM;AAAA,EACV,CAAG;AAAA,EACD,mBAAmB,IAAI,OAAO,qBAAqB;AAAA,IACjD,aAAa,IAAI,IAAK;AAAA,IACtB,MAAM;AAAA,EACV,CAAG;AAAA,EACD,wBAAwB,IAAI,OAAO,0BAA0B;AAAA,IAC3D,WAAW,IAAI,IAAK;AAAA,IACpB,cAAc,IAAI,IAAG;AAAA,EACzB,CAAG;AAAA,EACD,iCAAiC,IAAI,OAAO,mCAAmC;AAAA,IAC7E,KAAK,IAAI,IAAG;AAAA,EAChB,CAAG;AAAA,EACD,uBAAuB;AAAA,EACvB,iBAAiB,IAAI,OAAO,mBAAmB,EAAE,aAAa,IAAI,IAAK,GAAE,SAAS,IAAI,IAAK,EAAA,CAAE;AAAA,EAC7F,iCAAiC;AAAA,EACjC,mCAAmC;AAAA,EACnC,qBAAqB,IAAI,OAAO,uBAAuB,EAAE,cAAc,qBAAqB;AAAA,EAC5F,wBAAwB,IAAI,OAAO,0BAA0B;AAAA,IAC3D,aAAa,IAAI,IAAK;AAAA,IACtB,SAAS,IAAI,IAAG;AAAA,EACpB,CAAG;AAAA,EACD,mBAAmB;AAAA,EACnB,6BAA6B;AAAA,EAC7B,iCAAiC;AAAA,EACjC,oBAAoB;AAAA,EACpB,+CAA+C,IAAI;AAAA,IACjD;AAAA,IACA;AAAA,MACE,kBAAkB,IAAI,OAAO,OAAO;AAAA,IAC1C;AAAA,EACG;AAAA,EACD,sBAAsB,IAAI,OAAO,wBAAwB;AAAA,IACvD,SAAS;AAAA,IACT,UAAU,IAAI,OAAM;AAAA,EACxB,CAAG;AAAA,EACD,qBAAqB,IAAI,OAAO,uBAAuB,EAAE,UAAU,IAAI,OAAM,GAAI;AAAA,EACjF,8CAA8C;AAChD,CAAC;AACD,MAAM,kBAAkB,IAAI,KAAK,mBAAmB;AAAA,EAClD,SAAS;AAAA,EACT,QAAQ,IAAI,OAAO,mBAAmB;AAAA,IACpC,OAAO;AAAA,IACP,SAAS,IAAI,OAAO,IAAI,IAAK,CAAA;AAAA,EAC9B,CAAA;AACH,CAAC;AACD,MAAM,iBAAiB,IAAI,OAAO,kBAAkB;AAAA,EAClD,iBAAiB,IAAI,IAAK;AAAA,EAC1B,aAAa,IAAI,IAAK;AAAA,EACtB,eAAe,IAAI,IAAK;AAAA,EACxB,yBAAyB,IAAI,IAAG;AAClC,CAAC;AACD,MAAM,QAAQ,IAAI,KAAK,SAAS;AAAA,EAC9B,cAAc;AAAA,EACd,aAAa;AAAA,EACb,QAAQ,IAAI,OAAO,UAAU;AAAA,IAC3B,sBAAsB,IAAI,IAAG;AAAA,EACjC,CAAG;AAAA,EACD,WAAW;AACb,CAAC;AACD,MAAM,uBAAuB,IAAI,OAAO,wBAAwB;AAAA,EAC9D,QAAQ;AAAA,EACR,eAAe,IAAI,IAAK;AAAA,EACxB,SAAS;AAAA,EACT,oBAAoB,IAAI,OAAO,IAAI,MAAM,CAAC,SAAS,IAAI,IAAK,CAAA,CAAC,CAAC;AAAA,EAC9D,eAAe,IAAI,OAAO,YAAY;AAAA,EACtC,mBAAmB;AAAA,EACnB,SAAS,IAAI,OAAO,IAAI,MAAM,CAAC,cAAc,KAAK,CAAC,CAAC;AAAA,EACpD,SAAS,IAAI,OAAO,IAAI,MAAM,CAAC,cAAc,KAAK,CAAC,CAAC;AAAA,EACpD,WAAW,IAAI,OAAO,IAAI,MAAM,CAAC,cAAc,KAAK,CAAC,CAAC;AAAA,EACtD,SAAS,IAAI,OAAO,YAAY;AAAA,EAChC,sBAAsB,IAAI,OAAO,YAAY;AAAA,EAC7C,SAAS,IAAI,OAAO,YAAY;AAAA,EAChC,WAAW,IAAI,MAAM,CAAC,cAAc,KAAK,CAAC;AAAA,EAC1C,cAAc,IAAI,OAAO,YAAY;AAAA,EACrC,cAAc,IAAI,OAAO,YAAY;AACvC,CAAC;AACD,MAAM,gBAAgB,IAAI,MAAM,CAAC,IAAI,IAAG,GAAI,YAAY,CAAC;AACzD,MAAM,WAAW,IAAI,KAAK,YAAY;AAAA,EACpC,UAAU;AAAA,EACV,OAAO,IAAI,MAAM,CAAC,eAAe,KAAK,CAAC;AACzC,CAAC;AACD,MAAM,YAAY,IAAI,KAAK,aAAa;AAAA,EACtC,UAAU;AAAA,EACV,aAAa,IAAI,MAAM,CAAC,cAAc,KAAK,CAAC;AAAA,EAC5C,cAAc;AAChB,CAAC;AACD,MAAM,cAAc,IAAI,KAAK,eAAe;AAAA,EAC1C,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AACX,CAAC;AACD,MAAM,sBAAsB,IAAI,OAAO,uBAAuB;AAAA,EAC5D,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,aAAa;AACf,CAAC;AACD,MAAM,sBAAsB,IAAI,KAAK,uBAAuB;AAAA,EAC1D,cAAc;AAAA,EACd,eAAe,IAAI,IAAK;AAAA,EACxB,aAAa,IAAI,IAAK;AAAA,EACtB,WAAW,IAAI,IAAK;AAAA,EACpB,gBAAgB;AAClB,CAAC;AACD,MAAM,uBAAuB,IAAI,OAAO,wBAAwB;AAAA,EAC9D,QAAQ;AAAA,EACR,eAAe,IAAI,IAAK;AAAA,EACxB,SAAS;AAAA,EACT,mBAAmB;AAAA,EACnB,gBAAgB,IAAI,OAAO,IAAI,IAAG,CAAE;AAAA,EACpC,cAAc,IAAI,OAAO,YAAY;AAAA,EACrC,cAAc,IAAI,OAAO,YAAY;AAAA,EACrC,gBAAgB,IAAI,IAAK;AAAA,EACzB,gBAAgB,IAAI,OAAO,IAAI,MAAM,CAAC,SAAS,mBAAmB,CAAC,CAAC;AAAA,EACpE,wBAAwB,IAAI,OAAO,IAAI,MAAM,CAAC,SAAS,mBAAmB,CAAC,CAAC;AAAA,EAC5E,eAAe,IAAI,OAAO,YAAY;AACxC,CAAC;AACD,MAAM,qBAAqB,IAAI,KAAK,sBAAsB;AAAA,EACxD,IAAI;AAAA,EACJ,IAAI;AACN,CAAC;AC9LD,SAAS,0BAA0B,MAAM;AACvC,UAAQ,MAAI;AAAA,IACV,KAAK;AACH,aAAO,IAAI,GAAI;AAAA,IACjB,KAAK;AACH,aAAO,IAAI,IAAK;AAAA,IAClB,KAAK;AACH,aAAO,IAAI,IAAK;AAAA,IAClB,KAAK;AACH,aAAO,IAAI,IAAK;AAAA,IAClB,KAAK;AACH,aAAO,IAAI,KAAM;AAAA,IACnB,KAAK;AACH,aAAO,IAAI,KAAM;AAAA,IACnB,KAAK;AACH,aAAO,IAAI,KAAM;AAAA,IACnB,KAAK;AACH,aAAO,IAAI,OAAQ;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,EACb;AACE,QAAM,UAAU,KAAK,MAAM,yBAAyB;AACpD,MAAI,SAAS;AACX,UAAM,CAAC,MAAM,KAAK,IAAI,QAAQ,MAAM,CAAC;AACrC,QAAI,SAAS,UAAU;AACrB,aAAO,IAAI,OAAO,0BAA0B,KAAK,CAAC;AAAA,IACxD,OAAW;AACL,aAAO,IAAI,OAAO,0BAA0B,KAAK,CAAC;AAAA,IACxD;AAAA,EACA;AACE,QAAM,IAAI,MAAM,2BAA2B,IAAI,EAAE;AACnD;ACEA,MAAM,SAAS;AAAA,EACb,GAAG;AAAA,EACH,IAAI,IAAI,GAAI;AAAA,EACZ,KAAK,IAAI,IAAK;AAAA,EACd,KAAK,IAAI,IAAK;AAAA,EACd,KAAK,IAAI,IAAK;AAAA,EACd,MAAM,IAAI,KAAM;AAAA,EAChB,MAAM,IAAI,KAAM;AAAA,EAChB,SAAS,IAAI,QAAS;AAAA,EACtB,MAAM,IAAI,KAAM;AAAA,EAChB,QAAQ,IAAI,OAAQ;AAAA,EACpB;AAAA,EACA;AAAA,EACF,UAAEL;AAAAA,EACF,SAAEH;AAAAA,EACA;AAAA,EACF,SAAEO;AAAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACF,WAAER;AAAAA,EACA;AAAA,EACF,sBAAEK;AAAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACF,WAAEH;AAAAA,EACA;AAAA,EACF,SAAEI;AAAAA,EACF,iBAAEG;AAAAA,EACA;AAAA,EACF,uBAAEF;AAAAA,EACA;AAAA,EACF,SAAEJ;AAAAA,EACA;AAAA,EACA;AACF;AC9EA,MAAM,oBAAoB;AAC1B,MAAM,sBAAsB;AAW5B,SAAS,mBAAmB,MAAM,SAAS,MAAM;AAC/C,QAAM,YAAY,KAAK,YAAa;AACpC,MAAI;AACJ,MAAI,UAAU,SAAS,GAAG,GAAG;AAC3B,QAAI,CAAC,kBAAkB,KAAK,SAAS,GAAG;AACtC,YAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AAAA,IAClD;AACI,UAAM,CAAC,QAAQ,MAAM,IAAI,UAAU,MAAM,GAAG;AAC5C,YAAQ,CAAC,GAAG,SAAS,OAAO,MAAM,GAAG,IAAI,CAAE,GAAE,MAAM;AAAA,EACvD,OAAS;AACL,QAAI,CAAC,oBAAoB,KAAK,SAAS,GAAG;AACxC,YAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AAAA,IAClD;AACI,YAAQ,UAAU,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE;AAAA,EAC5C;AACE,MAAI,WAAW,OAAO;AACpB,WAAO,GAAG,MAAM,KAAK,GAAG,CAAC;AAAA,EAC7B;AACE,SAAO,GAAG,MAAM,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,CAAC,IAAI,MAAM,MAAM,SAAS,CAAC,CAAC;AACnE;AC7BqB,OAAO,GAAG;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAEF,qBAAqB,KAAK;AAEtD,MAAM,eAAe,GAAG,qBAAqB;AAC7C,MAAM,6BAA6B,qBAAqB,KAAK;ACJ7D,SAAS,QAAQ,GAAG;AAChB,MAAI,CAAC,OAAO,cAAc,CAAC,KAAK,IAAI;AAChC,UAAM,IAAI,MAAM,oCAAoC,CAAC;AAC7D;AAEA,SAAS,QAAQ,GAAG;AAChB,SAAO,aAAa,cAAe,YAAY,OAAO,CAAC,KAAK,EAAE,YAAY,SAAS;AACvF;AAEA,SAAS,OAAO,MAAM,SAAS;AAC3B,MAAI,CAAC,QAAQ,CAAC;AACV,UAAM,IAAI,MAAM,qBAAqB;AACzC,MAAI,QAAQ,SAAS,KAAK,CAAC,QAAQ,SAAS,EAAE,MAAM;AAChD,UAAM,IAAI,MAAM,mCAAmC,UAAU,kBAAkB,EAAE,MAAM;AAC/F;AASA,SAAS,QAAQ,UAAU,gBAAgB,MAAM;AAC7C,MAAI,SAAS;AACT,UAAM,IAAI,MAAM,kCAAkC;AACtD,MAAI,iBAAiB,SAAS;AAC1B,UAAM,IAAI,MAAM,uCAAuC;AAC/D;AAEA,SAAS,QAAQ,KAAK,UAAU;AAC5B,SAAO,GAAG;AACV,QAAM,MAAM,SAAS;AACrB,MAAI,IAAI,SAAS,KAAK;AAClB,UAAM,IAAI,MAAM,2DAA2D,GAAG;AAAA,EACtF;AACA;ACrCA;AAkBO,SAAS,IAAI,KAAK;AACrB,SAAO,IAAI,YAAY,IAAI,QAAQ,IAAI,YAAY,KAAK,MAAM,IAAI,aAAa,CAAC,CAAC;AACrF;AAcO,MAAM,OAAwB,uBAAM,IAAI,WAAW,IAAI,YAAY,CAAC,SAAU,CAAC,EAAE,MAAM,EAAE,CAAC,MAAM,IAAO;AAEvG,SAAS,SAAS,MAAM;AAC3B,SAAU,QAAQ,KAAM,aAClB,QAAQ,IAAK,WACb,SAAS,IAAK,QACd,SAAS,KAAM;AACzB;AAEO,MAAM,eAAe,OACtB,CAAC,MAAM,IACP,CAAC,MAAM,SAAS,CAAC;AAEhB,SAAS,WAAW,KAAK;AAC5B,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,QAAI,CAAC,IAAI,SAAS,IAAI,CAAC,CAAC;AAAA,EAChC;AACA;AAyEO,SAAS,YAAY,KAAK;AAC7B,MAAI,OAAO,QAAQ;AACf,UAAM,IAAI,MAAM,sCAAsC,OAAO,GAAG;AACpE,SAAO,IAAI,WAAW,IAAI,YAAa,EAAC,OAAO,GAAG,CAAC;AACvD;AAMO,SAAS,QAAQ,MAAM;AAC1B,MAAI,OAAO,SAAS;AAChB,WAAO,YAAY,IAAI;AAC3B,SAAO,IAAI;AACX,SAAO;AACX;AAoBO,MAAM,KAAK;AAAA;AAAA,EAEd,QAAQ;AACJ,WAAO,KAAK,WAAY;AAAA,EAChC;AACA;AAgBO,SAAS,wBAAwB,UAAU;AAC9C,QAAM,QAAQ,CAAC,KAAK,SAAS,SAAS,IAAI,EAAE,OAAO,QAAQ,GAAG,CAAC,EAAE,OAAQ;AACzE,QAAM,MAAM,SAAS,EAAE;AACvB,QAAM,YAAY,IAAI;AACtB,QAAM,WAAW,IAAI;AACrB,QAAM,SAAS,CAAC,SAAS,SAAS,IAAI;AACtC,SAAO;AACX;ACpLO,MAAM,QAAwB,oBAAI,WAAW;AAAA,EAChD;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAClD;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACnD;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACnD;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EACnD;AAAA,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","x_google_ignoreList":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]}