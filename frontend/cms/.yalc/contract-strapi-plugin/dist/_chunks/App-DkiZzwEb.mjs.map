{"version":3,"file":"App-DkiZzwEb.mjs","sources":["../../admin/src/utils/getTranslation.js","../../node_modules/@mysten/sui/dist/esm/version.js","../../node_modules/@mysten/sui/dist/esm/client/errors.js","../../node_modules/@mysten/sui/dist/esm/client/rpc-websocket-client.js","../../node_modules/@mysten/sui/dist/esm/client/http-transport.js","../../node_modules/@mysten/sui/dist/esm/client/network.js","../../node_modules/base-x/src/esm/index.js","../../node_modules/bs58/src/esm/index.js","../../node_modules/@mysten/bcs/dist/esm/b58.js","../../node_modules/@mysten/bcs/dist/esm/b64.js","../../node_modules/@mysten/bcs/dist/esm/hex.js","../../node_modules/@mysten/sui/dist/esm/utils/sui-types.js","../../node_modules/@mysten/sui/dist/esm/utils/suins.js","../../node_modules/@mysten/sui/dist/esm/transactions/Transaction.js","../../node_modules/@mysten/sui/dist/esm/client/client.js","../../admin/src/config/index.ts","../../admin/src/components/providers/sui-provider.jsx","../../admin/src/pages/HomePage.jsx","../../admin/src/pages/App.jsx"],"sourcesContent":["import { PLUGIN_ID } from '../pluginId';\n\nconst getTranslation = (id) => `${PLUGIN_ID}.${id}`;\n\nexport { getTranslation };\n","const PACKAGE_VERSION = \"1.21.2\";\nconst TARGETED_RPC_VERSION = \"1.43.0\";\nexport {\n  PACKAGE_VERSION,\n  TARGETED_RPC_VERSION\n};\n//# sourceMappingURL=version.js.map\n","const CODE_TO_ERROR_TYPE = {\n  \"-32700\": \"ParseError\",\n  \"-32701\": \"OversizedRequest\",\n  \"-32702\": \"OversizedResponse\",\n  \"-32600\": \"InvalidRequest\",\n  \"-32601\": \"MethodNotFound\",\n  \"-32602\": \"InvalidParams\",\n  \"-32603\": \"InternalError\",\n  \"-32604\": \"ServerBusy\",\n  \"-32000\": \"CallExecutionFailed\",\n  \"-32001\": \"UnknownError\",\n  \"-32003\": \"SubscriptionClosed\",\n  \"-32004\": \"SubscriptionClosedWithError\",\n  \"-32005\": \"BatchesNotSupported\",\n  \"-32006\": \"TooManySubscriptions\",\n  \"-32050\": \"TransientError\",\n  \"-32002\": \"TransactionExecutionClientError\"\n};\nclass SuiHTTPTransportError extends Error {\n}\nclass JsonRpcError extends SuiHTTPTransportError {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = CODE_TO_ERROR_TYPE[code] ?? \"ServerError\";\n  }\n}\nclass SuiHTTPStatusError extends SuiHTTPTransportError {\n  constructor(message, status, statusText) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n  }\n}\nexport {\n  JsonRpcError,\n  SuiHTTPStatusError,\n  SuiHTTPTransportError\n};\n//# sourceMappingURL=errors.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _WebsocketClient_instances, setupWebSocket_fn, reconnect_fn;\nimport { JsonRpcError } from \"./errors.js\";\nfunction getWebsocketUrl(httpUrl) {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  return url.toString();\n}\nconst DEFAULT_CLIENT_OPTIONS = {\n  // We fudge the typing because we also check for undefined in the constructor:\n  WebSocketConstructor: typeof WebSocket !== \"undefined\" ? WebSocket : void 0,\n  callTimeout: 3e4,\n  reconnectTimeout: 3e3,\n  maxReconnects: 5\n};\nclass WebsocketClient {\n  constructor(endpoint, options = {}) {\n    __privateAdd(this, _WebsocketClient_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _disconnects, 0);\n    __privateAdd(this, _webSocket, null);\n    __privateAdd(this, _connectionPromise, null);\n    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());\n    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());\n    this.endpoint = endpoint;\n    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n    if (!this.options.WebSocketConstructor) {\n      throw new Error(\"Missing WebSocket constructor\");\n    }\n    if (this.endpoint.startsWith(\"http\")) {\n      this.endpoint = getWebsocketUrl(this.endpoint);\n    }\n  }\n  async makeRequest(method, params) {\n    const webSocket = await __privateMethod(this, _WebsocketClient_instances, setupWebSocket_fn).call(this);\n    return new Promise((resolve, reject) => {\n      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n          reject(new Error(`Request timeout: ${method}`));\n        }, this.options.callTimeout)\n      });\n      webSocket.send(JSON.stringify({ jsonrpc: \"2.0\", id: __privateGet(this, _requestId), method, params }));\n    }).then(({ error, result }) => {\n      if (error) {\n        throw new JsonRpcError(error.message, error.code);\n      }\n      return result;\n    });\n  }\n  async subscribe(input) {\n    const subscription = new RpcSubscription(input);\n    __privateGet(this, _subscriptions).add(subscription);\n    await subscription.subscribe(this);\n    return () => subscription.unsubscribe(this);\n  }\n}\n_requestId = new WeakMap();\n_disconnects = new WeakMap();\n_webSocket = new WeakMap();\n_connectionPromise = new WeakMap();\n_subscriptions = new WeakMap();\n_pendingRequests = new WeakMap();\n_WebsocketClient_instances = new WeakSet();\nsetupWebSocket_fn = function() {\n  if (__privateGet(this, _connectionPromise)) {\n    return __privateGet(this, _connectionPromise);\n  }\n  __privateSet(this, _connectionPromise, new Promise((resolve) => {\n    __privateGet(this, _webSocket)?.close();\n    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));\n    __privateGet(this, _webSocket).addEventListener(\"open\", () => {\n      __privateSet(this, _disconnects, 0);\n      resolve(__privateGet(this, _webSocket));\n    });\n    __privateGet(this, _webSocket).addEventListener(\"close\", () => {\n      __privateWrapper(this, _disconnects)._++;\n      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {\n        setTimeout(() => {\n          __privateMethod(this, _WebsocketClient_instances, reconnect_fn).call(this);\n        }, this.options.reconnectTimeout);\n      }\n    });\n    __privateGet(this, _webSocket).addEventListener(\"message\", ({ data }) => {\n      let json;\n      try {\n        json = JSON.parse(data);\n      } catch (error) {\n        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n        return;\n      }\n      if (\"id\" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {\n        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);\n        clearTimeout(timeout);\n        resolve2(json);\n      } else if (\"params\" in json) {\n        const { params } = json;\n        __privateGet(this, _subscriptions).forEach((subscription) => {\n          if (subscription.subscriptionId === params.subscription) {\n            if (params.subscription === subscription.subscriptionId) {\n              subscription.onMessage(params.result);\n            }\n          }\n        });\n      }\n    });\n  }));\n  return __privateGet(this, _connectionPromise);\n};\nreconnect_fn = async function() {\n  __privateGet(this, _webSocket)?.close();\n  __privateSet(this, _connectionPromise, null);\n  return Promise.allSettled(\n    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))\n  );\n};\nclass RpcSubscription {\n  constructor(input) {\n    this.subscriptionId = null;\n    this.subscribed = false;\n    this.input = input;\n  }\n  onMessage(message) {\n    if (this.subscribed) {\n      this.input.onMessage(message);\n    }\n  }\n  async unsubscribe(client) {\n    const { subscriptionId } = this;\n    this.subscribed = false;\n    if (subscriptionId == null) return false;\n    this.subscriptionId = null;\n    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n  }\n  async subscribe(client) {\n    this.subscriptionId = null;\n    this.subscribed = true;\n    const newSubscriptionId = await client.makeRequest(\n      this.input.method,\n      this.input.params\n    );\n    if (this.subscribed) {\n      this.subscriptionId = newSubscriptionId;\n    }\n  }\n}\nexport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient\n};\n//# sourceMappingURL=rpc-websocket-client.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _requestId, _options, _websocketClient, _SuiHTTPTransport_instances, getWebsocketClient_fn;\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from \"../version.js\";\nimport { JsonRpcError, SuiHTTPStatusError } from \"./errors.js\";\nimport { WebsocketClient } from \"./rpc-websocket-client.js\";\nclass SuiHTTPTransport {\n  constructor(options) {\n    __privateAdd(this, _SuiHTTPTransport_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _options);\n    __privateAdd(this, _websocketClient);\n    __privateSet(this, _options, options);\n  }\n  fetch(input, init) {\n    const fetchFn = __privateGet(this, _options).fetch ?? fetch;\n    if (!fetchFn) {\n      throw new Error(\n        \"The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.\"\n      );\n    }\n    return fetchFn(input, init);\n  }\n  async request(input) {\n    __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n    const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": TARGETED_RPC_VERSION,\n        \"Client-Request-Method\": input.method,\n        ...__privateGet(this, _options).rpc?.headers\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: __privateGet(this, _requestId),\n        method: input.method,\n        params: input.params\n      })\n    });\n    if (!res.ok) {\n      throw new SuiHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText\n      );\n    }\n    const data = await res.json();\n    if (\"error\" in data && data.error != null) {\n      throw new JsonRpcError(data.error.message, data.error.code);\n    }\n    return data.result;\n  }\n  async subscribe(input) {\n    const unsubscribe = await __privateMethod(this, _SuiHTTPTransport_instances, getWebsocketClient_fn).call(this).subscribe(input);\n    return async () => !!await unsubscribe();\n  }\n}\n_requestId = new WeakMap();\n_options = new WeakMap();\n_websocketClient = new WeakMap();\n_SuiHTTPTransport_instances = new WeakSet();\ngetWebsocketClient_fn = function() {\n  if (!__privateGet(this, _websocketClient)) {\n    const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? WebSocket;\n    if (!WebSocketConstructor) {\n      throw new Error(\n        \"The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.\"\n      );\n    }\n    __privateSet(this, _websocketClient, new WebsocketClient(\n      __privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url,\n      {\n        WebSocketConstructor,\n        ...__privateGet(this, _options).websocket\n      }\n    ));\n  }\n  return __privateGet(this, _websocketClient);\n};\nexport {\n  SuiHTTPTransport\n};\n//# sourceMappingURL=http-transport.js.map\n","function getFullnodeUrl(network) {\n  switch (network) {\n    case \"mainnet\":\n      return \"https://fullnode.mainnet.sui.io:443\";\n    case \"testnet\":\n      return \"https://fullnode.testnet.sui.io:443\";\n    case \"devnet\":\n      return \"https://fullnode.devnet.sui.io:443\";\n    case \"localnet\":\n      return \"http://127.0.0.1:9000\";\n    default:\n      throw new Error(`Unknown network: ${network}`);\n  }\n}\nexport {\n  getFullnodeUrl\n};\n//# sourceMappingURL=network.js.map\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  const BASE_MAP = new Uint8Array(256)\n  for (let j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    // eslint-disable-next-line no-empty\n    if (source instanceof Uint8Array) { } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    let psz = 0\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n      // Invalid character\n      if (carry === 255) { return }\n      let i = 0\n      for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    const vch = new Uint8Array(zeroes + (size - it4))\n    let j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode,\n    decodeUnsafe,\n    decode\n  }\n}\nexport default base\n","import basex from 'base-x';\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nexport default basex(ALPHABET);\n","import bs58 from \"bs58\";\nconst toBase58 = (buffer) => bs58.encode(buffer);\nconst fromBase58 = (str) => bs58.decode(str);\nconst toB58 = toBase58;\nconst fromB58 = fromBase58;\nexport {\n  fromB58,\n  fromBase58,\n  toB58,\n  toBase58\n};\n//# sourceMappingURL=b58.js.map\n","function fromBase64(base64String) {\n  return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));\n}\nconst CHUNK_SIZE = 8192;\nfunction toBase64(bytes) {\n  if (bytes.length < CHUNK_SIZE) {\n    return btoa(String.fromCharCode(...bytes));\n  }\n  let output = \"\";\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    const chunk = bytes.slice(i, i + CHUNK_SIZE);\n    output += String.fromCharCode(...chunk);\n  }\n  return btoa(output);\n}\nconst toB64 = toBase64;\nconst fromB64 = fromBase64;\nexport {\n  fromB64,\n  fromBase64,\n  toB64,\n  toBase64\n};\n//# sourceMappingURL=b64.js.map\n","function fromHex(hexStr) {\n  const normalized = hexStr.startsWith(\"0x\") ? hexStr.slice(2) : hexStr;\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}`;\n  const intArr = padded.match(/[0-9a-fA-F]{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n  if (intArr.length !== padded.length / 2) {\n    throw new Error(`Invalid hex string ${hexStr}`);\n  }\n  return Uint8Array.from(intArr);\n}\nfunction toHex(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nconst toHEX = toHex;\nconst fromHEX = fromHex;\nexport {\n  fromHEX,\n  fromHex,\n  toHEX,\n  toHex\n};\n//# sourceMappingURL=hex.js.map\n","import { fromBase58, splitGenericParameters } from \"@mysten/bcs\";\nconst TX_DIGEST_LENGTH = 32;\nfunction isValidTransactionDigest(value) {\n  try {\n    const buffer = fromBase58(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch (e) {\n    return false;\n  }\n}\nconst SUI_ADDRESS_LENGTH = 32;\nfunction isValidSuiAddress(value) {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\nfunction isValidSuiObjectId(value) {\n  return isValidSuiAddress(value);\n}\nfunction parseTypeTag(type) {\n  if (!type.includes(\"::\")) return type;\n  return parseStructTag(type);\n}\nfunction parseStructTag(type) {\n  const [address, module] = type.split(\"::\");\n  const rest = type.slice(address.length + module.length + 4);\n  const name = rest.includes(\"<\") ? rest.slice(0, rest.indexOf(\"<\")) : rest;\n  const typeParams = rest.includes(\"<\") ? splitGenericParameters(rest.slice(rest.indexOf(\"<\") + 1, rest.lastIndexOf(\">\"))).map(\n    (typeParam) => parseTypeTag(typeParam.trim())\n  ) : [];\n  return {\n    address: normalizeSuiAddress(address),\n    module,\n    name,\n    typeParams\n  };\n}\nfunction normalizeStructTag(type) {\n  const { address, module, name, typeParams } = typeof type === \"string\" ? parseStructTag(type) : type;\n  const formattedTypeParams = typeParams?.length > 0 ? `<${typeParams.map(\n    (typeParam) => typeof typeParam === \"string\" ? typeParam : normalizeStructTag(typeParam)\n  ).join(\",\")}>` : \"\";\n  return `${address}::${module}::${name}${formattedTypeParams}`;\n}\nfunction normalizeSuiAddress(value, forceAdd0x = false) {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith(\"0x\")) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, \"0\")}`;\n}\nfunction normalizeSuiObjectId(value, forceAdd0x = false) {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\nfunction isHex(value) {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\nfunction getHexByteLength(value) {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\nexport {\n  SUI_ADDRESS_LENGTH,\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeStructTag,\n  normalizeSuiAddress,\n  normalizeSuiObjectId,\n  parseStructTag\n};\n//# sourceMappingURL=sui-types.js.map\n","const SUI_NS_NAME_REGEX = /^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;\nconst SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\\.)+sui$/i;\nconst MAX_SUI_NS_NAME_LENGTH = 235;\nfunction isValidSuiNSName(name) {\n  if (name.length > MAX_SUI_NS_NAME_LENGTH) {\n    return false;\n  }\n  if (name.includes(\"@\")) {\n    return SUI_NS_NAME_REGEX.test(name);\n  }\n  return SUI_NS_DOMAIN_REGEX.test(name);\n}\nfunction normalizeSuiNSName(name, format = \"at\") {\n  const lowerCase = name.toLowerCase();\n  let parts;\n  if (lowerCase.includes(\"@\")) {\n    if (!SUI_NS_NAME_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    const [labels, domain] = lowerCase.split(\"@\");\n    parts = [...labels ? labels.split(\".\") : [], domain];\n  } else {\n    if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    parts = lowerCase.split(\".\").slice(0, -1);\n  }\n  if (format === \"dot\") {\n    return `${parts.join(\".\")}.sui`;\n  }\n  return `${parts.slice(0, -1).join(\".\")}@${parts[parts.length - 1]}`;\n}\nexport {\n  isValidSuiNSName,\n  normalizeSuiNSName\n};\n//# sourceMappingURL=suins.js.map\n","var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _serializationPlugins, _buildPlugins, _intentResolvers, _data, _Transaction_instances, normalizeTransactionArgument_fn, resolveArgument_fn, prepareBuild_fn, runPlugins_fn;\nimport { fromBase64, isSerializedBcs } from \"@mysten/bcs\";\nimport { is, parse } from \"valibot\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nimport { Commands } from \"./Commands.js\";\nimport { Argument, NormalizedCallArg, ObjectRef, TransactionExpiration } from \"./data/internal.js\";\nimport { serializeV1TransactionData } from \"./data/v1.js\";\nimport { SerializedTransactionDataV2 } from \"./data/v2.js\";\nimport { Inputs } from \"./Inputs.js\";\nimport { resolveTransactionData } from \"./json-rpc-resolver.js\";\nimport { createObjectMethods } from \"./object.js\";\nimport { createPure } from \"./pure.js\";\nimport { TransactionDataBuilder } from \"./TransactionData.js\";\nimport { getIdFromCallArg } from \"./utils.js\";\nfunction createTransactionResult(index, length = Infinity) {\n  const baseResult = { $kind: \"Result\", Result: index };\n  const nestedResults = [];\n  const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {\n    $kind: \"NestedResult\",\n    NestedResult: [index, resultIndex]\n  });\n  return new Proxy(baseResult, {\n    set() {\n      throw new Error(\n        \"The transaction result is a proxy, and does not support setting properties directly\"\n      );\n    },\n    // TODO: Instead of making this return a concrete argument, we should ideally\n    // make it reference-based (so that this gets resolved at build-time), which\n    // allows re-ordering transactions.\n    get(target, property) {\n      if (property in target) {\n        return Reflect.get(target, property);\n      }\n      if (property === Symbol.iterator) {\n        return function* () {\n          let i = 0;\n          while (i < length) {\n            yield nestedResultFor(i);\n            i++;\n          }\n        };\n      }\n      if (typeof property === \"symbol\") return;\n      const resultIndex = parseInt(property, 10);\n      if (Number.isNaN(resultIndex) || resultIndex < 0) return;\n      return nestedResultFor(resultIndex);\n    }\n  });\n}\nconst TRANSACTION_BRAND = Symbol.for(\"@mysten/transaction\");\nfunction isTransaction(obj) {\n  return !!obj && typeof obj === \"object\" && obj[TRANSACTION_BRAND] === true;\n}\nconst modulePluginRegistry = {\n  buildPlugins: /* @__PURE__ */ new Map(),\n  serializationPlugins: /* @__PURE__ */ new Map()\n};\nconst TRANSACTION_REGISTRY_KEY = Symbol.for(\"@mysten/transaction/registry\");\nfunction getGlobalPluginRegistry() {\n  try {\n    const target = globalThis;\n    if (!target[TRANSACTION_REGISTRY_KEY]) {\n      target[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;\n    }\n    return target[TRANSACTION_REGISTRY_KEY];\n  } catch (e) {\n    return modulePluginRegistry;\n  }\n}\nconst _Transaction = class _Transaction {\n  constructor() {\n    __privateAdd(this, _Transaction_instances);\n    __privateAdd(this, _serializationPlugins);\n    __privateAdd(this, _buildPlugins);\n    __privateAdd(this, _intentResolvers, /* @__PURE__ */ new Map());\n    __privateAdd(this, _data);\n    /**\n     * Add a new object input to the transaction.\n     */\n    this.object = createObjectMethods(\n      (value) => {\n        if (typeof value === \"function\") {\n          return this.object(value(this));\n        }\n        if (typeof value === \"object\" && is(Argument, value)) {\n          return value;\n        }\n        const id = getIdFromCallArg(value);\n        const inserted = __privateGet(this, _data).inputs.find((i) => id === getIdFromCallArg(i));\n        if (inserted?.Object?.SharedObject && typeof value === \"object\" && value.Object?.SharedObject) {\n          inserted.Object.SharedObject.mutable = inserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;\n        }\n        return inserted ? { $kind: \"Input\", Input: __privateGet(this, _data).inputs.indexOf(inserted), type: \"object\" } : __privateGet(this, _data).addInput(\n          \"object\",\n          typeof value === \"string\" ? {\n            $kind: \"UnresolvedObject\",\n            UnresolvedObject: { objectId: normalizeSuiAddress(value) }\n          } : value\n        );\n      }\n    );\n    const globalPlugins = getGlobalPluginRegistry();\n    __privateSet(this, _data, new TransactionDataBuilder());\n    __privateSet(this, _buildPlugins, [...globalPlugins.buildPlugins.values()]);\n    __privateSet(this, _serializationPlugins, [...globalPlugins.serializationPlugins.values()]);\n  }\n  /**\n   * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n   * Supports either a byte array, or base64-encoded bytes.\n   */\n  static fromKind(serialized) {\n    const tx = new _Transaction();\n    __privateSet(tx, _data, TransactionDataBuilder.fromKindBytes(\n      typeof serialized === \"string\" ? fromBase64(serialized) : serialized\n    ));\n    return tx;\n  }\n  /**\n   * Converts from a serialized transaction format to a `Transaction` class.\n   * There are two supported serialized formats:\n   * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n   * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n   */\n  static from(transaction) {\n    const newTransaction = new _Transaction();\n    if (isTransaction(transaction)) {\n      __privateSet(newTransaction, _data, new TransactionDataBuilder(transaction.getData()));\n    } else if (typeof transaction !== \"string\" || !transaction.startsWith(\"{\")) {\n      __privateSet(newTransaction, _data, TransactionDataBuilder.fromBytes(\n        typeof transaction === \"string\" ? fromBase64(transaction) : transaction\n      ));\n    } else {\n      __privateSet(newTransaction, _data, TransactionDataBuilder.restore(JSON.parse(transaction)));\n    }\n    return newTransaction;\n  }\n  static registerGlobalSerializationPlugin(stepOrStep, step) {\n    getGlobalPluginRegistry().serializationPlugins.set(\n      stepOrStep,\n      step ?? stepOrStep\n    );\n  }\n  static unregisterGlobalSerializationPlugin(name) {\n    getGlobalPluginRegistry().serializationPlugins.delete(name);\n  }\n  static registerGlobalBuildPlugin(stepOrStep, step) {\n    getGlobalPluginRegistry().buildPlugins.set(\n      stepOrStep,\n      step ?? stepOrStep\n    );\n  }\n  static unregisterGlobalBuildPlugin(name) {\n    getGlobalPluginRegistry().buildPlugins.delete(name);\n  }\n  addSerializationPlugin(step) {\n    __privateGet(this, _serializationPlugins).push(step);\n  }\n  addBuildPlugin(step) {\n    __privateGet(this, _buildPlugins).push(step);\n  }\n  addIntentResolver(intent, resolver) {\n    if (__privateGet(this, _intentResolvers).has(intent) && __privateGet(this, _intentResolvers).get(intent) !== resolver) {\n      throw new Error(`Intent resolver for ${intent} already exists`);\n    }\n    __privateGet(this, _intentResolvers).set(intent, resolver);\n  }\n  setSender(sender) {\n    __privateGet(this, _data).sender = sender;\n  }\n  /**\n   * Sets the sender only if it has not already been set.\n   * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n   */\n  setSenderIfNotSet(sender) {\n    if (!__privateGet(this, _data).sender) {\n      __privateGet(this, _data).sender = sender;\n    }\n  }\n  setExpiration(expiration) {\n    __privateGet(this, _data).expiration = expiration ? parse(TransactionExpiration, expiration) : null;\n  }\n  setGasPrice(price) {\n    __privateGet(this, _data).gasConfig.price = String(price);\n  }\n  setGasBudget(budget) {\n    __privateGet(this, _data).gasConfig.budget = String(budget);\n  }\n  setGasBudgetIfNotSet(budget) {\n    if (__privateGet(this, _data).gasData.budget == null) {\n      __privateGet(this, _data).gasConfig.budget = String(budget);\n    }\n  }\n  setGasOwner(owner) {\n    __privateGet(this, _data).gasConfig.owner = owner;\n  }\n  setGasPayment(payments) {\n    __privateGet(this, _data).gasConfig.payment = payments.map((payment) => parse(ObjectRef, payment));\n  }\n  /** @deprecated Use `getData()` instead. */\n  get blockData() {\n    return serializeV1TransactionData(__privateGet(this, _data).snapshot());\n  }\n  /** Get a snapshot of the transaction data, in JSON form: */\n  getData() {\n    return __privateGet(this, _data).snapshot();\n  }\n  // Used to brand transaction classes so that they can be identified, even between multiple copies\n  // of the builder.\n  get [TRANSACTION_BRAND]() {\n    return true;\n  }\n  // Temporary workaround for the wallet interface accidentally serializing transactions via postMessage\n  get pure() {\n    Object.defineProperty(this, \"pure\", {\n      enumerable: false,\n      value: createPure((value) => {\n        if (isSerializedBcs(value)) {\n          return __privateGet(this, _data).addInput(\"pure\", {\n            $kind: \"Pure\",\n            Pure: {\n              bytes: value.toBase64()\n            }\n          });\n        }\n        return __privateGet(this, _data).addInput(\n          \"pure\",\n          is(NormalizedCallArg, value) ? parse(NormalizedCallArg, value) : value instanceof Uint8Array ? Inputs.Pure(value) : { $kind: \"UnresolvedPure\", UnresolvedPure: { value } }\n        );\n      })\n    });\n    return this.pure;\n  }\n  /** Returns an argument for the gas coin, to be used in a transaction. */\n  get gas() {\n    return { $kind: \"GasCoin\", GasCoin: true };\n  }\n  /**\n   * Add a new object input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  objectRef(...args) {\n    return this.object(Inputs.ObjectRef(...args));\n  }\n  /**\n   * Add a new receiving input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  receivingRef(...args) {\n    return this.object(Inputs.ReceivingRef(...args));\n  }\n  /**\n   * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  sharedObjectRef(...args) {\n    return this.object(Inputs.SharedObjectRef(...args));\n  }\n  /** Add a transaction to the transaction */\n  add(command) {\n    if (typeof command === \"function\") {\n      return command(this);\n    }\n    const index = __privateGet(this, _data).commands.push(command);\n    return createTransactionResult(index - 1);\n  }\n  // Method shorthands:\n  splitCoins(coin, amounts) {\n    const command = Commands.SplitCoins(\n      typeof coin === \"string\" ? this.object(coin) : __privateMethod(this, _Transaction_instances, resolveArgument_fn).call(this, coin),\n      amounts.map(\n        (amount) => typeof amount === \"number\" || typeof amount === \"bigint\" || typeof amount === \"string\" ? this.pure.u64(amount) : __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, amount)\n      )\n    );\n    const index = __privateGet(this, _data).commands.push(command);\n    return createTransactionResult(index - 1, amounts.length);\n  }\n  mergeCoins(destination, sources) {\n    return this.add(\n      Commands.MergeCoins(\n        this.object(destination),\n        sources.map((src) => this.object(src))\n      )\n    );\n  }\n  publish({ modules, dependencies }) {\n    return this.add(\n      Commands.Publish({\n        modules,\n        dependencies\n      })\n    );\n  }\n  upgrade({\n    modules,\n    dependencies,\n    package: packageId,\n    ticket\n  }) {\n    return this.add(\n      Commands.Upgrade({\n        modules,\n        dependencies,\n        package: packageId,\n        ticket: this.object(ticket)\n      })\n    );\n  }\n  moveCall({\n    arguments: args,\n    ...input\n  }) {\n    return this.add(\n      Commands.MoveCall({\n        ...input,\n        arguments: args?.map((arg) => __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, arg))\n      })\n    );\n  }\n  transferObjects(objects, address) {\n    return this.add(\n      Commands.TransferObjects(\n        objects.map((obj) => this.object(obj)),\n        typeof address === \"string\" ? this.pure.address(address) : __privateMethod(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, address)\n      )\n    );\n  }\n  makeMoveVec({\n    type,\n    elements\n  }) {\n    return this.add(\n      Commands.MakeMoveVec({\n        type,\n        elements: elements.map((obj) => this.object(obj))\n      })\n    );\n  }\n  /**\n   * @deprecated Use toJSON instead.\n   * For synchronous serialization, you can use `getData()`\n   * */\n  serialize() {\n    return JSON.stringify(serializeV1TransactionData(__privateGet(this, _data).snapshot()));\n  }\n  async toJSON(options = {}) {\n    await this.prepareForSerialization(options);\n    return JSON.stringify(\n      parse(SerializedTransactionDataV2, __privateGet(this, _data).snapshot()),\n      (_key, value) => typeof value === \"bigint\" ? value.toString() : value,\n      2\n    );\n  }\n  /** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n  async sign(options) {\n    const { signer, ...buildOptions } = options;\n    const bytes = await this.build(buildOptions);\n    return signer.signTransaction(bytes);\n  }\n  /** Build the transaction to BCS bytes. */\n  async build(options = {}) {\n    await this.prepareForSerialization(options);\n    await __privateMethod(this, _Transaction_instances, prepareBuild_fn).call(this, options);\n    return __privateGet(this, _data).build({\n      onlyTransactionKind: options.onlyTransactionKind\n    });\n  }\n  /** Derive transaction digest */\n  async getDigest(options = {}) {\n    await __privateMethod(this, _Transaction_instances, prepareBuild_fn).call(this, options);\n    return __privateGet(this, _data).getDigest();\n  }\n  async prepareForSerialization(options) {\n    const intents = /* @__PURE__ */ new Set();\n    for (const command of __privateGet(this, _data).commands) {\n      if (command.$Intent) {\n        intents.add(command.$Intent.name);\n      }\n    }\n    const steps = [...__privateGet(this, _serializationPlugins)];\n    for (const intent of intents) {\n      if (options.supportedIntents?.includes(intent)) {\n        continue;\n      }\n      if (!__privateGet(this, _intentResolvers).has(intent)) {\n        throw new Error(`Missing intent resolver for ${intent}`);\n      }\n      steps.push(__privateGet(this, _intentResolvers).get(intent));\n    }\n    await __privateMethod(this, _Transaction_instances, runPlugins_fn).call(this, steps, options);\n  }\n};\n_serializationPlugins = new WeakMap();\n_buildPlugins = new WeakMap();\n_intentResolvers = new WeakMap();\n_data = new WeakMap();\n_Transaction_instances = new WeakSet();\nnormalizeTransactionArgument_fn = function(arg) {\n  if (isSerializedBcs(arg)) {\n    return this.pure(arg);\n  }\n  return __privateMethod(this, _Transaction_instances, resolveArgument_fn).call(this, arg);\n};\nresolveArgument_fn = function(arg) {\n  if (typeof arg === \"function\") {\n    return parse(Argument, arg(this));\n  }\n  return parse(Argument, arg);\n};\nprepareBuild_fn = async function(options) {\n  if (!options.onlyTransactionKind && !__privateGet(this, _data).sender) {\n    throw new Error(\"Missing transaction sender\");\n  }\n  await __privateMethod(this, _Transaction_instances, runPlugins_fn).call(this, [...__privateGet(this, _buildPlugins), resolveTransactionData], options);\n};\nrunPlugins_fn = async function(plugins, options) {\n  const createNext = (i) => {\n    if (i >= plugins.length) {\n      return () => {\n      };\n    }\n    const plugin = plugins[i];\n    return async () => {\n      const next = createNext(i + 1);\n      let calledNext = false;\n      let nextResolved = false;\n      await plugin(__privateGet(this, _data), options, async () => {\n        if (calledNext) {\n          throw new Error(`next() was call multiple times in TransactionPlugin ${i}`);\n        }\n        calledNext = true;\n        await next();\n        nextResolved = true;\n      });\n      if (!calledNext) {\n        throw new Error(`next() was not called in TransactionPlugin ${i}`);\n      }\n      if (!nextResolved) {\n        throw new Error(`next() was not awaited in TransactionPlugin ${i}`);\n      }\n    };\n  };\n  await createNext(0)();\n};\nlet Transaction = _Transaction;\nexport {\n  Transaction,\n  isTransaction\n};\n//# sourceMappingURL=Transaction.js.map\n","import { fromBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { isTransaction } from \"../transactions/index.js\";\nimport {\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeSuiAddress,\n  normalizeSuiObjectId\n} from \"../utils/sui-types.js\";\nimport { normalizeSuiNSName } from \"../utils/suins.js\";\nimport { SuiHTTPTransport } from \"./http-transport.js\";\nconst SUI_CLIENT_BRAND = Symbol.for(\"@mysten/SuiClient\");\nfunction isSuiClient(client) {\n  return typeof client === \"object\" && client !== null && client[SUI_CLIENT_BRAND] === true;\n}\nclass SuiClient {\n  get [SUI_CLIENT_BRAND]() {\n    return true;\n  }\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    this.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n  }\n  async getRpcApiVersion() {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: []\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getCoins\",\n      params: [input.owner, input.coinType, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getBalance\",\n      params: [input.owner, input.coinType]\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getAllBalances\", params: [input.owner] });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata(input) {\n    return await this.transport.request({\n      method: \"suix_getCoinMetadata\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply(input) {\n    return await this.transport.request({\n      method: \"suix_getTotalSupply\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params) {\n    return await this.transport.request({ method, params });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes(input) {\n    return await this.transport.request({\n      method: \"sui_getMoveFunctionArgTypes\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModulesByPackage\",\n      params: [input.package]\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModule\",\n      params: [input.package, input.module]\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveFunction\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct(input) {\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveStruct\",\n      params: [input.package, input.module, input.struct]\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getOwnedObjects\",\n      params: [\n        input.owner,\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit\n      ]\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"sui_getObject\",\n      params: [input.id, input.options]\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"sui_tryGetPastObject\",\n      params: [input.id, input.version, input.options]\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetObjects\",\n      params: [input.ids, input.options]\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks(input) {\n    return await this.transport.request({\n      method: \"suix_queryTransactionBlocks\",\n      params: [\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!isValidTransactionDigest(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"sui_getTransactionBlock\",\n      params: [input.digest, input.options]\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach((d) => {\n      if (!isValidTransactionDigest(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetTransactionBlocks\",\n      params: [input.digests, input.options]\n    });\n  }\n  async executeTransactionBlock({\n    transactionBlock,\n    signature,\n    options,\n    requestType\n  }) {\n    const result = await this.transport.request({\n      method: \"sui_executeTransactionBlock\",\n      params: [\n        typeof transactionBlock === \"string\" ? transactionBlock : toBase64(transactionBlock),\n        Array.isArray(signature) ? signature : [signature],\n        options\n      ]\n    });\n    if (requestType === \"WaitForLocalExecution\") {\n      try {\n        await this.waitForTransaction({\n          digest: result.digest\n        });\n      } catch (_) {\n      }\n    }\n    return result;\n  }\n  async signAndExecuteTransaction({\n    transaction,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transaction instanceof Uint8Array) {\n      transactionBytes = transaction;\n    } else {\n      transaction.setSenderIfNotSet(signer.toSuiAddress());\n      transactionBytes = await transaction.build({ client: this });\n    }\n    const { signature, bytes } = await signer.signTransaction(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks() {\n    const resp = await this.transport.request({\n      method: \"sui_getTotalTransactionBlocks\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice() {\n    const resp = await this.transport.request({\n      method: \"suix_getReferenceGasPrice\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({ method: \"suix_getStakes\", params: [input.owner] });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedSuiIds.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"suix_getStakesByIds\",\n      params: [input.stakedSuiIds]\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestSuiSystemState() {\n    return await this.transport.request({ method: \"suix_getLatestSuiSystemState\", params: [] });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents(input) {\n    return await this.transport.request({\n      method: \"suix_queryEvents\",\n      params: [\n        input.query,\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   *\n   * @deprecated\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeEvent\",\n      unsubscribe: \"suix_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * @deprecated\n   */\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeTransaction\",\n      unsubscribe: \"suix_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if (isTransaction(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = toBase64(\n        await input.transactionBlock.build({\n          client: this,\n          onlyTransactionKind: true\n        })\n      );\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = toBase64(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    return await this.transport.request({\n      method: \"sui_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_dryRunTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : toBase64(input.transactionBlock)\n      ]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"suix_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"suix_getDynamicFieldObject\",\n      params: [input.parentId, input.name]\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber() {\n    const resp = await this.transport.request({\n      method: \"sui_getLatestCheckpointSequenceNumber\",\n      params: []\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({ method: \"sui_getCheckpoint\", params: [input.id] });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"suix_getCommitteeInfo\",\n      params: [input?.epoch]\n    });\n  }\n  async getNetworkMetrics() {\n    return await this.transport.request({ method: \"suix_getNetworkMetrics\", params: [] });\n  }\n  async getAddressMetrics() {\n    return await this.transport.request({ method: \"suix_getLatestAddressMetrics\", params: [] });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics() {\n    return await this.transport.request({ method: \"suix_getMoveCallMetrics\", params: [] });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch() {\n    return await this.transport.request({ method: \"suix_getCurrentEpoch\", params: [] });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy() {\n    return await this.transport.request({ method: \"suix_getValidatorsApy\", params: [] });\n  }\n  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n  async getChainIdentifier() {\n    const checkpoint = await this.getCheckpoint({ id: \"0\" });\n    const bytes = fromBase58(checkpoint.digest);\n    return toHex(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceAddress\",\n      params: [input.name]\n    });\n  }\n  async resolveNameServiceNames({\n    format = \"dot\",\n    ...input\n  }) {\n    const { nextCursor, hasNextPage, data } = await this.transport.request({\n      method: \"suix_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit]\n    });\n    return {\n      hasNextPage,\n      nextCursor,\n      data: data.map((name) => normalizeSuiNSName(name, format))\n    };\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"sui_getProtocolConfig\",\n      params: [input?.version]\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransaction({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {\n    });\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch (e) {\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, pollInterval)),\n          timeoutPromise\n        ]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\nexport {\n  SuiClient,\n  isSuiClient\n};\n//# sourceMappingURL=client.js.map\n","import { getFullnodeUrl, SuiClient } from \"@mysten/sui/client\";\nimport { createNetworkConfig } from \"@mysten/dapp-kit\";\n\ntype Network = \"mainnet\" | \"testnet\" | \"devnet\" | \"localnet\";\n\n// const network = (process.env.NEXT_PUBLIC_NETWORK as Network) || \"testnet\";\nconst network = \"testnet\";\n\nconst { networkConfig, useNetworkVariable, useNetworkVariables } = createNetworkConfig({\n    testnet: {\n        url: getFullnodeUrl(\"testnet\"),\n        variables: {},\n    },\n    mainnet: {\n        url: getFullnodeUrl(\"mainnet\"),\n        variables: {},\n    },\n    devnet: {\n        url: getFullnodeUrl(\"devnet\"),\n        variables: {},\n    },\n    localnet: {\n        url: getFullnodeUrl(\"localnet\"),\n        variables: {},\n    },\n});\n\n// 创建全局 SuiClient 实例\nconst suiClient = new SuiClient({ url: networkConfig[network].url });\n\nexport { useNetworkVariable, useNetworkVariables, networkConfig, network, suiClient };\n","'use client'\r\n\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { SuiClientProvider, WalletProvider } from \"@mysten/dapp-kit\";\r\nimport { networkConfig, network } from \"../../config\"\r\nimport \"@mysten/dapp-kit/dist/index.css\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport function Providers({ children }) {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <SuiClientProvider networks={networkConfig} defaultNetwork={network}>\r\n        <WalletProvider>\r\n          {children}\r\n        </WalletProvider>\r\n      </SuiClientProvider>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","import { Main } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../utils/getTranslation';\nimport { Providers } from \"../components/providers/sui-provider\";\nimport {\n  ConnectButton,\n  useCurrentAccount,\n  useSignAndExecuteTransaction,\n  useSuiClient,\n} from \"@mysten/dapp-kit\";\n\nconst HomePage = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Providers>\n      <Main>\n      <ConnectButton>连接钱包</ConnectButton>\n        <span>123</span>\n        <button>111</button>\n        <h1>Welcome to {formatMessage({ id: getTranslation('haha2') })}</h1>\n      </Main>\n    </Providers>\n  );\n};\n\nexport { HomePage };\n","import { Page } from '@strapi/strapi/admin';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { HomePage } from './HomePage';\n\nconst App = () => {\n  return (\n    <Routes>\n      <Route index element={<HomePage />} />\n      <Route path=\"*\" element={<Page.Error />} />\n    </Routes>\n  );\n};\n\nexport { App };\n"],"names":["__typeError","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","_requestId","network","ALPHABET","basex"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14]}